<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[CTS junior Web developer]]></title><description><![CDATA[Web developer Learning.]]></description><link>https://ctsictai.github.io/</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 10 Oct 2019 14:53:04 GMT</lastBuildDate><item><title><![CDATA[09.30~10.04 한 주 정리 part.4]]></title><description><![CDATA[배열 / class / 주석]]></description><link>https://ctsictai.github.io//posts/the-birth-of-movable-type/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/the-birth-of-movable-type/</guid><pubDate>Thu, 10 Oct 2019 23:45:03 GMT</pubDate><content:encoded>&lt;h2 id=&quot;array배열&quot;&gt;&lt;a href=&quot;#array%EB%B0%B0%EC%97%B4&quot; aria-label=&quot;array배열 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Array(배열)&lt;/h2&gt;
&lt;p&gt;비슷한 성질을 가진 데이터들의 집합&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;배열의 요소(Elements)
&lt;code&gt;let name = [‘chris’, 2, test(name), [‘rs’, ‘esp’], function (price)]&lt;/code&gt;&lt;br&gt;
&amp;#x3C;&gt; Element type – everything! – str /num / array / etc on..&lt;/li&gt;
&lt;li&gt;인덱싱 – 배열안에서 각 요소들은 주소값(?)을 가지고 있다. – 배열안의 요소를 쉽게 찾을 수 있도록 하는 기능이다. – 매우매우 많이 씀&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;function getElement() {
let arr = [3, [4, [“array”, 9], 2+3], [0]];}&lt;/code&gt;
&lt;code&gt;return arr[1][1][0];}&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;배열의 요소는 다양한 타입이 가능하다. 특히 배열안의 배열도 가능하다. 이렇게 [[[]]]- 배열 속에 배열이 있는 구조를 다차원 배열이라고 한다.&lt;/li&gt;
&lt;li&gt;그러면 다차원 배열의 인덱싱은 어떻게 할까??? 가장 바깥의 배열부터 안에 있는 배열 순서대로 인덱싱을 진행하면&lt;/li&gt;
&lt;li&gt;[1]-가장 바깥의 배열의 2번째 요소(이게 배열이다) - [4, [“array”, 9], 2+3],&lt;/li&gt;
&lt;li&gt;[1] - 1에서 인덱싱한 요소가 배열이고 이 배열에서 2번째 요소(이것도 배열) - [“array”, 9]&lt;/li&gt;
&lt;li&gt;[0] - 2에서 인덱싱한 요소가 배열이고 이 배열에서 1번째 요소 -“array”가 출력된다.&lt;/li&gt;
&lt;li&gt;배열 요소 추가하기&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;let cities = [];&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;array명[원하는 인덱싱] = 넣으려는 요소값&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;cities[0] = “서울”;&lt;/code&gt;
&lt;code&gt;cities[1] = “대전”;&lt;/code&gt;
&lt;code&gt;cities[2] = “대구”;&lt;/code&gt;
&lt;code&gt;cities[2] = “부산”;&lt;/code&gt; – 대구에서 부산으로 업뎃됨
&lt;code&gt;cities.push(“포항”);&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;요소 맨뒤에 위의 경우는 [3]에 “포항”을 집어 넣음&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;cities.unshift(“강릉”);&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;요소 맨앞에 위의 경우는 [0]에 “강릉”을 집어 넣음&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Cities.pop();&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;맨 뒤에 있던 요소 “포항”이 날라감&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;※ Callback 함수 – 인자로 전달되는 함수 – 함수에서 다시 불러와지는(콜백) 함수&lt;/p&gt;
&lt;h4 id=&quot;arraymap&quot;&gt;&lt;a href=&quot;#arraymap&quot; aria-label=&quot;arraymap permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Array.map()&lt;/h4&gt;
&lt;p&gt;배열을 반복해주는데, callback 함수에서 return한 값으로 매 요소를 수정해준다.
Map 메서드 return값은 수정도니 값으로 다시 생성된 배열.
Array 타입의 데이터를 요소 갯수 만큼 반복합니다.
반복할 때마다 실행할 함수를 parameter로 전달합니다.
그러면 이 callback 함수에서 array의 요소를 인자(x)로 받습니다.
해당 요소를 수정하고 싶은대로 로직을 구현하고 return해주면,
해당 index의 요소가 return 된 값으로 치환됩니다.&lt;/p&gt;
&lt;h4 id=&quot;arrayforeach&quot;&gt;&lt;a href=&quot;#arrayforeach&quot; aria-label=&quot;arrayforeach permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Array.forEach()&lt;/h4&gt;
&lt;p&gt;For 대신 사용하는 반복문
forEach는 함수 자체가 return하는 것도 아무것도 없는게 큰 차이
forEach함수를 탈출 하고 싶을 때 return을 사용하면 됨 – 지정 해줘야 됨 - for문에 종료조건에 따른 리턴 되는게 없으면 계속 반복하는 것 처럼&lt;/p&gt;
&lt;h2 id=&quot;class&quot;&gt;&lt;a href=&quot;#class&quot; aria-label=&quot;class permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Class&lt;/h2&gt;
&lt;p&gt;Object를 정의하는 프레임 혹은 설계
원하는 구조의 객체의 프레임을 설계해 놓고, 비슷한 모양의 객체를 공장처럼 찍어낼 수 있다.
비슷한 모양의 객체를 계속적으로 만드는 건 낭비 이걸 class라는 설계도를 통해 공통적인 부분의 중복 코딩을 막을 수 있다. 또한 코드 가독성 및 유지, 보수, 변경에도 훨씬 유리하다&lt;/p&gt;
&lt;p&gt;★ CSS에서 말하는 Class와는 개념이 다르다!!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JS Class 작성 예시&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;class Car {&lt;/code&gt; 클래스명은 대문자 시작 CamelCase 작성 규칙&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;constructor(name, price) {&lt;/code&gt;생성자 영역 – 인자 2개 받음 context 밖에서 인스턴스 생성할때마다 맨 먼저 호출되는 부분(클래스를 시작하기 위한 첫 기초단계라고 생각하자)
&lt;code class=&quot;language-text&quot;&gt;this.name = name;&lt;/code&gt; this는 class 영역(context) 내에서 적용할 인스턴스 name인스턴스는 = 인자 name값 ø context(class 개념에서) = scope (함수 개념에서)
&lt;code class=&quot;language-text&quot;&gt;this.price = price;&lt;/code&gt; 위와 동일하고 price인스턴스 인자값만 price로
&lt;code class=&quot;language-text&quot;&gt;this.department = &amp;quot;선릉지점&amp;quot;;&lt;/code&gt; department 인스턴스는 “선릉지점” 값
&lt;code class=&quot;language-text&quot;&gt;this.salesAmount = 0;&lt;/code&gt;salesAmount 인스턴스는 0값
&lt;code class=&quot;language-text&quot;&gt;}&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;applyDiscount(discount) {&lt;/code&gt;클래스 내에 생성되는 함수 = 메서드 à 객체가 프로터티 값으로 갖고 있다.
&lt;code class=&quot;language-text&quot;&gt;return this.price * discount;&lt;/code&gt; - this 인스턴스를 써야 class내에서는 통한다!
&lt;code class=&quot;language-text&quot;&gt;} addSales() { this.salesAmount++; } changeDepartment(departmentName){ this.department = departmentName; } }&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;if문&quot;&gt;&lt;a href=&quot;#if%EB%AC%B8&quot; aria-label=&quot;if문 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;if문&lt;/h2&gt;
&lt;p&gt;“만약에 ~하면 ~한다.”가 컴퓨터 언어로 변환&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;|| and &amp;#x26;&amp;#x26;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;if (answer === &amp;quot;선릉&amp;quot; || answer === &amp;quot;강남&amp;quot; || answer === &amp;quot;역삼&amp;quot;)&lt;/code&gt; - 선릉 or 강남 or 역삼인 경우&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;||는 or 논리 연산자이다.&lt;/li&gt;
&lt;li&gt;&amp;#x26;&amp;#x26; and 논리 연산자
&lt;code class=&quot;language-text&quot;&gt;if (hobby === &amp;quot;축구&amp;quot; &amp;amp;&amp;amp; morning === &amp;quot;네&amp;quot;)&lt;/code&gt; - hobby가 축구이고 morning이 네인 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex)
&lt;code class=&quot;language-text&quot;&gt;if (age &amp;gt; 65 || age &amp;lt; 21 &amp;amp;&amp;amp; res === &amp;quot;한국&amp;quot;)&lt;/code&gt; – 왼쪽부터 해석!
=&gt; 나이가 65세 초과이거나 나이가 21세 미만이고 한국거주하는 사람&lt;/p&gt;
&lt;p&gt;위의 코드는 가독성이 좋지 않으므로 밑에 처럼 () 처리하는게 좋다
&lt;code class=&quot;language-text&quot;&gt;if (age &amp;gt; 65 || (age &amp;lt; 21 &amp;amp;&amp;amp; res === &amp;quot;한국&amp;quot;))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;만약에 이런 형식의 코드는 어떻게 해석이 될까?
&lt;code class=&quot;language-text&quot;&gt;if ((age &amp;gt; 65 || age &amp;lt; 21) &amp;amp;&amp;amp; res === &amp;quot;한국&amp;quot;)&lt;/code&gt;
=&gt; 나이가 65세 초과거나 21세미만이고 한국 거주하는 자&lt;/p&gt;
&lt;h2 id=&quot;주석---주석-연산자--&quot;&gt;&lt;a href=&quot;#%EC%A3%BC%EC%84%9D---%EC%A3%BC%EC%84%9D-%EC%97%B0%EC%82%B0%EC%9E%90--&quot; aria-label=&quot;주석   주석 연산자   permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;주석 - 주석 연산자(//, /* */)&lt;/h2&gt;</content:encoded></item><item><title><![CDATA[09.30~10.04 한 주 정리 part3]]></title><description><![CDATA[Number Type / Object 정리]]></description><link>https://ctsictai.github.io//posts/humane-typography-in-the-digital-age/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/humane-typography-in-the-digital-age/</guid><pubDate>Wed, 09 Oct 2019 22:40:32 GMT</pubDate><content:encoded>&lt;h2 id=&quot;number-type-파헤치기&quot;&gt;&lt;a href=&quot;#number-type-%ED%8C%8C%ED%97%A4%EC%B9%98%EA%B8%B0&quot; aria-label=&quot;number type 파헤치기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Number type 파헤치기!!&lt;/h2&gt;
&lt;p&gt;가장 중요한 객체 Math 객체 – 수학 계산식을 모아 놓은 object라고 보면 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[] Round / floor / ceil / random 자주 쓰는 함수들&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.round(2.5);&lt;/code&gt; 3 반올림! – 평점계산시 정수값 반환&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.floor(4.2);&lt;/code&gt; 4 가장 가까운 정수값으로 내림!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.ceil(4.1);&lt;/code&gt; 5 가장 가까운 정수값으로 올림!&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Math.random();&lt;/code&gt; 0~1까지의 임의의 실수 값 리턴! – 로또 / 이벤트 당첨자&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;단점 0~1이라는 한정된 구간이라서 문제 그래서 Math.random에 원하는 구간값을 곱해서 난수를 뽑아 낸다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ex) min ~ max 사이의 난수 값 추출&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(Math.random() * (max - min) ) + min&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;object객체&quot;&gt;&lt;a href=&quot;#object%EA%B0%9D%EC%B2%B4&quot; aria-label=&quot;object객체 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Object(객체)&lt;/h2&gt;
&lt;p&gt;좀 더 편안하게 코드 및 데이터를 관리할 수 있는 틀
다시 말하면 객체는 이름과 값으로 구성된 프로퍼티들의 집합이라고 할 수 있다.
Key-value로 되어 있으면 순서는 상관없음 key 값으로 다 찾을 수 있기 때문에&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/hyksmine/30d9e230-e5f3-11e9-a8fa-f7c7f5a2598c/15548253760452a280e2abfdc8cec2b3b9244788f8350.png&quot; alt=&quot;javascript 객체 프로퍼티&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;객체는 {}(중괄호)로 감싸져 있고,&lt;/li&gt;
&lt;li&gt;콜론으로 구분된 이름/값 쌍들이&lt;/li&gt;
&lt;li&gt;쉼표로 분리된 목록의 형태입니다.&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Property의 규칙&lt;/li&gt;
&lt;li&gt;property 이름은 중복될 수 없다.&lt;/li&gt;
&lt;li&gt;property이름과 property값 사이에 :(콜론)으로 구분한다.&lt;/li&gt;
&lt;li&gt;property를 추가할 때는 ,(쉼표)를 붙여준다.&lt;/li&gt;
&lt;li&gt;property 값에는 어느 type이나 가능하다(string, number, array, object, function..)&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 객체의 Key(프로퍼티명) – 프로퍼티 값에 대해 변수처럼 역할을 하는 것으로서 텍스트, 숫자, 함수, 객체, 특수문자도 가능 하다.&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Key Searching – 객체명[‘key’] – key에 상응하는 value가 나옴 – 많이 쓰임!!! – 객체 안의 특정 값을 찾아내는데 매우 유용&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;value-수정--새로운-key-추가&quot;&gt;&lt;a href=&quot;#value-%EC%88%98%EC%A0%95--%EC%83%88%EB%A1%9C%EC%9A%B4-key-%EC%B6%94%EA%B0%80&quot; aria-label=&quot;value 수정  새로운 key 추가 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Value 수정 / 새로운 key 추가&lt;/h4&gt;
&lt;p&gt;객체에 이미 키가 존재하는데, 다시 한 번 할당하면 값이 교체(수정)됩니다.
이전에 없던 키로 접근하면, 새로운 프로퍼티가 추가 됩니다.&lt;/p&gt;
&lt;p&gt;※ 키 생성시 값을 부여하지 않으면 undefined로 뜬다. 주의하자!&lt;/p&gt;
&lt;h3 id=&quot;method메서드&quot;&gt;&lt;a href=&quot;#method%EB%A9%94%EC%84%9C%EB%93%9C&quot; aria-label=&quot;method메서드 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Method(메서드)&lt;/h3&gt;
&lt;p&gt;객체에 저장된 값이 함수일 때&lt;/p&gt;
&lt;h4 id=&quot;객체의-property값을-접근&quot;&gt;&lt;a href=&quot;#%EA%B0%9D%EC%B2%B4%EC%9D%98-property%EA%B0%92%EC%9D%84-%EC%A0%91%EA%B7%BC&quot; aria-label=&quot;객체의 property값을 접근 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;객체의 property값을 접근&lt;/h4&gt;
&lt;p&gt;프로퍼티의 값은 추가/수정/type 변환 가능 새로운 프로퍼티 추가 가능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로퍼티 추가 – 객체명.프로퍼티명.siblingproperty = 추가할 프로퍼티 값&lt;/li&gt;
&lt;li&gt;수정 – 객체명.프로퍼티명 = 수정할 프로퍼티 값 – 이 때 type 다르게 하면 됨&lt;/li&gt;
&lt;li&gt;추가 – 객체명.프로퍼티명 = 추가로 입력할 프로퍼티 값&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 다중 객체 배열의 객체
&lt;code&gt;let objData = { name: 50, address: { email: “gaebal@gmail.com”, home: “위워크 선릉2호점” }, books: { year: [2019, 2018, 2006], info: [{ name: “JS Guide”, price: 9000 }, { name: “HTML Guide”, price: 19000, author: “Kim, gae bal” }] } };&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여기서 “JS Guide”를 찾아내고 싶다면 어떻게 해야 할까?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Let bookName = objData.books.info[0].name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let bookName = objData(객체명).books(프로퍼티명).info(프로퍼티명)&lt;a href=&quot;info%20%EB%B0%B0%EC%97%B4%EC%95%88%EC%97%90%20%EC%B2%AB%20%EB%B2%88%EC%A7%B8%20%EC%9A%94%EC%86%8C%EC%9D%B4%EB%AF%80%EB%A1%9C&quot;&gt;0&lt;/a&gt;.name(프로퍼티명) = name에 대한 프로퍼티 값 “JS Guide”가 나옴&lt;/p&gt;</content:encoded></item><item><title><![CDATA[09.30~10.04 한 주 정리 part2]]></title><link>https://ctsictai.github.io//posts/a-brief-history-of-typography/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/a-brief-history-of-typography/</guid><pubDate>Tue, 08 Oct 2019 22:50:32 GMT</pubDate><content:encoded>&lt;h2 id=&quot;1-string-type에-대해-파헤쳐-보자&quot;&gt;&lt;a href=&quot;#1-string-type%EC%97%90-%EB%8C%80%ED%95%B4-%ED%8C%8C%ED%97%A4%EC%B3%90-%EB%B3%B4%EC%9E%90&quot; aria-label=&quot;1 string type에 대해 파헤쳐 보자 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. String type에 대해 파헤쳐 보자&lt;/h2&gt;
&lt;p&gt;string type은 ” ” / ’ ’ / &lt;code class=&quot;language-text&quot;&gt;&lt;/code&gt; 사이에 있는 것을 말한다.&lt;/p&gt;
&lt;p&gt;string type은 대소문자를 구별한다. n is not equal N&lt;/p&gt;
&lt;p&gt;string type은 str에 제공되는 메서드를 쓸 수 있다.&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;(1) Length 메서드&lt;/p&gt;
&lt;p&gt;Str.length = str의 길이를 알 수 있다 – 굉장히 많이 씀!!&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;(2) indexOf 메서드&lt;/p&gt;
&lt;p&gt;str.indexOf(“찾고자 하는 문자”) – 찾고자 하는 문자의 인덱싱 값을 반환 해준다. – 많이 씀!!
문자가 복수 문자일 경우 첫 문자열 기준으로 반환한다. 만약에 인자값에 입력한 값이 없으면 -1을 반환한다.&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;※ 문자의 인덱싱 값(위치)를 알아서 무엇에 좋을까?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;차단할 단어 모음이 존재하면, 사용자가 댓글 쓰고 댓글달기를 누를 때 차단할 단어 모음중 하나라도 매치되면 댓글을 못달게 할 수 있다.&lt;/li&gt;
&lt;li&gt;오타를 코딩으로 수정 가능함.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;(3) Slice 메서드
str.slice(시작할 인덱싱 혹은 특정 str, 종료 인덱싱 혹은 특정 str) – 텍스트를 잘라주는 함수&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;str = “JavaScript는 프로래밍 언어이다.&amp;quot;;&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;str.slice(0, 4);&lt;/code&gt; - java =&gt; [4]의 위치는 ‘S’인데 S앞까지 잘라준다!! 중요!!!
&lt;code class=&quot;language-text&quot;&gt;Str.slice(5, 13);&lt;/code&gt; - “cript는 프” [5] 부터 시작 [13]인 ‘로’ 앞까지
앞서서 &lt;code class=&quot;language-text&quot;&gt;let char = str.indexOf(“Script”);&lt;/code&gt; - 위치 인덱싱 값 반환 – 첫 문자 ‘S’ 기준으로 인덱싱값 반환&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;str.slice(char);&lt;/code&gt;=&gt; Script는 프로래밍 언어이다 - 출력 =&gt; 2번째 인자 안주면 무조건 끝까지 !!&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;(4) StartsWith(“시작하는 문자열”)&lt;/p&gt;
&lt;p&gt;– 해당 문자열로 str이 시작하는지 아닌지 true/false&lt;/p&gt;
&lt;p&gt;(5) endsWith(“끝나는 문자열”)&lt;/p&gt;
&lt;p&gt;– 해당 문자열로 str이 끝나는지 아닌지 true/false&lt;/p&gt;
&lt;p&gt;(6) includes(“찾으려는 문자열”)&lt;/p&gt;
&lt;p&gt;– 해당 문자열에 찾으려는 문자열이 있으면 true 없으면 false 반환&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h2 id=&quot;1-2-텍스트-문자열str의-연결&quot;&gt;&lt;a href=&quot;#1-2-%ED%85%8D%EC%8A%A4%ED%8A%B8-%EB%AC%B8%EC%9E%90%EC%97%B4str%EC%9D%98-%EC%97%B0%EA%B2%B0&quot; aria-label=&quot;1 2 텍스트 문자열str의 연결 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1-2. 텍스트 문자열(str)의 연결**&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;구버전&lt;/th&gt;
&lt;th&gt;ES6&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;“안녕하세요! ” + username(변수) + “님”&lt;/td&gt;
&lt;td&gt;const hi = &lt;code class=&quot;language-text&quot;&gt;안녕하세요. 저는 ${name} 입니다.&lt;/code&gt;;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- +를 붙여야 한다. Str type이라면 ‘’나 “” 필수&lt;/td&gt;
&lt;td&gt;+ 필요없고 ${name -변수} 변수값을 문자열 값에 넣을 수 있다. 그리고 &lt;code class=&quot;language-text&quot;&gt;&lt;/code&gt;(1옆에 있는 기호)로 문자열 지정이 가능하고 변수값을 넣을 수 있게 되었다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;구버전&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Let detail = ‘자세히’\n +’보아야’\n + ‘이이이’;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let detail = “자세히&lt;/p&gt;
&lt;p&gt;보아야&lt;/p&gt;
&lt;p&gt;이이이”;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ES6&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let message = &amp;quot;감사합니다., &amp;quot;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let userName = &amp;quot;김개발&amp;quot;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let banger = &amp;quot;님!&amp;quot;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let customMess = message + userName + banger;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let message = &amp;quot;감사합니다., &amp;quot;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let userName = &amp;quot;김개발&amp;quot;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let banger = &amp;quot;님!&amp;quot;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let customMess =&lt;/code&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;{message}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.625em;vertical-align:-0.19444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.03588em;&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;e&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;{userName} ${banger};`&lt;/p&gt;
&lt;h3 id=&quot;str과-number-type의-만남--js의-특징&quot;&gt;&lt;a href=&quot;#str%EA%B3%BC-number-type%EC%9D%98-%EB%A7%8C%EB%82%A8--js%EC%9D%98-%ED%8A%B9%EC%A7%95&quot; aria-label=&quot;str과 number type의 만남  js의 특징 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;str과 number type의 만남 – js의 특징&lt;/h3&gt;
&lt;p&gt;String + Number 을 시도할 때 항상 주의해야 합니다.
String과 Number형을 더하면 항상 String 형으로 변환됩니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let text = &amp;quot;2 더하기 2는 &amp;quot; + (2 + 2)&lt;/code&gt; – |2 더하기 2는 4| 출력&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let text = &amp;quot;2 더하기 2는 &amp;quot; + 2 + 2;&lt;/code&gt; - |2 더하기 2는 22| 출력&lt;/p&gt;
&lt;h2 id=&quot;1-3-string-☞-number-type-변환&quot;&gt;&lt;a href=&quot;#1-3-string-%E2%98%9E-number-type-%EB%B3%80%ED%99%98&quot; aria-label=&quot;1 3 string ☞ number type 변환 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1-3. String ☞ Number type 변환​&lt;/h2&gt;
&lt;p&gt;JS에서는 type error가 잘 안나는 편이라 덜 신경쓰이지만 원래 다른 언어에서는 칼 같이 type에 따른 error가 많이 뜬다. 범용적으로 str은 str끼리 num은 num끼리 묶어야 코드 가독성이 좋다.&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;+기호_는 str, num type 신경안쓰고 모두 되는 연산자라 많이 헷갈린다.
꼭 문자형과 숫자형을 구분하는 것이 좋다.&lt;/li&gt;
&lt;li&gt;기호_는 num type만 가능하므로 str type으로 -연산하면 NaN(Not a Number)가 뜬다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;string을-number-type으로-변환하는-메서드&quot;&gt;&lt;a href=&quot;#string%EC%9D%84-number-type%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%98%EB%8A%94-%EB%A9%94%EC%84%9C%EB%93%9C&quot; aria-label=&quot;string을 number type으로 변환하는 메서드 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;String을 Number type으로 변환하는 메서드&lt;/h3&gt;
&lt;p&gt;Number! parseInt / parseFloat
&lt;code class=&quot;language-text&quot;&gt;Let birthinput = “1999”&lt;/code&gt; -str
&lt;code class=&quot;language-text&quot;&gt;Let birth = Number(birhinput);&lt;/code&gt; - num​&lt;/p&gt;
&lt;h3 id=&quot;number을-string-type으로-변환하는-메서드&quot;&gt;&lt;a href=&quot;#number%EC%9D%84-string-type%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%98%EB%8A%94-%EB%A9%94%EC%84%9C%EB%93%9C&quot; aria-label=&quot;number을 string type으로 변환하는 메서드 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Number을 String type으로 변환하는 메서드&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Let n = 12;&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;Let nToS = n.toString();&lt;/code&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Git을 이용한 gatsby blog 작성]]></title><link>https://ctsictai.github.io//posts/the-origins-of-social-stationery-lettering</link><guid isPermaLink="false">https://ctsictai.github.io//posts/the-origins-of-social-stationery-lettering</guid><pubDate>Tue, 08 Oct 2019 22:30:32 GMT</pubDate><content:encoded>&lt;h1 id=&quot;git의-구조&quot;&gt;&lt;a href=&quot;#git%EC%9D%98-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;git의 구조 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git의 구조&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://jistol.github.io/assets/img/git/git-basic/git-basic-3.png&quot; alt=&quot;Git-Structure&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;git-add-&quot;&gt;&lt;a href=&quot;#git-add-&quot; aria-label=&quot;git add  permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Git add .&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;변경된 파일을 모두 tracking해서 working space에서 stage(index)로 upload&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;git-status&quot;&gt;&lt;a href=&quot;#git-status&quot; aria-label=&quot;git status permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git status&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;현재의 git과의 상태를 체크하는 명령어 - step by step 마다 쳐서 확인한다. (add/commit 상태 확인)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;no add status&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;modified: movie/views.py&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add status&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;new file: requirements.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;git-commit--m-message&quot;&gt;&lt;a href=&quot;#git-commit--m-message&quot; aria-label=&quot;git commit  m message permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git commit -m “message”&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;간결하고 알아볼 수 있는 message를 남긴다. commit을 하면 index에서 local repo로 간다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;git-remote-add-origin-github-repo-url&quot;&gt;&lt;a href=&quot;#git-remote-add-origin-github-repo-url&quot; aria-label=&quot;git remote add origin github repo url permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git remote add origin github repo url&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;local repo와 remote repo를 연결하기 위해 github에서 만든 new repository 주소를 붙여준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;git-remote--v&quot;&gt;&lt;a href=&quot;#git-remote--v&quot; aria-label=&quot;git remote  v permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git remote -v&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;local repo와 연결된 remote repo 상태를 보여주는 명령어&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;git-branch-branch-name&quot;&gt;&lt;a href=&quot;#git-branch-branch-name&quot; aria-label=&quot;git branch branch name permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git branch “branch name”&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;create branch&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;git-branch&quot;&gt;&lt;a href=&quot;#git-branch&quot; aria-label=&quot;git branch permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git branch&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;해당 remote repo에 생성된 branch 현황을 보여준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;git-push-origin-master-혹은-branch-name&quot;&gt;&lt;a href=&quot;#git-push-origin-master-%ED%98%B9%EC%9D%80-branch-name&quot; aria-label=&quot;git push origin master 혹은 branch name permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git push origin master 혹은 branch name&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;remote repo(github에 있는 repo)에 최종적으로 file upload&lt;/li&gt;
&lt;li&gt;이 때 master는 master branch에 push 하는 것이고 branch name은 만든 branchdp push 한다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[09.30 ~ 10.04 한 주 정리 part.1]]></title><description><![CDATA[1. 변수
변수를 선언하는 명령어 - var / let / const - 최신버전에서는 var 사용은 지양한다.
- Let – 변수값 수정 가능
- Const – 변수값 수정 불가능
- [ ] 변수 선언 문법.]]></description><link>https://ctsictai.github.io//posts/perfecting-the-art-of-perfection/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/perfecting-the-art-of-perfection/</guid><pubDate>Tue, 08 Oct 2019 17:41:37 GMT</pubDate><content:encoded>&lt;h1 id=&quot;0930--1004-한-주-정리-part1&quot;&gt;&lt;a href=&quot;#0930--1004-%ED%95%9C-%EC%A3%BC-%EC%A0%95%EB%A6%AC-part1&quot; aria-label=&quot;0930  1004 한 주 정리 part1 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;09.30 ~ 10.04 한 주 정리 part.1&lt;/h1&gt;
&lt;h2 id=&quot;1-변수&quot;&gt;&lt;a href=&quot;#1-%EB%B3%80%EC%88%98&quot; aria-label=&quot;1 변수 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 변수&lt;/h2&gt;
&lt;p&gt;변수를 선언하는 명령어 - var / let / const - 최신버전에서는 var 사용은 지양한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Let – 변수값 수정 가능&lt;/li&gt;
&lt;li&gt;Const – 변수값 수정 불가능&lt;/li&gt;
&lt;li&gt;[] 변수 선언 문법&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://blogfiles.pstatic.net/MjAxOTEwMDRfMTIz/MDAxNTcwMTk4OTQ1NzQx.a4yWDmRikvIoOXDD6w84MQEZsHreb5R5xINSum38KJYg.dscq-Xo5r3CKotSm2oiZJHxT4IACet5L4_o_mciQVoog.PNG.civicofjuve/image.png?type=w1&quot;&gt;&lt;/p&gt;
&lt;p&gt;◎ 변수이름 짓기 규칙&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;대소문자 구문 - 변수이름, 함수이름, 연산자 모두 대소문자를 구분합니다. 따라서 myName과 MyName은 다른 변수입니다.&lt;/li&gt;
&lt;li&gt;변수 이름을 정할 때, 첫 번째 문자는 반드시 글자나 밑줄(_), 달러기호($)중 하나입니다.&lt;/li&gt;
&lt;li&gt;두 번째 문자부터는 글자, 밑줄, 달러, 숫자 중에서 자유롭게 쓸 수 있습니다.&lt;/li&gt;
&lt;li&gt;변수이름, 함수이름 등 camelCase(카멜케이스) 방식으로 쓸 것.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;※ 카멜케이스(camelCase)란?&lt;/p&gt;
&lt;p&gt;낙타 등처럼 울퉁불퉁하다는 소리입니다. 단어가 새로 시작할 때부터 대문자로 쓰면 됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;변수 선언 ex)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;let name = “김개발”;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;변수 값 수정&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Name = “김코딩”;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; List item&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(주의할 점!) 변수 값 수정 시에는 let을 붙일 필요가 없다 why? 이미 선언된 변수명이기 때문에&lt;/p&gt;
&lt;p&gt;변수명만 선언하고 변수값은 나중에 줘도 됨!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;let man ;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;man = “남”;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;2-함수function&quot;&gt;&lt;a href=&quot;#2-%ED%95%A8%EC%88%98function&quot; aria-label=&quot;2 함수function permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 함수(function)&lt;/h2&gt;
&lt;ul&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 텍스트 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://blogfiles.pstatic.net/MjAxOTEwMDRfMjQg/MDAxNTcwMTk5MjY0OTQ0.-aIwwtQ2LF8WdknKCnADHT8DE94qZDiXp1V-bNdChLsg.-n75Xf-fl31jUw1FPvf_3YIdKIAys3xRC4Nn6jK63pcg.PNG.civicofjuve/image.png?type=w1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blogfiles.pstatic.net/MjAxOTEwMDRfMTk0/MDAxNTcwMTk5MjY5OTE3.XvtmLWFKhgRfsBwixP71SPirBqMvXIX4HmjoPR3m3Jog.aDKIvV46VDz6wi_TSEww4Mgl9qQN2iyDPQhR5I6Inpwg.PNG.civicofjuve/image.png?type=w1&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;function 키워드로 시작하여&lt;/li&gt;
&lt;li&gt;함수 이름을 지어주고&lt;/li&gt;
&lt;li&gt;함수를 알리는 괄호((): parentheses)를 열고 닫고&lt;/li&gt;
&lt;li&gt;함수의 시작을 알리는 중괄호({: curly bracket)을 열어줍니다.&lt;/li&gt;
&lt;li&gt;실행할 코드를 작성합니다. 함수의 body라고 부르기도 합니다. 이 부분에 들여쓰기가 되어있습니다. 함수 내부에 있는 코드라는 것을 알기 좋게 하려고 들여쓰기 하였습니다.&lt;/li&gt;
&lt;li&gt;return(반환) 할 것이 있다면 작성합니다.&lt;/li&gt;
&lt;li&gt;중괄호(}: curly bracket)로 닫아줍니다.&lt;/li&gt;
&lt;li&gt;함수 호출(실제 js에서 실행되는 것)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;새로운-함수-정의법---arrow-function&quot;&gt;&lt;a href=&quot;#%EC%83%88%EB%A1%9C%EC%9A%B4-%ED%95%A8%EC%88%98-%EC%A0%95%EC%9D%98%EB%B2%95---arrow-function&quot; aria-label=&quot;새로운 함수 정의법   arrow function permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;새로운 함수 정의법 - Arrow Function&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;ES6에서 새로 생긴 방법&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;const getName = (name) =&gt; {}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Const getName(함수명) = (name)인자 – 인자가 하나면 ( ) 생략가능 나머지는 안됨 =&gt; {}(로직) – return만 있는 경우 {return} 모두 생략 가능&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;getName(); – 호출방식은 기존과 동일하다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;*구버전 vs ES6 함수 선언 비교
| 구버전 | ES6 |
|—|— |
| let getEmail = function(username){return &lt;code class=&quot;language-text&quot;&gt;${username}@gmail.com&lt;/code&gt;; | const getEmail = username =&gt; &lt;code class=&quot;language-text&quot;&gt;${username}@gmail.com&lt;/code&gt;; |&lt;/p&gt;
&lt;h3 id=&quot;함수의-인자argument-대하여&quot;&gt;&lt;a href=&quot;#%ED%95%A8%EC%88%98%EC%9D%98-%EC%9D%B8%EC%9E%90argument-%EB%8C%80%ED%95%98%EC%97%AC&quot; aria-label=&quot;함수의 인자argument 대하여 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;함수의 인자(argument) 대하여&lt;/h3&gt;
&lt;p&gt;어떤 함수를 호출했을 때 전달받는 Value&lt;/p&gt;
&lt;p&gt;function multiply(arg1, arg2){ - multiply라는 함수는 인자를 2개 받는다.&lt;/p&gt;
&lt;p&gt;var myNumber = arg1 * arg2; - 받은 인자 2개를 사용하였다.&lt;/p&gt;
&lt;p&gt;if (myNumber &gt; 100) { 받은 인자 2개를 사용한 것에 조건문 추가&lt;/p&gt;
&lt;p&gt;return “크다!”; - 출력되는 결과&lt;/p&gt;
&lt;p&gt;} else{&lt;/p&gt;
&lt;p&gt;return “작다!”; - 출력되는 결과 – 함수의 실행결과를 출력해주는 함수 안해주면&lt;/p&gt;
&lt;p&gt;undefined가 출력이 된다.&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;h2 id=&quot;3-수학식-표현-방법&quot;&gt;&lt;a href=&quot;#3-%EC%88%98%ED%95%99%EC%8B%9D-%ED%91%9C%ED%98%84-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;3 수학식 표현 방법 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 수학식 표현 방법&lt;/h2&gt;
&lt;p&gt;★ Num++ =&gt; num = num + 1 – 계산을 해서 그 결과를 리턴 까지 하는 명령어&lt;/p&gt;
&lt;p&gt;★ Num— =&gt; num = num - 1&lt;/p&gt;
&lt;p&gt;※ 중요한 코딩 오류 중 하나 num++의 js 성질&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let num = 1;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let newNum = num++;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;newNum은 num의 1이 할당되고 num++이게 실행되서 num은 2가 됨&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;newNum에도 2가 할당되고 싶으면&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let newNum = ++num;&lt;/code&gt; - ++을 앞에다가 써야 됨&lt;/p&gt;
&lt;h2 id=&quot;4-데이터-타입&quot;&gt;&lt;a href=&quot;#4-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85&quot; aria-label=&quot;4 데이터 타입 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 데이터 타입&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Undefined - 정의 되지 않는 변수&lt;/li&gt;
&lt;li&gt;null - 없는 값&lt;/li&gt;
&lt;li&gt;boolean - True/False | 조건문에서 조건에 대한 결과 값으로 많이 쓰이는 타입&lt;/li&gt;
&lt;li&gt;숫자 - number&lt;/li&gt;
&lt;li&gt;문자열 - string으로 ” ” 나 ’ ’ 혹은 &lt;code class=&quot;language-text&quot;&gt;&lt;/code&gt; 둘러 쌓인 값&lt;/li&gt;
&lt;li&gt;객체 - function을 제외한 모든 객체&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item></channel></rss>