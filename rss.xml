<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[CTS junior Web developer]]></title><description><![CDATA[Web developer Learning.]]></description><link>https://ctsictai.github.io/</link><generator>GatsbyJS</generator><lastBuildDate>Sun, 20 Oct 2019 05:21:14 GMT</lastBuildDate><item><title><![CDATA[Python Apprenticeship Study Part.4]]></title><description><![CDATA[if문 part2/for문/iterator]]></description><link>https://ctsictai.github.io//posts/python-part4/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/python-part4/</guid><pubDate>Sun, 20 Oct 2019 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;if문-조건&quot;&gt;&lt;a href=&quot;#if%EB%AC%B8-%EC%A1%B0%EA%B1%B4&quot; aria-label=&quot;if문 조건 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;If문 조건&lt;/h1&gt;
&lt;p&gt;if문에 정수, bool값, 문자열, 실수 다 들어감&lt;/p&gt;
&lt;h2 id=&quot;조건문에서-false로-취급되는-것들&quot;&gt;&lt;a href=&quot;#%EC%A1%B0%EA%B1%B4%EB%AC%B8%EC%97%90%EC%84%9C-false%EB%A1%9C-%EC%B7%A8%EA%B8%89%EB%90%98%EB%8A%94-%EA%B2%83%EB%93%A4&quot; aria-label=&quot;조건문에서 false로 취급되는 것들 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;조건문에서 False로 취급되는 것들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;li&gt;False&lt;/li&gt;
&lt;li&gt;0인 숫자들 : 0, 0.0, 0j&lt;/li&gt;
&lt;li&gt;비어 있는 문자열, 리스트, 튜플. 딕셔너리, 세트 : &quot;&quot;, [], (), {}, set()&lt;/li&gt;
&lt;li&gt;클래스 인스턴스의 &lt;code class=&quot;language-text&quot;&gt;__bool__()&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;__len__()&lt;/code&gt;메서드가 0또는 False를 반환할 때&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위에서 나열한 것들을 제외한 모든 요소들은 True로 취급한다.&lt;/p&gt;
&lt;h2 id=&quot;조건식을-여러개-지정하기&quot;&gt;&lt;a href=&quot;#%EC%A1%B0%EA%B1%B4%EC%8B%9D%EC%9D%84-%EC%97%AC%EB%9F%AC%EA%B0%9C-%EC%A7%80%EC%A0%95%ED%95%98%EA%B8%B0&quot; aria-label=&quot;조건식을 여러개 지정하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;조건식을 여러개 지정하기&lt;/h2&gt;
&lt;p&gt;조건식이 여러 개일 때는 논리 연산자(==, &amp;#x3C;, &gt;, &amp;#x3C; &amp;#x3C;, ….)를 활용한다는 점도 기억하자.&lt;/p&gt;
&lt;p&gt;조건식에 조건을 여러 개 붙이려면 조건에 따라 and나 or를 붙인다.&lt;/p&gt;
&lt;h1 id=&quot;nest-if문&quot;&gt;&lt;a href=&quot;#nest-if%EB%AC%B8&quot; aria-label=&quot;nest if문 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Nest If문&lt;/h1&gt;
&lt;p&gt;파이썬의 특징인 indentation으로 구분 되는 if문으로써 if문 안에 if문이 실행되는 이중 if문이다.&lt;/p&gt;
&lt;p&gt;간격이 더 들어 갈수록 중첩이 더 된 것이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nest if문에서 root에 있는 if문의 return이 최종 def의 return값이 된다.&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;for문&quot;&gt;&lt;a href=&quot;#for%EB%AC%B8&quot; aria-label=&quot;for문 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;for문&lt;/h1&gt;
&lt;p&gt;List의 요소를 한번에 한개씩 가지고 for 구문 안에 있는 코드를 실행하게 됩니다.&lt;/p&gt;
&lt;p&gt;for element in list:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; do_something_with_element&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For 문은 list 뿐만이 아니라 tuple, set 등 다른 자료구조와도 사용할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;range함수와-함께-사용하는-for문&quot;&gt;&lt;a href=&quot;#range%ED%95%A8%EC%88%98%EC%99%80-%ED%95%A8%EA%BB%98-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-for%EB%AC%B8&quot; aria-label=&quot;range함수와 함께 사용하는 for문 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;range함수와 함께 사용하는 for문&lt;/h2&gt;
&lt;p&gt;for 변수 in range(횟수):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; 반복할 코드&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;시작하는-숫자와-끝나는-숫자-지정하기&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%EC%88%AB%EC%9E%90%EC%99%80-%EB%81%9D%EB%82%98%EB%8A%94-%EC%88%AB%EC%9E%90-%EC%A7%80%EC%A0%95%ED%95%98%EA%B8%B0&quot; aria-label=&quot;시작하는 숫자와 끝나는 숫자 지정하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시작하는 숫자와 끝나는 숫자 지정하기&lt;/h3&gt;
&lt;p&gt;range에 횟수만 지정하면 숫자가 0부터 시작하지만, 다음과 같이 시작하는 숫자와 끝나는 숫자를 지정해서 반복할 수도 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for 변수 in range(시작, 끝):&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;증가폭-사용하기&quot;&gt;&lt;a href=&quot;#%EC%A6%9D%EA%B0%80%ED%8F%AD-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;증가폭 사용하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;증가폭 사용하기&lt;/h3&gt;
&lt;p&gt;range는 증가폭을 지정해서 해당 값만큼 숫자를 증가시킬 수 있죠? 이번에는 0부터 9까지의 숫자 중에서 짝수만 출력해보겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for 변수 in range(시작, 끝, 증가폭):&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;숫자를-감소시키기&quot;&gt;&lt;a href=&quot;#%EC%88%AB%EC%9E%90%EB%A5%BC-%EA%B0%90%EC%86%8C%EC%8B%9C%ED%82%A4%EA%B8%B0&quot; aria-label=&quot;숫자를 감소시키기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;숫자를 감소시키기&lt;/h3&gt;
&lt;p&gt;for와 range는 숫자가 증가하면서 반복했습니다. 그럼 숫자를 감소시킬 수는 없을까요?&lt;/p&gt;
&lt;p&gt;for i in range(10, 0): # range(10, 0)은 동작하지 않음&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;print(&amp;#39;Hello, world!&amp;#39;, i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;range(10, 0)과 같이 시작하는 숫자를 큰 숫자로 지정하고 끝나는 숫자를 작은 숫자로 지정하면 숫자가 감소할 것 같은데, 실행을 해보면 아무것도 출력되지 않습니다. 왜냐하면 range는 숫자가 증가하는 기본 값이 양수 1이기 때문입니다.&lt;/p&gt;
&lt;p&gt;증가폭을 음수로 지정해서 반복해봅니다.
증가폭을 음수로 지정하는 방법 말고도 reversed를 사용하면 숫자의 순서를 반대로 뒤집을 수 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;입력한-횟수대로-반복하기&quot;&gt;&lt;a href=&quot;#%EC%9E%85%EB%A0%A5%ED%95%9C-%ED%9A%9F%EC%88%98%EB%8C%80%EB%A1%9C-%EB%B0%98%EB%B3%B5%ED%95%98%EA%B8%B0&quot; aria-label=&quot;입력한 횟수대로 반복하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;입력한 횟수대로 반복하기&lt;/h3&gt;
&lt;p&gt;이번에는 입력한 횟수대로 반복을 해보겠습니다. 다음 내용을 IDLE의 소스 코드 편집 창에 입력하세요.&lt;/p&gt;
&lt;p&gt;for&lt;em&gt;range&lt;/em&gt;input.py&lt;/p&gt;
&lt;p&gt;count = int(input(‘반복할 횟수를 입력하세요: ‘))&lt;/p&gt;
&lt;p&gt;for i in range(count):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; print(&amp;#39;Hello, world!&amp;#39;, i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;소스 코드를 실행하면 ‘반복할 횟수를 입력하세요: ‘가 출력됩니다. 여기서 3을 입력하고 엔터 키를 누르세요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;실행 결과&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;반복할 횟수를 입력하세요: 3 (입력)&lt;br&gt;
Hello, world! 0&lt;br&gt;
Hello, world! 1&lt;br&gt;
Hello, world! 2&lt;br&gt;
3을 입력했으므로 ‘Hello, world!’가 3번 출력됩니다&lt;/p&gt;
&lt;h3 id=&quot;시퀀스-이용한-for문&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%ED%80%80%EC%8A%A4-%EC%9D%B4%EC%9A%A9%ED%95%9C-for%EB%AC%B8&quot; aria-label=&quot;시퀀스 이용한 for문 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시퀀스 이용한 for문&lt;/h3&gt;
&lt;p&gt;먼저 input으로 입력 값을 받아서 count 변수에 저장합니다(이때 반드시 int를 사용하여 input에서 나온 문자열을 정수로 변환해줍니다).&lt;br&gt;
그리고 반복문에서는 for i in range(count):와 같이 range에 count를 넣어주면 입력받은 숫자만큼 반복됩니다.&lt;/p&gt;
&lt;p&gt;다음과 같이 for에 range 대신 리스트를 넣으면 리스트의 요소를 꺼내면서 반복합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a = [10, 20, 30, 40, 50]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;for i in a:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  print(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;10
20
30
40
50&lt;br&gt;
물론 튜플도 마찬가지로 튜플의 요소를 꺼내면서 반복합니다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;문자열도 시퀀스 객체라고 했죠?&lt;br&gt;
for에 문자열을 지정하면 문자를 하나씩 꺼내면서 반복합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;for letter in ‘Python’:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; print(letter, end=&amp;#39; &amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;P y t h o n&lt;/p&gt;
&lt;p&gt;문자열 ‘Python’의 문자가 하나씩 분리되어 출력되었습니다. 여기서는 print에 end=’ ‘을 지정했으므로 줄바꿈이 되지 않고, 각 문자가 공백으로 띄워져서 출력됩니다.&lt;/p&gt;
&lt;p&gt;그럼 문자열 ‘Python’을 뒤집어서 문자를 출력할 수는 없을까요? 이때는 앞에서 배운 reversed를 활용하면 됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;reversed(시퀀스객체)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;for letter in reversed(‘Python’):&lt;/p&gt;
&lt;p&gt;print(letter, end=’ ‘)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;n o h t y P&lt;/p&gt;
&lt;p&gt;문자열 ‘Python’에서 문자 n부터 P까지 출력되었습니다. reversed는 시퀀스 객체를 넣으면 시퀀스 객체를 뒤집어 줍니다(원본 객체 자체는 바뀌지 않으며 뒤집어서 꺼내줌).&lt;/p&gt;
&lt;h1 id=&quot;iterator--break-for--while-가능&quot;&gt;&lt;a href=&quot;#iterator--break-for--while-%EA%B0%80%EB%8A%A5&quot; aria-label=&quot;iterator  break for  while 가능 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Iterator -break (for / while 가능)&lt;/h1&gt;
&lt;p&gt;앞서 보았듯이 for 구문에서는 &lt;em&gt;리스트가 가지고 있는 요소의 수 만큼 for 구문에 속해있는 코드를 실행&lt;/em&gt;합니다.
이걸 &lt;strong&gt;iteration&lt;/strong&gt; 이라고 합니다.&lt;br&gt;
만일 리스트가 5개의 요소를 가지고 있으면 5 iterations 이라고 합니다.
즉 5번 반복한다는 뜻이죠.&lt;br&gt;
그래서 for loops를 한국어로 for 반복구문 이라고 하기도 합니다.&lt;/p&gt;
&lt;p&gt;그런데 가끔은 중간에 도중하차(?) 하고 싶을때가 있습니다. 굳이 끝까지 for 구문을 진행할 필요 없이 중간에서 멈추고 싶을때는 &lt;strong&gt;break&lt;/strong&gt; 문을 사용하면 됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;break - (for /while 가능)
For 구문에서 break 문이 실행되면 다음 iteration으로 넘어가지 않고 for 구문에서 빠져 나오게 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Continue - (for / while 가능)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;만일 break처럼 for 구문에서 완전히 빠져 나오고 싶지는 않지만 다음 요소, 즉 다음 interation으로 넘어가고 싶을때는 continue 문을 사용하면 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://snscrawler.files.wordpress.com/2017/06/131.png&quot; alt=&quot;break-continue&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Python Apprenticeship Study Part.3]]></title><description><![CDATA[Dictionary]]></description><link>https://ctsictai.github.io//posts/python-part3/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/python-part3/</guid><pubDate>Fri, 18 Oct 2019 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;딕셔너리-만들기&quot;&gt;&lt;a href=&quot;#%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;딕셔너리 만들기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;딕셔너리 만들기&lt;/h1&gt;
&lt;p&gt;딕셔너리는 { }(중괄호) 안에 키: 값 형식으로 저장하며 각 키와 값은 ,(콤마)로 구분해줍니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;딕셔너리 = {키1: 값1, 키2: 값2}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SyntaxError: invalid syntax: 1&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;{ }의 짝이 맞지 않을 때&lt;/li&gt;
&lt;li&gt;키:값 형식에 맞지 않을 때&lt;/li&gt;
&lt;li&gt;키 문자열의 ’ ’ 짝이 맞지 않을 때&lt;/li&gt;
&lt;li&gt;각 키:값을 구분할 때 ,를 넣지 않아서 발생하는 구문 에러입니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;딕셔너리는 키를 먼저 지정하고 :(콜론)을 붙여서 값을 표현합니다. 특히 키에는 값을 하나만 지정할 수 있으며 이런 특성을 따서 키-값 쌍(key-value pair)이라 부릅니다(키-값은 1:1 대응)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;키-이름이-중복되면&quot;&gt;&lt;a href=&quot;#%ED%82%A4-%EC%9D%B4%EB%A6%84%EC%9D%B4-%EC%A4%91%EB%B3%B5%EB%90%98%EB%A9%B4&quot; aria-label=&quot;키 이름이 중복되면 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;키 이름이 중복되면?&lt;/h1&gt;
&lt;p&gt;그럼 딕셔너리를 만들 때 키 이름이 중복되면 어떻게 될까요?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;lux = {&amp;#39;health&amp;#39;: 490, &amp;#39;health&amp;#39;: 800, &amp;#39;mana&amp;#39;: 334, &amp;#39;melee&amp;#39;: 550, &amp;#39;armor&amp;#39;: 18.72}&lt;/code&gt;&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;lux[&amp;#39;health&amp;#39;]&lt;/code&gt; - &lt;strong&gt;키가 중복되면 가장 뒤에 있는 값만 사용함&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;800&lt;/li&gt;
&lt;li&gt;lux - &lt;strong&gt;중복되는 키는 저장되지 않음&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;딕셔너리-키의-자료형&quot;&gt;&lt;a href=&quot;#%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC-%ED%82%A4%EC%9D%98-%EC%9E%90%EB%A3%8C%ED%98%95&quot; aria-label=&quot;딕셔너리 키의 자료형 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;딕셔너리 키의 자료형&lt;/h1&gt;
&lt;p&gt;딕셔너리의 키는 문자열뿐만 아니라 정수, 실수, 불도 사용할 수 있으며 자료형을 섞어서 사용해도 됩니다. 그리고 값에는 리스트, 딕셔너리 등을 포함하여 모든 자료형을 사용할 수 있습니다.&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;x = {100: &amp;#39;hundred&amp;#39;, False: 0, 3.5: [3.5, 3.5]}&lt;/code&gt;&lt;br&gt;
x =&gt;
&lt;code class=&quot;language-text&quot;&gt;{100: &amp;#39;hundred&amp;#39;, False: 0, 3.5: [3.5, 3.5]}&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;단, 키에는 리스트와 딕셔너리를 사용할 수 없습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;빈-딕셔너리-만들기&quot;&gt;&lt;a href=&quot;#%EB%B9%88-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;빈 딕셔너리 만들기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;빈 딕셔너리 만들기&lt;/h1&gt;
&lt;p&gt;빈 딕셔너리를 만들 때는 { }만 지정하거나 dict를 사용하면 됩니다. 보통은 { }를 주로 사용합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;딕셔너리 = {}&lt;/li&gt;
&lt;li&gt;딕셔너리 = dict()&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;dict로-딕셔너리-만들기&quot;&gt;&lt;a href=&quot;#dict%EB%A1%9C-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;dict로 딕셔너리 만들기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;dict로 딕셔너리 만들기&lt;/h1&gt;
&lt;p&gt;dict는 다음과 같이 키와 값을 연결하거나, 리스트, 튜플, 딕셔너리로 딕셔너리를 만들 때 사용합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;딕셔너리 = dict(키1=값1, 키2=값2)&lt;/li&gt;
&lt;li&gt;딕셔너리 = dict(zip([‘키1’, ‘키2’], [값1, 값2]))&lt;/li&gt;
&lt;li&gt;딕셔너리 = dict([(‘키1’, 값1), (‘키2’, 값2)])&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;딕셔너리 = dict({‘키1’: 값1, ‘키2’: 값2})&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;먼저 다음과 같이 dict에서 키=값 형식으로 딕셔너리를 만들 수 있습니다. 이때는 키에 ’ ‘(작은따옴표)나 ” “(큰따옴표)를 사용하지 않아야 합니다. 키는 딕셔너리를 만들고 나면 문자열로 바뀝니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;lux1 = dict(health=490, mana=334, melee=550, armor=18.72)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;키=값 형식으로 딕셔너리를 만듦&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;두 번째 방법은 dict에서 zip 함수를 이용하는 방법입니다. 다음과 같이 키가 들어있는 리스트와 값이 들어있는 리스트를 차례대로 zip에 넣은 뒤 다시 dict에 넣어주면 됩니다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;lux2 = dict(zip([‘health’, ‘mana’, ‘melee’, ‘armor’], [490, 334, 550, 18.72])) # zip 함수로&lt;/li&gt;
&lt;li&gt;lux2 # 키 리스트와 값 리스트를 묶음&lt;/li&gt;
&lt;li&gt;{‘health’: 490, ‘mana’: 334, ‘melee’: 550, ‘armor’: 18.72}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;물론 키와 값을 리스트가 아닌 튜플에 저장해서 zip에 넣어도 됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;세 번째 방법은 리스트 안에 (키, 값) 형식의 튜플을 나열하는 방법입니다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;lux3 = dict([(‘health’, 490), (‘mana’, 334), (‘melee’, 550), (‘armor’, 18.72)])&lt;/li&gt;
&lt;li&gt;lux3 # (키, 값) 형식의 튜플로 딕셔너리를 만듦&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;{‘health’: 490, ‘mana’: 334, ‘melee’: 550, ‘armor’: 18.72}&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;네 번째 방법은 dict 안에서 중괄호로 딕셔너리를 생성하는 방법입니다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;lux4 = dict({‘health’: 490, ‘mana’: 334, ‘melee’: 550, ‘armor’: 18.72}) # dict 안에서&lt;/li&gt;
&lt;li&gt;lux4 # 중괄호로 딕셔너리를 만듦
-{‘health’: 490, ‘mana’: 334, ‘melee’: 550, ‘armor’: 18.72}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이처럼 딕셔너리는 키를 통해서 값의 의미를 파악하기 쉽습니다. 특히 딕셔너리는 예제의 게임 캐릭터 능력치처럼 특정 주제에 대해 연관된 값들을 모아둘 때 주로 사용합니다.&lt;/p&gt;
&lt;h1 id=&quot;딕셔너리의-키에-접근하고-값-할당하기&quot;&gt;&lt;a href=&quot;#%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EC%9D%98-%ED%82%A4%EC%97%90-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B3%A0-%EA%B0%92-%ED%95%A0%EB%8B%B9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;딕셔너리의 키에 접근하고 값 할당하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;딕셔너리의 키에 접근하고 값 할당하기&lt;/h1&gt;
&lt;p&gt;딕셔너리의 키에 접근할 때는 딕셔너리 뒤에 &lt;a href=&quot;%EB%8C%80%EA%B4%84%ED%98%B8&quot;&gt; &lt;/a&gt;를 사용하며 [ ] 안에 키를 지정해주면 됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;딕셔너리[키]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;lux = {‘health’: 490, ‘mana’: 334, ‘melee’: 550, ‘armor’: 18.72}&lt;/li&gt;
&lt;li&gt;lux[‘health’]
490&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lux[‘armor’]
18.72&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;딕셔너리에 키를 지정하지 않으면?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;딕셔너리에 키를 지정하지 않은 상태는 해당 딕셔너리 전체를 뜻합니다. 따라서 다음과 같이 딕셔너리 lux를 출력하면 { }를 포함하여 딕셔너리 전체가 출력됩니다.&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;lux = {&amp;#39;health&amp;#39;: 490, &amp;#39;mana&amp;#39;: 334, &amp;#39;melee&amp;#39;: 550, &amp;#39;armor&amp;#39;: 18.72}&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;lux - 딕셔너리에 키를 지정하지 않으면 딕셔너리 전체를 뜻함&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;{&amp;#39;health&amp;#39;: 490, &amp;#39;mana&amp;#39;: 334, &amp;#39;melee&amp;#39;: 550, &amp;#39;armor&amp;#39;: 18.72}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;딕셔너리의-키에-값-할당하기&quot;&gt;&lt;a href=&quot;#%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EC%9D%98-%ED%82%A4%EC%97%90-%EA%B0%92-%ED%95%A0%EB%8B%B9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;딕셔너리의 키에 값 할당하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;딕셔너리의 키에 값 할당하기&lt;/h1&gt;
&lt;p&gt;이제 딕셔너리의 키에 값을 할당해보겠습니다. 딕셔너리는 [ ]로 키에 접근한 뒤 값을 할당합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;딕셔너리[키] = 값&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;lux = {&amp;#39;health&amp;#39;: 490, &amp;#39;mana&amp;#39;: 334, &amp;#39;melee&amp;#39;: 550, &amp;#39;armor&amp;#39;: 18.72}&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lux[‘health’] = 2037 # 키 ‘health’의 값을 2037로 변경&lt;/li&gt;
&lt;li&gt;lux[‘mana’] = 1184 # 키 ‘mana’의 값을 1184로 변경&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lux&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;{‘health’: 2037, ‘mana’: 1184, ‘melee’: 550, ‘armor’: 18.72}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;딕셔너리에서 키의 값을 출력할 때와 마찬가지로 [ ]에 키를 지정한 뒤 값을 할당하면 됩니다. 특히 딕셔너리는 없는 키에 값을 할당하면 해당 키가 추가되고 값이 할당됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lux[‘mana_regen’] = 3.28 # 키 ‘mana_regen’을 추가하고 값 3.28 할당&lt;/li&gt;
&lt;li&gt;lux
{‘health’: 2037, ‘mana’: 1184, ‘melee’: 550, ‘armor’: 18.72, ‘mana_regen’: 3.28}&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;딕셔너리에-키가-있는지-확인하기&quot;&gt;&lt;a href=&quot;#%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EC%97%90-%ED%82%A4%EA%B0%80-%EC%9E%88%EB%8A%94%EC%A7%80-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0&quot; aria-label=&quot;딕셔너리에 키가 있는지 확인하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;딕셔너리에 키가 있는지 확인하기&lt;/h1&gt;
&lt;p&gt;딕셔너리에서 키가 있는지 확인하고 싶다면 in 연산자를 사용하면 됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;키 in 딕셔너리&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;lux = {‘health’: 490, ‘mana’: 334, ‘melee’: 550, ‘armor’: 18.72}&lt;/li&gt;
&lt;li&gt;‘health’ in lux
True&lt;/li&gt;
&lt;li&gt;‘attack_speed’ in lux
False&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이처럼 딕셔너리에 특정 키가 있으면 True, 없으면 False가 나옵니다. 딕셔너리 lux에 키 ‘health’가 있으므로 True, ‘attack_speed’가 없으므로 False가 나왔습니다.&lt;/p&gt;
&lt;p&gt;반대로 in 앞에 not을 붙이면 특정 키가 없는지 확인합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;키 not in 딕셔너리&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;‘attack_speed’ not in lux
True&lt;/li&gt;
&lt;li&gt;‘health’ not in lux
False&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이렇게 not in은 특정 키가 없으면 True, 있으면 False가 나옵니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;해시&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;딕셔너리는 해시(Hash) 기법을 이용해서 데이터를 저장합니다. 보통 딕셔너리와 같은 키-값 형태의 자료형을 해시, 해시 맵, 해시테이블 등으로 부르기도 합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;딕셔너리의-키-개수-구하기&quot;&gt;&lt;a href=&quot;#%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EC%9D%98-%ED%82%A4-%EA%B0%9C%EC%88%98-%EA%B5%AC%ED%95%98%EA%B8%B0&quot; aria-label=&quot;딕셔너리의 키 개수 구하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;딕셔너리의 키 개수 구하기&lt;/h1&gt;
&lt;p&gt;딕셔너리를 사용하다 보면 딕셔너리의 키 개수(길이)를 구할 필요가 있습니다. 딕셔너리의 키와 값을 직접 타이핑할 때는 키의 개수를 알기가 쉽습니다. 하지만 실무에서는 함수 등을 사용해서 딕셔너리를 생성하거나 키를 추가하기 때문에 키의 개수가 눈에 보이지 않습니다. 따라서 다음과 같이 키의 개수는 &lt;strong&gt;len&lt;/strong&gt; 함수를 사용하여 구합니다(키와 값은 1:1 관계이므로 키의 개수는 곧 값의 개수입니다).&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;len(딕셔너리)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;lux = {‘health’: 490, ‘mana’: 334, ‘melee’: 550, ‘armor’: 18.72}&lt;/li&gt;
&lt;li&gt;len(lux)
4&lt;/li&gt;
&lt;li&gt;len({‘health’: 490, ‘mana’: 334, ‘melee’: 550, ‘armor’: 18.72})
4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;len(lux)와 같이 len에 딕셔너리 변수를 넣어서 키의 개수를 구해도 되고, len에 딕셔너리를 그대로 넣어도 됩니다.&lt;/p&gt;
&lt;p&gt;지금까지 딕셔너리의 사용 방법에 대해 알아보았습니다. 딕셔너리를 생성할 때는 { }(중괄호)를 사용하고, 키와 값을 1:1 관계로 저장한다는 점이 중요합니다. 특히 딕셔너리는 특정 주제에 대해 연관된 값을 저장할 때 사용한다는 점이다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Python Apprenticeship Study Part.2]]></title><description><![CDATA[sequence obj -list/set/dictionary/tuple]]></description><link>https://ctsictai.github.io//posts/python-part2/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/python-part2/</guid><pubDate>Thu, 17 Oct 2019 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;list&quot;&gt;&lt;a href=&quot;#list&quot; aria-label=&quot;list permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;LIST&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;다양한 데이터 타이들을 순서에 따라 저장할 수 잇는 데이터 타입이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;대괄호[]안에 데이터들을 넣어 주면 된다.&lt;/li&gt;
&lt;li&gt;[]만 변수로 선언하면 빈 list만 생성된다.&lt;/li&gt;
&lt;li&gt;★ 리스트 타입의 개수를 구하기 위해서는 len함수를 이용하면 된다.&lt;/li&gt;
&lt;li&gt;리스트 인덱스의 시작이 1이 아니라 0이다 -&gt; [0] / [1]&lt;/li&gt;
&lt;li&gt;리스트 역 인덱스의 시작은 -1이다 -&gt; [-1] / [-2]&lt;/li&gt;
&lt;li&gt;문자열 type로 적용 가능 + 숫자, boolean 값 등 모든 type의 값을 저장할 수 있으며 서로 다른 type의 값들을 저장하는것도 가능합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;adding-and-changing-elements-to-list&quot;&gt;&lt;a href=&quot;#adding-and-changing-elements-to-list&quot; aria-label=&quot;adding and changing elements to list permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adding and changing elements to list&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;append Added Element!!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;순차적으로 저장함 마지막 인덱스에 요소값 저장&lt;/li&gt;
&lt;li&gt;List name.append(element)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;”+”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;추가 요소가 1개 이상일 때&lt;/li&gt;
&lt;li&gt;List&lt;em&gt;name = list&lt;/em&gt;name + [element, element2]&lt;/li&gt;
&lt;li&gt;new&lt;em&gt;list = list&lt;/em&gt;name +list_name2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;insert&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;원하는 위치에 추가하는 메서드&lt;/li&gt;
&lt;li&gt;List_name.insert(indexing number, element)&lt;/li&gt;
&lt;li&gt;Indexing number란 저장할 원하는 위치를 지정해야 한다는 것!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;element updating&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;List_name[idx] = element&lt;/li&gt;
&lt;li&gt;Idx = 바꿀 위치 인덱싱&lt;/li&gt;
&lt;li&gt;Element = 바꿀 요소값&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;튜플tuple&quot;&gt;&lt;a href=&quot;#%ED%8A%9C%ED%94%8Ctuple&quot; aria-label=&quot;튜플tuple permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;튜플(tuple)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;순서에 따라 저장하는데이터 타입&lt;/li&gt;
&lt;li&gt;괄호 ()안에 데이터들을 넣어 주면 된다.&lt;/li&gt;
&lt;li&gt;리스트와 튜플의 차이점&lt;/li&gt;
&lt;li&gt;리스트 타입의 내용의 변경이 가능(mutable)&lt;/li&gt;
&lt;li&gt;튜플의 경우 내용의 변경이 불가(immutable)&lt;/li&gt;
&lt;li&gt;속도 면에서 튜플이 좀 더 빠르다&lt;/li&gt;
&lt;li&gt;괄호를 사용하지 않아도 튜플을 만들 수 있습니다.&lt;/li&gt;
&lt;li&gt;인덱싱은 리스트와 같다&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;언제 tuple 사용함?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;일반적으로 2개에서 5개 사이의 요소들을 저장할 때, 특정 데이터를 즉각적으로 표현하고 싶을 때 - 2차원 수평면에 위치를 가리키는 벡터를 표현할 때 좋음&lt;/p&gt;
&lt;h1 id=&quot;dictionary&quot;&gt;&lt;a href=&quot;#dictionary&quot; aria-label=&quot;dictionary permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dictionary&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Dict type = {} – 빈 딕셔너리 선언&lt;/li&gt;
&lt;li&gt;Dict type = {‘aa’ : 2} =&gt; { key : value } 로 요소 추가&lt;/li&gt;
&lt;li&gt;순서가 없는 key와 value 쌍으로 된 집합이다(순서가 필요 없음 unique한 key로 구별이 가능함)&lt;/li&gt;
&lt;li&gt;Key와 value {}로 묶어주면 된다.&lt;/li&gt;
&lt;li&gt;Update(키=값) 이름 그대로 딕셔너리에서 키의 값을 수정 및 추가&lt;/li&gt;
&lt;li&gt;Pop(키) or pop(키, 기본값)은 특정 키-값 쌍을 삭제한 뒤 값을 반환&lt;/li&gt;
&lt;li&gt;Key가 딕셔너리 안에 있는지 판단하는 경우 in 연산자 활용&lt;/li&gt;
&lt;li&gt;Dict은 안에 리스트 생성 가능/ key ; value 값 수정 및 추가 및 삭제 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;create-element-in-dictionary--updating-element&quot;&gt;&lt;a href=&quot;#create-element-in-dictionary--updating-element&quot; aria-label=&quot;create element in dictionary  updating element permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Create element in dictionary &amp;#x26; updating element&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;dictionary_name[new_key] = new_value&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;read-element-in-dictionary&quot;&gt;&lt;a href=&quot;#read-element-in-dictionary&quot; aria-label=&quot;read element in dictionary permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Read element in Dictionary&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;dict_name[‘key_name’] = value 반환!&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Key는 string이나 number가능 but 중복은 안됨 unique해야함!!&lt;/li&gt;
&lt;li&gt;만약에 이미 있는 key값으로 요소를 집어 넣으면 updating이 된다.!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;dict1 = { 1 : &amp;quot;one&amp;quot;, 1 : &amp;quot;two&amp;quot; }&lt;/code&gt;&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;print(dict1)&lt;/code&gt;&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;{ 1: &amp;quot;two&amp;quot; }&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;delete-element-in-dictionary&quot;&gt;&lt;a href=&quot;#delete-element-in-dictionary&quot; aria-label=&quot;delete element in dictionary permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Delete element in dictionary&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;del dict_name[&amp;quot;key_name&amp;quot;]&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;set&quot;&gt;&lt;a href=&quot;#set&quot; aria-label=&quot;set permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SET&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;중복을 허용하지 않는 순서가 없는 자료형이다. (2가지 유니크한 특징이 있다)&lt;/li&gt;
&lt;li&gt;순서가 없다는 것은 인덱싱을 통해 value를 뽑아 낼 수 없다는 얘기&lt;/li&gt;
&lt;li&gt;중복이 허용이 안된다는 것은 요소들이 모두 unique한 값을 가진 다는 얘기&lt;/li&gt;
&lt;li&gt;중복이 안된다? 활용 가능성이 매우 높지 – 중복 제거 필터로써&lt;/li&gt;
&lt;li&gt;Set 자료형에 인덱싱으로 값에 접근하려면 set를 list나 tuple로 변환 후 인덱싱해야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;set-생성&quot;&gt;&lt;a href=&quot;#set-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;set 생성 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Set 생성&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;S =set()&lt;/code&gt; – 빈 set 자료형 생성&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Sw = set(‘hello’)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;h e l o 자료 요소를 가진 set 자료형 생성 (l은 중복값이 있어서 하나만 요소값으로)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;set의-가장-많은-활용-법--교집합-합집합-차집합&quot;&gt;&lt;a href=&quot;#set%EC%9D%98-%EA%B0%80%EC%9E%A5-%EB%A7%8E%EC%9D%80-%ED%99%9C%EC%9A%A9-%EB%B2%95--%EA%B5%90%EC%A7%91%ED%95%A9-%ED%95%A9%EC%A7%91%ED%95%A9-%EC%B0%A8%EC%A7%91%ED%95%A9&quot; aria-label=&quot;set의 가장 많은 활용 법  교집합 합집합 차집합 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;set()의 가장 많은 활용 법 – 교집합, 합집합, 차집합&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;교집합 ( &amp;#x26; or intersection())&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Set1 = set(1,2,3,4,5)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Set2 = set(3,4,5,6,7)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Set1 &amp;#x26; set2 =&gt; {3, 4, 5}&lt;br&gt;
Set1.intersection(set2) =&gt;{3,4,5}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;합집합 ( | or union)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Set1 = set(1,2,3,4,5)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Set2 = set(3,4,5,6,7)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Set1 | set2 =&gt; {1,2,3,4,5,6,7}&lt;br&gt;
Set1.union(set2) = &gt; {1,2,3,4,5,6,7}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;차집합 ( - or difference )  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Set1 = set(1,2,3,4,5)&lt;/code&gt; - &lt;code class=&quot;language-text&quot;&gt;Set2 = set(3,4,5,6,7)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;차집합은 순서가 매우 중요!!!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt;Set1 - set2 =&amp;gt; {1,2}
&amp;gt;Set1.difference(set2) = &amp;gt; {1,2}
&amp;gt;Set2 – set1 =&amp;gt; {6, 7}
&amp;gt;Set2.difference(set1) =&amp;gt; {6,7}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;set에-제공되는-기본-메서드&quot;&gt;&lt;a href=&quot;#set%EC%97%90-%EC%A0%9C%EA%B3%B5%EB%90%98%EB%8A%94-%EA%B8%B0%EB%B3%B8-%EB%A9%94%EC%84%9C%EB%93%9C&quot; aria-label=&quot;set에 제공되는 기본 메서드 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Set에 제공되는 기본 메서드&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;add (값 1개 추가)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;s1 = set([1, 2, 3])&lt;br&gt;
s1.add(4)&lt;br&gt;
s1 {1, 2, 3, 4}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;update ( 값 여러 개 추가)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;s1 = set([1, 2, 3])&lt;br&gt;
s1.update([4, 5, 6])&lt;br&gt;
s1
{1, 2, 3, 4, 5, 6}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;remove (특정값 제거)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;s1 = set([1, 2, 3])&lt;br&gt;
s1.remove(2)&lt;br&gt;
s1
{1, 3}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Python Apprenticeship Study Part.1]]></title><description><![CDATA[변수 선언/연산자/들여쓰기/if 조건문]]></description><link>https://ctsictai.github.io//posts/python-part1/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/python-part1/</guid><pubDate>Wed, 16 Oct 2019 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;변수-할당&quot;&gt;&lt;a href=&quot;#%EB%B3%80%EC%88%98-%ED%95%A0%EB%8B%B9&quot; aria-label=&quot;변수 할당 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;변수 할당&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;name = “wsd”&lt;/li&gt;
&lt;li&gt;변수 이름 = 변수 값&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;javascript와 달리 var / let /const를 붙일 필요가 없다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;주요-연산자&quot;&gt;&lt;a href=&quot;#%EC%A3%BC%EC%9A%94-%EC%97%B0%EC%82%B0%EC%9E%90&quot; aria-label=&quot;주요 연산자 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;주요 연산자&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;”+”&lt;/strong&gt; 덧셈 &lt;em&gt;a + b&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;”-”&lt;/strong&gt; 뺄셈 &lt;em&gt;a - b&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;”*”&lt;/strong&gt; 곱셈 &lt;em&gt;a * b&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;”/”&lt;/strong&gt; 나눗셈 &lt;em&gt;a / b&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;”//”&lt;/strong&gt; 버림 나눗셈 &lt;em&gt;a // b&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;”%”&lt;/strong&gt; 나머지 &lt;em&gt;a % b&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;”**” 거듭제곱 _a ** b_&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;”+=”&lt;/strong&gt; 덧셈 후 할당 &lt;em&gt;a += b&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;”-=”&lt;/strong&gt; 뺄셈 후 할당 &lt;em&gt;a -= b&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;”*=”&lt;/strong&gt; 곱셈 후 할당 &lt;em&gt;a *= b&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/=&lt;/strong&gt; 나눗셈 후 할당 &lt;em&gt;a /= b&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;사칙연산-규칙&quot;&gt;&lt;a href=&quot;#%EC%82%AC%EC%B9%99%EC%97%B0%EC%82%B0-%EA%B7%9C%EC%B9%99&quot; aria-label=&quot;사칙연산 규칙 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;사칙연산 규칙&lt;/h2&gt;
&lt;p&gt;일반적인 수학적 사칙연산의 규칙을 따른다.&lt;/p&gt;
&lt;h1 id=&quot;literal-string-interpolation&quot;&gt;&lt;a href=&quot;#literal-string-interpolation&quot; aria-label=&quot;literal string interpolation permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Literal string interpolation&lt;/h1&gt;
&lt;p&gt;사용하려면 다음의 문법을 지켜야 합니다&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;먼저 따옴표 앞에 &lt;strong&gt;“f”&lt;/strong&gt; 를 붙여야 합니다. f를 붙이면 파이썬은 f 다음에 오는 strin g 값을 literal string interpolation 이라고 인지하고, string 안에있는 변수들을 실제 값으로 치환 합니다.&lt;/li&gt;
&lt;li&gt;치환 하고 싶은 변수 (혹은 변수가 아니어도 됩니다. 예를 들어 함수 호출이 될 수도 있습니다) 를 &lt;strong&gt;중괄호&lt;/strong&gt;{}를 사용해서 표시합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;print( f&quot;&quot;&quot;wecol {date} at {inventor} live in {location}&quot;&quot;&quot;)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;print(f&quot;&quot;&quot;{} &quot;&quot;&quot;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;indention들여-쓰기&quot;&gt;&lt;a href=&quot;#indention%EB%93%A4%EC%97%AC-%EC%93%B0%EA%B8%B0&quot; aria-label=&quot;indention들여 쓰기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;indention(들여 쓰기)&lt;/h1&gt;
&lt;p&gt;하지만 파이썬에서는 들여쓰기는 요구사항 입니다. 들여쓰기를 통해 코드의 종속성을 나타냅니다.
예를 들어. JavaScript나 자바등의 다른 언어들은 함수에 종속된 코드를 나타내기 위해서 중괄호 ({ }) 를 사용합니다. 하지만 파이썬에서는 중괄호를 사용하지 않고 들여쓰기를 사용해서 종속된 코드를 나타냅니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pythonstudy.xyz/images/basics/identation.png&quot; alt=&quot;들여쓰기&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;if-statement-조건문&quot;&gt;&lt;a href=&quot;#if-statement-%EC%A1%B0%EA%B1%B4%EB%AC%B8&quot; aria-label=&quot;if statement 조건문 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;If statement (조건문)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt; if name == “차은우”:&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt; print(f”Hello {name}“) &lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;==&lt;/strong&gt; 는 같다 Equal의 뜻이다.&lt;/p&gt;
&lt;h2 id=&quot;주의&quot;&gt;&lt;a href=&quot;#%EC%A3%BC%EC%9D%98&quot; aria-label=&quot;주의 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;주의&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;if 구문과 연결되어 있는 코드들은 if 구문 보다 더 안쪽으로 간격이 들어와 있어야 합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;홀짝-구문하는-if문&quot;&gt;&lt;a href=&quot;#%ED%99%80%EC%A7%9D-%EA%B5%AC%EB%AC%B8%ED%95%98%EB%8A%94-if%EB%AC%B8&quot; aria-label=&quot;홀짝 구문하는 if문 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;홀짝 구문하는 if문&lt;/h3&gt;
&lt;p&gt;나머지 연산자 %을 사용하면 된다.&lt;/p&gt;
&lt;p&gt;&lt;CODE&gt; if a % 2 == 0:&lt;/code&gt; 이면 짝수
&lt;CODE&gt; if a % 2 != 0:&lt;/code&gt; 이면 홀수&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;!=&lt;/strong&gt; 는 같지 않다 not equal의 뜻이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&gt;&lt;/strong&gt; 는 더 크다 greater than의 뜻이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;#x3C;&lt;/strong&gt; 는 더 작다 less than의 뜻이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&gt;=&lt;/strong&gt;는 같거나 크다 greater than or equal to&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;#x3C;=&lt;/strong&gt;는 같거나 작다 less than or equal to&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;elif-and-else&quot;&gt;&lt;a href=&quot;#elif-and-else&quot; aria-label=&quot;elif and else permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Elif and Else&lt;/h1&gt;
&lt;h2 id=&quot;elif&quot;&gt;&lt;a href=&quot;#elif&quot; aria-label=&quot;elif permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;elif&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;elif 는 if 구문을 보조 하는 역할 입니다. elif 는 else if 를 줄인뜻입니다.&lt;/li&gt;
&lt;li&gt;elif 는 if 구문과 연결되어 사용되며 if 구문이 먼저 선행 되고 그 다음에 위치하게 됩니다.&lt;/li&gt;
&lt;li&gt;elif 는 만일 if 구문이 False 이면 실행되며 if 구문이 False 일 경우 다른 condition을 테스트 한 후 실행됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;if car == “현대”:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;print(“현대는 국산차”)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;elif car == “기아”:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;print(“기아는 국산차”)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;elif는 if문이 실행 된 뒤 다음을 진행 하는 코드이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;else&quot;&gt;&lt;a href=&quot;#else&quot; aria-label=&quot;else permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;else&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;else는 if 구문 (그리고 elif 구문이 있다면 elif 구문) 의 condition이 False인 경우 default 로 실행됩니다.&lt;/li&gt;
&lt;li&gt;else 는 if 구문과 elif 구문이 먼저 선행되고 마지막에 위치하게 되며 if / elif 구문의 코드가 실행 되지 않으면 마지막으로 default로 실행됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/fqJOBUS.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[09.30~10.04 한 주 정리 part.6]]></title><description><![CDATA[HTML에서의 JS / DOM / 이벤트]]></description><link>https://ctsictai.github.io//posts/javascript-part6/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/javascript-part6/</guid><pubDate>Mon, 14 Oct 2019 23:55:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;html에서의-js-로드하기&quot;&gt;&lt;a href=&quot;#html%EC%97%90%EC%84%9C%EC%9D%98-js-%EB%A1%9C%EB%93%9C%ED%95%98%EA%B8%B0&quot; aria-label=&quot;html에서의 js 로드하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HTML에서의 JS 로드하기&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;inline 방식 – html 태그에 직접 javascript를 기술하는 방식이다. 장점은 태그에 관련된 스크립트가 분명하게 드러난다. 하지만 정보와 제어가 섞여 있기 때문에 정보로서의 가치가 떨어짐.&lt;/li&gt;
&lt;li&gt;Script 방식 - script 태그를 만들어서 여기에 자바스크립트 코드를 삽입하는 방식. 장점은 html태그와 js 코드를 분리할 수 있다.&lt;/li&gt;
&lt;li&gt;외부 파일로 분리
js를 별도의 파일로 분리할 수도 있다. 장점은 보다 엄격하게 정보와 제어를 분리할 수 있다. 하나의 js 파일을 여러 웹페이지에서 로드함으로서 js의 재활용성을 높일 수 있다. 캐쉬를 통해서 속도의 향상, 전송량의 경량화를 도모할 수 있다. 유지보수의 편의성(중복 제거)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;※ Scripts 파일은 태그보다 페이지 하단(body tag 안에서 맨뒤)에 위치시키는 것이 더 좋음&lt;/p&gt;
&lt;h1 id=&quot;dom-document-object-model&quot;&gt;&lt;a href=&quot;#dom-document-object-model&quot; aria-label=&quot;dom document object model permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DOM (Document Object Model)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;DOM(돔)이란 웹페이지의 HTML을 계층화시켜 트리구조로 만든 객체(Object) 모델입니다.&lt;/li&gt;
&lt;li&gt;JavaScript는 이 model로 웹 페이지에 접근하고, 페이지를 수정할 수 있습니다.&lt;/li&gt;
&lt;li&gt;DOM은 HTML인 웹페이지와 스크립팅언어(JavaScript)를 서로 잇는 역할입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JS로 html문서를 제어하려면 젤 처음에 해야 하는 일이 제어의 대상에 해당되는 객체를 찾는 것이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;객체 찾는 방법은 document 객체의 조회 관련 메소드 이용&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;document.getElementsByTagName – HTML tag 이름 ul/ li/ p/ div 으로 찾아냄 보통 tag가 중복되서 많이 쓰이므로 찾으려는 태그명에 대해 배열값으로 리턴한다.&lt;/li&gt;
&lt;li&gt;document.getElementsById – ID명으로 찾음 – ID는 유일한 값이므로 유일한 객체만 검색됨&lt;/li&gt;
&lt;li&gt;document.getElementsByClassName - class명으로 찾아냄 – 클래스도 같은 이름으로 여러 개가 쓰일 수 있으므로 tagName과 같게 배열값으로 리턴한다.&lt;/li&gt;
&lt;li&gt;document.querySelector – css의 선택자의 문법을 이용한 객체 조회 – 위의 3개를 다 쓸 수 있는 듯 but 1개만 검색됨&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;document.querySelectorall – css 선택자 모든 객체 조회 – 맨 위의 3개를 다 쓸 수 있는 강력한 도구&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;속성 - 엘리먼트의 속성을 알아내고 변경하는 API – MTV 모델에서 많이 쓰임&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Element.getAttribute(name) – 속성을 가져오는 것&lt;/li&gt;
&lt;li&gt;Element.setAttribute(name, value) – 속성을 변경, 추가 하는 것&lt;/li&gt;
&lt;li&gt;Element.hasAttribute(name); - 속성의 존재여부를 boolean값으로 확인&lt;/li&gt;
&lt;li&gt;Element.removeAttribute(name) ; - 속성을 제거하는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;node-객체&quot;&gt;&lt;a href=&quot;#node-%EA%B0%9D%EC%B2%B4&quot; aria-label=&quot;node 객체 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Node 객체&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;관계 - 엘리먼트는 서로 부모, 자식, 혹은 형제자매 관계로 연결되어 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;각각의 Node가 다른 Node와 연결된 정보를 보여주는 API를 통해서 문서를 프로그래밍적으로 탐색할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Node.childNodes – 자식노드들을 유사배열에 담아서 리턴&lt;/li&gt;
&lt;li&gt;Node.firstChild – 첫번째 자식 노드&lt;/li&gt;
&lt;li&gt;Node.lastChild – 마지막 자식 노드&lt;/li&gt;
&lt;li&gt;Node.nextSibling – 다음 형제 노드&lt;/li&gt;
&lt;li&gt;Node.previousSibling – 이전형제 노드&lt;/li&gt;
&lt;li&gt;Node.contains() – 가지고 있는 자식 노드&lt;/li&gt;
&lt;li&gt;Node.hasChildNodes() – 특정 자식 노드를 가지고 있느냐 없느냐&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;노드의-종류&quot;&gt;&lt;a href=&quot;#%EB%85%B8%EB%93%9C%EC%9D%98-%EC%A2%85%EB%A5%98&quot; aria-label=&quot;노드의 종류 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;노드의 종류&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Node 객체는 모든 구성요소를 대표하는 객체이기 때문에 각각의 구성요소가 어떤 카테고리에 속하는 것인지를 알려주는 식별자를 제공한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Node.nodeType - 노드의 종류에 따라서 정해진 상수가 존재한다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Node.nodeName – name은 태그명을 의미한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;값 - Node 객체의 값을 제공하는 API&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Node.nodeValue&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Node.textContent&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;자식관리 - Node 객체의 자식을 추가하는 방법에 대한 API&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;★ Node.appendChild()&lt;/li&gt;
&lt;li&gt;Node.removeChild()&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;노드-추가&quot;&gt;&lt;a href=&quot;#%EB%85%B8%EB%93%9C-%EC%B6%94%EA%B0%80&quot; aria-label=&quot;노드 추가 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;노드 추가&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;appendChild(child)- 노드의 마지막 자식으로 주어진 엘리먼트 추가&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;insertBefore(newElement, referenceElement) - appendChild와 동작방법은 같으나 두번째 인자로 엘리먼트를 전달 했을 때 이것 앞에 엘리먼트가 추가된다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;위치 지정해서 엘리먼트를 추가하는 방법
노드를 추가하기 위해서는 추가할 엘리먼트를 생성해야 하는데 이것은 document 객체의 기능이다. 아래 API는 노드를 생성하는 API이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;document.createElement(tagName) -엘리먼트 노드를 추가한다.&lt;/li&gt;
&lt;li&gt;document.createTextNode(data) - 텍스트 노드를 추가한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;노드-제거&quot;&gt;&lt;a href=&quot;#%EB%85%B8%EB%93%9C-%EC%A0%9C%EA%B1%B0&quot; aria-label=&quot;노드 제거 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;노드 제거&lt;/h3&gt;
&lt;p&gt;메소드는 삭제 대상의 부모 노드 객체의 것을 실행해야 한다는 점에 유의하자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;removeChild(child)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;노드-교체&quot;&gt;&lt;a href=&quot;#%EB%85%B8%EB%93%9C-%EA%B5%90%EC%B2%B4&quot; aria-label=&quot;노드 교체 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;노드 교체&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;replaceChild(newchild, oldchild)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;문자열로-노드-제어-위의-방법보다-훨씬-쉬움&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%9E%90%EC%97%B4%EB%A1%9C-%EB%85%B8%EB%93%9C-%EC%A0%9C%EC%96%B4-%EC%9C%84%EC%9D%98-%EB%B0%A9%EB%B2%95%EB%B3%B4%EB%8B%A4-%ED%9B%A8%EC%94%AC-%EC%89%AC%EC%9B%80&quot; aria-label=&quot;문자열로 노드 제어 위의 방법보다 훨씬 쉬움 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문자열로 노드 제어 (위의 방법보다 훨씬 쉬움)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;innerHTML - 문자열로 자식 노드를 만들 수 있는 기능을 제공한다. 또한 자식 노드의 값을 읽어올 수도 있다. 선택한 엘리먼트는 검색되지 않는다 (부모노드는 검색 범위에서 제외)&lt;/li&gt;
&lt;li&gt;outerHTML - outerHTML은 선택한 엘리먼트를 포함해서 처리된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;이벤트&quot;&gt;&lt;a href=&quot;#%EC%9D%B4%EB%B2%A4%ED%8A%B8&quot; aria-label=&quot;이벤트 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;이벤트&lt;/h1&gt;
&lt;p&gt;★ addEventListener() 메서드 ★&lt;/p&gt;
&lt;p&gt;&lt;code&gt;target.addEventListener(type, listener[, options]);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;target:이벤트 발생시킬 타겟(이게 젤중요함 어디에 적용되느냐!!) (type:이벤트 종류, listener: 이벤트 작동할 로직 or 로직 있는함수
[,이벤트 특성])&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EventTarget의 addEventListener() 메서드는 지정한 이벤트가 대상에 전달될 때마다 호출할 함수를 설정합니다. 일반적인 대상은 Element, Document, Window지만, XMLHttpRequest와 같이 이벤트를 지원하는 모든 객체를 대상으로 지정할 수 있습니다.&lt;/li&gt;
&lt;li&gt;addEventListener()는 EventTarget의 주어진 이벤트 유형에, EventListener를 구현한 함수 또는 객체를 이벤트 처리기 목록에 추가해 작동합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;키이벤트&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;사람이 키보드를 누르면 발생하는 이벤트 입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;키보드를 눌렀을 때 발생하는 keydown&lt;/li&gt;
&lt;li&gt;키보드를 누르고 떼는 순간 발생하는 keyup&lt;/li&gt;
&lt;li&gt;키보드를 눌러 어떤 텍스트가 작성되는 순간 발생하는 keypress&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;등등 더 많은 이벤트가 존재한다 다른 이벤트를 보려면 밑의 링크를 클릭하시면 됩니다.&lt;/p&gt;
&lt;p&gt;[&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/Events&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;이벤트 종류 더 보기&lt;/a&gt;]&lt;/p&gt;</content:encoded></item><item><title><![CDATA[09.30~10.04 한 주 정리 part.5]]></title><description><![CDATA[For문 / date value / scope / switch]]></description><link>https://ctsictai.github.io//posts/javascript-part5/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/javascript-part5/</guid><pubDate>Fri, 11 Oct 2019 23:55:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;for문&quot;&gt;&lt;a href=&quot;#for%EB%AC%B8&quot; aria-label=&quot;for문 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;For문&lt;/h1&gt;
&lt;p&gt;원하는 만큼 반복하는 함수(일정한 형식의 많은 데이터를 다루기 위해 유용함)&lt;/p&gt;
&lt;p&gt;&lt;code&gt; for(let i =0; i&amp;#x3C;=5; i++)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;let i=0 &lt;/code&gt; 시작조건 - i변수 0부터 시작&lt;/li&gt;
&lt;li&gt;&lt;code&gt; i&amp;#x3C;=5 &lt;/code&gt; 종료조건 - 5보다 같거나 작을 떄&lt;/li&gt;
&lt;li&gt;&lt;code&gt; i++ &lt;/code&gt; 증감식 - 1씩 증가&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;i가 0, 1, 2, 3, 4, 5까지 for문 반복한다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;for (var i = 2; i &amp;#x3C; 10; i = i + 2)&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;i는 2부터 시작하여&lt;/li&gt;
&lt;li&gt;10보다 작을때까지&lt;/li&gt;
&lt;li&gt;2씩 증가시키면서 for문을 돌린다.&lt;/li&gt;
&lt;li&gt;i가 2,4,6,8 으로 2씩 증가하며 for문을 총 4번 반복합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;보통 배열 요소에 대한 for문 돌릴 땐 length 프로퍼티를 사용해 종료값을 정한다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;for (var i = 0; i &amp;#x3C; 배열명.length; i++)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;※ 종료조건에 &amp;#x3C;을 쓰는 이유&lt;br&gt;
배열의 인덱싱 시작이 0부터 시작하기 때문에 배열의 길이보다 작을 때까지 반복해야 한다.&lt;/p&gt;
&lt;h1 id=&quot;date-value날짜와-시간&quot;&gt;&lt;a href=&quot;#date-value%EB%82%A0%EC%A7%9C%EC%99%80-%EC%8B%9C%EA%B0%84&quot; aria-label=&quot;date value날짜와 시간 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Date value(날짜와 시간)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;날짜 객체 호출해서 날짜 시간을 얻는다.&lt;br&gt;
&lt;code&gt;let rightNow = new Date();&lt;/code&gt; - new Date&lt;/li&gt;
&lt;li&gt;반환되는 값이 2019-02-18T00:45:06.562Z – 그대로는 이용안하고 가공한번더 해야 됨&lt;br&gt;
&lt;code&gt;let year = rightNow.getFullYear();&lt;/code&gt; -년도만&lt;br&gt;
&lt;code&gt;let month = rightNow.getMonth()+1;&lt;/code&gt; -월만 (원래 값보다 1개월 작은값이 반환되서 +1함)&lt;br&gt;
&lt;code&gt;let date = rightNow.getDate();&lt;/code&gt; - 일만&lt;br&gt;
&lt;code&gt;let day = rightNow.getDay();&lt;/code&gt; - 요일만(0부터 월요일 ~6은 일요일)- 숫자값으로 뽑아줌&lt;br&gt;
&lt;code&gt;let currentHour = rightNow.getHours();&lt;/code&gt; -시간만&lt;br&gt;
&lt;code&gt;let currentMin = rightNow.getMinutes();&lt;/code&gt; -분만&lt;br&gt;
&lt;code&gt;Let time = rightNow.getTime();&lt;/code&gt; - 밀리초 표현 반환 가능&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특정날짜 Date&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let date1 = new Date(&amp;#39;December 17, 2019 03:24:00&amp;#39;);&lt;/code&gt;&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;let date2 = new Date(&amp;#39;2019-12-17T03:24:00&amp;#39;);&lt;/code&gt;&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;let date3 = new Date(2019, 5, 1);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;날짜 계산도 가능함 but 차원은 동일하게 (년도 – 년도) (월 – 월) (일 -일) 이렇게&lt;/p&gt;
&lt;p&gt;&lt;code&gt;let year = now.getFullYear();&lt;/code&gt;&lt;br&gt;
&lt;code&gt; let birthdayYear = birthday.getFullYear();&lt;/code&gt;&lt;br&gt;
&lt;code&gt; let age = year - birthdayYear;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;scope&quot;&gt;&lt;a href=&quot;#scope&quot; aria-label=&quot;scope permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Scope&lt;/h1&gt;
&lt;p&gt;변수의 사용 범위를 뜻한다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;block이란 중괄호({}, curly brace)로 감싸진 것을 block – func, if, for 모두 포함 여기 안에서 선언된 변수를 지역(local) 변수라고 하며 해당 함수(block)내에서 만 쓸 수 있다.&lt;/li&gt;
&lt;li&gt;Global(전역) scope&lt;br&gt;
block밖인 global scope에서 만든 변수를 global variable(전역변수)라고 합니다.
코드 어디서든 접근 가능해서 변수값을 확인할 수 있습니다.&lt;/li&gt;
&lt;li&gt;Scope 오염&lt;br&gt;
Global 변수 남용하지 마라 나중에 찾기 힘들어지고 global 변수에 의해 값이 오염이 되어 원하는 결과가 나오지 않게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;타이트한 scope(tightly scoping)의 변수는 코드 품질을 올려줍니다!!&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;- 코드가 block으로 명확하게 구분되기 때문에 코드 가독성이 올라갑니다.
- 코드가 한줄한줄 쭉 나열된 것이 아니라 각각의 기능별로 block을 나누면 코드가 이해하기 쉬워집니다.
- 나중에 코드를 수정할 일이 있을 때, 코드를 오랜만에 보더라도 잘 나뉘어 있어서 유지보수가 쉬워집니다.
- 프로그램이 끝날때까지 변수가 살아있는 것이 아니라서(block이 끝나면 local 변수의 삶이 끝나서) 메모리 절약도 됩니다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;switch&quot;&gt;&lt;a href=&quot;#switch&quot; aria-label=&quot;switch permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Switch&lt;/h2&gt;
&lt;p&gt;많은 코드 블록영역중 조건(case)에 match 되는 block을 executed 한다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;case ‘scope’: description = ‘변수영역’;&lt;/li&gt;
&lt;li&gt;case ‘block’: description = ’{}로 둘러쌓인 특정한 영역(함수, for문, if문 등)‘;&lt;/li&gt;
&lt;li&gt;case ‘global scope’: description = ‘이 자바스크립트 파일 전체 영역’;&lt;/li&gt;
&lt;li&gt;case ‘global variable’: description = ‘이 자바스크립트 파일 전체 영역에 쓰이는 변수’;&lt;/li&gt;
&lt;li&gt;case ‘block scope’: description = ‘특정한 영역 내에서만 쓰이는 변수’;&lt;/li&gt;
&lt;li&gt;case ‘local variable’: description = ‘지역(특정영역) 내에서만 쓰이는 함수’;&lt;/li&gt;
&lt;li&gt;case ‘global namespace’: description = ‘이 자바스크립트 파일 전체에 선언된 변수 이름’;&lt;/li&gt;
&lt;li&gt;case ‘scope pollution’: description = ‘내가 의도하지 않는 글로벌 변수가 리턴되는 것’;&lt;/li&gt;
&lt;li&gt;default : description = ‘초기값’&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[09.30~10.04 한 주 정리 part.4]]></title><description><![CDATA[배열 / class / 주석]]></description><link>https://ctsictai.github.io//posts/javascript-part4/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/javascript-part4/</guid><pubDate>Thu, 10 Oct 2019 23:45:03 GMT</pubDate><content:encoded>&lt;h2 id=&quot;array배열&quot;&gt;&lt;a href=&quot;#array%EB%B0%B0%EC%97%B4&quot; aria-label=&quot;array배열 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Array(배열)&lt;/h2&gt;
&lt;p&gt;비슷한 성질을 가진 데이터들의 집합&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;배열의 요소(Elements)&lt;br&gt;
&lt;code&gt;let name = [‘chris’, 2, test(name), [‘rs’, ‘esp’], function (price)]&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Element type – everything! – str /num / array / etc on..&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;인덱싱 – 배열안에서 각 요소들은 주소값(?)을 가지고 있다. – 배열안의 요소를 쉽게 찾을 수 있도록 하는 기능이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;function getElement() {
let arr = [3, [4, [“array”, 9], 2+3], [0]];}&lt;/code&gt;
&lt;code&gt;return arr[1][1][0];}&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;배열의 요소는 다양한 타입이 가능하다. 특히 배열안의 배열도 가능하다. 이렇게 [[[]]]- 배열 속에 배열이 있는 구조를 다차원 배열이라고 한다.
그러면 다차원 배열의 인덱싱은 어떻게 할까??? 가장 바깥의 배열부터 안에 있는 배열 순서대로 인덱싱을 진행하면&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;[1]-가장 바깥의 배열의 2번째 요소(이게 배열이다) - [4, [“array”, 9], 2+3],&lt;/li&gt;
&lt;li&gt;[1] - 1에서 인덱싱한 요소가 배열이고 이 배열에서 2번째 요소(이것도 배열) - [“array”, 9]&lt;/li&gt;
&lt;li&gt;[0] - 2에서 인덱싱한 요소가 배열이고 이 배열에서 1번째 요소 -“array”가 출력된다.&lt;/li&gt;
&lt;li&gt;배열 요소 추가하기&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;let cities = [];&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;array명[원하는 인덱싱] = 넣으려는 요소값&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;cities[0] = “서울”;&lt;/code&gt;
&lt;code&gt;cities[1] = “대전”;&lt;/code&gt;
&lt;code&gt;cities[2] = “대구”;&lt;/code&gt;
&lt;code&gt;cities[2] = “부산”;&lt;/code&gt; – 대구에서 부산으로 업뎃됨
&lt;code&gt;cities.push(“포항”);&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;요소 맨뒤에 위의 경우는 [3]에 “포항”을 집어 넣음&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;cities.unshift(“강릉”);&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;요소 맨앞에 위의 경우는 [0]에 “강릉”을 집어 넣음&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Cities.pop();&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;맨 뒤에 있던 요소 “포항”이 날라감&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;※ Callback 함수 – 인자로 전달되는 함수 – 함수에서 다시 불러와지는(콜백) 함수&lt;/p&gt;
&lt;h4 id=&quot;arraymap&quot;&gt;&lt;a href=&quot;#arraymap&quot; aria-label=&quot;arraymap permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Array.map()&lt;/h4&gt;
&lt;p&gt;배열을 반복해주는데, callback 함수에서 return한 값으로 매 요소를 수정해준다.
Map 메서드 return값은 수정도니 값으로 다시 생성된 배열.
Array 타입의 데이터를 요소 갯수 만큼 반복합니다.
반복할 때마다 실행할 함수를 parameter로 전달합니다.
그러면 이 callback 함수에서 array의 요소를 인자(x)로 받습니다.
해당 요소를 수정하고 싶은대로 로직을 구현하고 return해주면,
해당 index의 요소가 return 된 값으로 치환됩니다.&lt;/p&gt;
&lt;h4 id=&quot;arrayforeach&quot;&gt;&lt;a href=&quot;#arrayforeach&quot; aria-label=&quot;arrayforeach permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Array.forEach()&lt;/h4&gt;
&lt;p&gt;For 대신 사용하는 반복문
forEach는 함수 자체가 return하는 것도 아무것도 없는게 큰 차이
forEach함수를 탈출 하고 싶을 때 return을 사용하면 됨 – 지정 해줘야 됨 - for문에 종료조건에 따른 리턴 되는게 없으면 계속 반복하는 것 처럼&lt;/p&gt;
&lt;h2 id=&quot;class&quot;&gt;&lt;a href=&quot;#class&quot; aria-label=&quot;class permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Class&lt;/h2&gt;
&lt;p&gt;Object를 정의하는 프레임 혹은 설계
원하는 구조의 객체의 프레임을 설계해 놓고, 비슷한 모양의 객체를 공장처럼 찍어낼 수 있다.
비슷한 모양의 객체를 계속적으로 만드는 건 낭비 이걸 class라는 설계도를 통해 공통적인 부분의 중복 코딩을 막을 수 있다. 또한 코드 가독성 및 유지, 보수, 변경에도 훨씬 유리하다&lt;/p&gt;
&lt;p&gt;★ CSS에서 말하는 Class와는 개념이 다르다!!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JS Class 작성 예시&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;class Car {&lt;/code&gt; 클래스명은 대문자 시작 CamelCase 작성 규칙&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;constructor(name, price) {&lt;/code&gt;생성자 영역 – 인자 2개 받음 context 밖에서 인스턴스 생성할때마다 맨 먼저 호출되는 부분(클래스를 시작하기 위한 첫 기초단계라고 생각하자)&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;this.name = name;&lt;/code&gt; this는 class 영역(context) 내에서 적용할 인스턴스 name인스턴스는 = 인자 name값 ø context(class 개념에서) = scope (함수 개념에서)&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;this.price = price;&lt;/code&gt; 위와 동일하고 price인스턴스 인자값만 price로&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;this.department = &amp;quot;선릉지점&amp;quot;;&lt;/code&gt; department 인스턴스는 “선릉지점” 값&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;this.salesAmount = 0;&lt;/code&gt;salesAmount 인스턴스는 0값&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;}&lt;/code&gt;&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;applyDiscount(discount) {&lt;/code&gt;클래스 내에 생성되는 함수 = 메서드 à 객체가 프로터티 값으로 갖고 있다.&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;return this.price * discount;&lt;/code&gt; - this 인스턴스를 써야 class내에서는 통한다!&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;} addSales() { this.salesAmount++; } changeDepartment(departmentName) { this.department = departmentName; } }&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;if문&quot;&gt;&lt;a href=&quot;#if%EB%AC%B8&quot; aria-label=&quot;if문 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;if문&lt;/h2&gt;
&lt;p&gt;“만약에 ~하면 ~한다.”가 컴퓨터 언어로 변환&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;|| and &amp;#x26;&amp;#x26;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;if (answer === &amp;quot;선릉&amp;quot; || answer === &amp;quot;강남&amp;quot; || answer === &amp;quot;역삼&amp;quot;)&lt;/code&gt; - 선릉 or 강남 or 역삼인 경우&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;||는 or 논리 연산자이다.&lt;/li&gt;
&lt;li&gt;&amp;#x26;&amp;#x26; and 논리 연산자
&lt;code class=&quot;language-text&quot;&gt;if (hobby === &amp;quot;축구&amp;quot; &amp;amp;&amp;amp; morning === &amp;quot;네&amp;quot;)&lt;/code&gt; - hobby가 축구이고 morning이 네인 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex)
&lt;code class=&quot;language-text&quot;&gt;if (age &amp;gt; 65 || age &amp;lt; 21 &amp;amp;&amp;amp; res === &amp;quot;한국&amp;quot;)&lt;/code&gt;&lt;br&gt;
=&gt; 나이가 65세 초과이거나 나이가 21세 미만이고 한국거주하는 사람&lt;/p&gt;
&lt;p&gt;위의 코드는 가독성이 좋지 않으므로 밑에 처럼 () 처리하는게 좋다&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;if (age &amp;gt; 65 || (age &amp;lt; 21 &amp;amp;&amp;amp; res === &amp;quot;한국&amp;quot;))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;만약에 이런 형식의 코드는 어떻게 해석이 될까?&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;if ((age &amp;gt; 65 || age &amp;lt; 21) &amp;amp;&amp;amp; res === &amp;quot;한국&amp;quot;)&lt;/code&gt;&lt;br&gt;
=&gt; 나이가 65세 초과거나 21세미만이고 한국 거주하는 자&lt;/p&gt;
&lt;h2 id=&quot;주석---주석-연산자--&quot;&gt;&lt;a href=&quot;#%EC%A3%BC%EC%84%9D---%EC%A3%BC%EC%84%9D-%EC%97%B0%EC%82%B0%EC%9E%90--&quot; aria-label=&quot;주석   주석 연산자   permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;주석 - 주석 연산자(//, /* */)&lt;/h2&gt;</content:encoded></item><item><title><![CDATA[09.30~10.04 한 주 정리 part3]]></title><description><![CDATA[Number Type / Object 정리]]></description><link>https://ctsictai.github.io//posts/humane-typography-in-the-digital-age/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/humane-typography-in-the-digital-age/</guid><pubDate>Wed, 09 Oct 2019 22:40:32 GMT</pubDate><content:encoded>&lt;h2 id=&quot;number-type-파헤치기&quot;&gt;&lt;a href=&quot;#number-type-%ED%8C%8C%ED%97%A4%EC%B9%98%EA%B8%B0&quot; aria-label=&quot;number type 파헤치기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Number type 파헤치기!!&lt;/h2&gt;
&lt;p&gt;가장 중요한 객체 Math 객체 – 수학 계산식을 모아 놓은 object라고 보면 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[] Round / floor / ceil / random 자주 쓰는 함수들&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.round(2.5);&lt;/code&gt; 3 반올림! – 평점계산시 정수값 반환&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.floor(4.2);&lt;/code&gt; 4 가장 가까운 정수값으로 내림!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.ceil(4.1);&lt;/code&gt; 5 가장 가까운 정수값으로 올림!&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Math.random();&lt;/code&gt; 0~1까지의 임의의 실수 값 리턴! – 로또 / 이벤트 당첨자&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;단점 0~1이라는 한정된 구간이라서 문제 그래서 Math.random에 원하는 구간값을 곱해서 난수를 뽑아 낸다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ex) min ~ max 사이의 난수 값 추출&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(Math.random() * (max - min) ) + min&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;object객체&quot;&gt;&lt;a href=&quot;#object%EA%B0%9D%EC%B2%B4&quot; aria-label=&quot;object객체 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Object(객체)&lt;/h2&gt;
&lt;p&gt;좀 더 편안하게 코드 및 데이터를 관리할 수 있는 틀
다시 말하면 객체는 이름과 값으로 구성된 프로퍼티들의 집합이라고 할 수 있다.
Key-value로 되어 있으면 순서는 상관없음 key 값으로 다 찾을 수 있기 때문에&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/hyksmine/30d9e230-e5f3-11e9-a8fa-f7c7f5a2598c/15548253760452a280e2abfdc8cec2b3b9244788f8350.png&quot; alt=&quot;javascript 객체 프로퍼티&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;객체는 {}(중괄호)로 감싸져 있고,&lt;/li&gt;
&lt;li&gt;콜론으로 구분된 이름/값 쌍들이&lt;/li&gt;
&lt;li&gt;쉼표로 분리된 목록의 형태입니다.&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Property의 규칙&lt;/li&gt;
&lt;li&gt;property 이름은 중복될 수 없다.&lt;/li&gt;
&lt;li&gt;property이름과 property값 사이에 :(콜론)으로 구분한다.&lt;/li&gt;
&lt;li&gt;property를 추가할 때는 ,(쉼표)를 붙여준다.&lt;/li&gt;
&lt;li&gt;property 값에는 어느 type이나 가능하다(string, number, array, object, function..)&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 객체의 Key(프로퍼티명) – 프로퍼티 값에 대해 변수처럼 역할을 하는 것으로서 텍스트, 숫자, 함수, 객체, 특수문자도 가능 하다.&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Key Searching – 객체명[‘key’] – key에 상응하는 value가 나옴 – 많이 쓰임!!! – 객체 안의 특정 값을 찾아내는데 매우 유용&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;value-수정--새로운-key-추가&quot;&gt;&lt;a href=&quot;#value-%EC%88%98%EC%A0%95--%EC%83%88%EB%A1%9C%EC%9A%B4-key-%EC%B6%94%EA%B0%80&quot; aria-label=&quot;value 수정  새로운 key 추가 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Value 수정 / 새로운 key 추가&lt;/h4&gt;
&lt;p&gt;객체에 이미 키가 존재하는데, 다시 한 번 할당하면 값이 교체(수정)됩니다.
이전에 없던 키로 접근하면, 새로운 프로퍼티가 추가 됩니다.&lt;/p&gt;
&lt;p&gt;※ 키 생성시 값을 부여하지 않으면 undefined로 뜬다. 주의하자!&lt;/p&gt;
&lt;h3 id=&quot;method메서드&quot;&gt;&lt;a href=&quot;#method%EB%A9%94%EC%84%9C%EB%93%9C&quot; aria-label=&quot;method메서드 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Method(메서드)&lt;/h3&gt;
&lt;p&gt;객체에 저장된 값이 함수일 때&lt;/p&gt;
&lt;h4 id=&quot;객체의-property값을-접근&quot;&gt;&lt;a href=&quot;#%EA%B0%9D%EC%B2%B4%EC%9D%98-property%EA%B0%92%EC%9D%84-%EC%A0%91%EA%B7%BC&quot; aria-label=&quot;객체의 property값을 접근 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;객체의 property값을 접근&lt;/h4&gt;
&lt;p&gt;프로퍼티의 값은 추가/수정/type 변환 가능 새로운 프로퍼티 추가 가능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로퍼티 추가 – 객체명.프로퍼티명.siblingproperty = 추가할 프로퍼티 값&lt;/li&gt;
&lt;li&gt;수정 – 객체명.프로퍼티명 = 수정할 프로퍼티 값 – 이 때 type 다르게 하면 됨&lt;/li&gt;
&lt;li&gt;추가 – 객체명.프로퍼티명 = 추가로 입력할 프로퍼티 값&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 다중 객체 배열의 객체
&lt;code&gt;let objData = { name: 50, address: { email: “gaebal@gmail.com”, home: “위워크 선릉2호점” }, books: { year: [2019, 2018, 2006], info: [{ name: “JS Guide”, price: 9000 }, { name: “HTML Guide”, price: 19000, author: “Kim, gae bal” }] } };&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여기서 “JS Guide”를 찾아내고 싶다면 어떻게 해야 할까?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Let bookName = objData.books.info[0].name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let bookName = objData(객체명).books(프로퍼티명).info(프로퍼티명)&lt;a href=&quot;info%20%EB%B0%B0%EC%97%B4%EC%95%88%EC%97%90%20%EC%B2%AB%20%EB%B2%88%EC%A7%B8%20%EC%9A%94%EC%86%8C%EC%9D%B4%EB%AF%80%EB%A1%9C&quot;&gt;0&lt;/a&gt;.name(프로퍼티명) = name에 대한 프로퍼티 값 “JS Guide”가 나옴&lt;/p&gt;</content:encoded></item><item><title><![CDATA[09.30~10.04 한 주 정리 part2]]></title><link>https://ctsictai.github.io//posts/a-brief-history-of-typography/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/a-brief-history-of-typography/</guid><pubDate>Tue, 08 Oct 2019 22:50:32 GMT</pubDate><content:encoded>&lt;h2 id=&quot;1-string-type에-대해-파헤쳐-보자&quot;&gt;&lt;a href=&quot;#1-string-type%EC%97%90-%EB%8C%80%ED%95%B4-%ED%8C%8C%ED%97%A4%EC%B3%90-%EB%B3%B4%EC%9E%90&quot; aria-label=&quot;1 string type에 대해 파헤쳐 보자 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. String type에 대해 파헤쳐 보자&lt;/h2&gt;
&lt;p&gt;string type은 ” ” / ’ ’ / &lt;code class=&quot;language-text&quot;&gt;&lt;/code&gt; 사이에 있는 것을 말한다.&lt;/p&gt;
&lt;p&gt;string type은 대소문자를 구별한다. n is not equal N&lt;/p&gt;
&lt;p&gt;string type은 str에 제공되는 메서드를 쓸 수 있다.&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;(1) Length 메서드&lt;/p&gt;
&lt;p&gt;Str.length = str의 길이를 알 수 있다 – 굉장히 많이 씀!!&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;(2) indexOf 메서드&lt;/p&gt;
&lt;p&gt;str.indexOf(“찾고자 하는 문자”) – 찾고자 하는 문자의 인덱싱 값을 반환 해준다. – 많이 씀!!
문자가 복수 문자일 경우 첫 문자열 기준으로 반환한다. 만약에 인자값에 입력한 값이 없으면 -1을 반환한다.&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;※ 문자의 인덱싱 값(위치)를 알아서 무엇에 좋을까?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;차단할 단어 모음이 존재하면, 사용자가 댓글 쓰고 댓글달기를 누를 때 차단할 단어 모음중 하나라도 매치되면 댓글을 못달게 할 수 있다.&lt;/li&gt;
&lt;li&gt;오타를 코딩으로 수정 가능함.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;(3) Slice 메서드
str.slice(시작할 인덱싱 혹은 특정 str, 종료 인덱싱 혹은 특정 str) – 텍스트를 잘라주는 함수&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;str = “JavaScript는 프로래밍 언어이다.&amp;quot;;&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;str.slice(0, 4);&lt;/code&gt; - java =&gt; [4]의 위치는 ‘S’인데 S앞까지 잘라준다!! 중요!!!
&lt;code class=&quot;language-text&quot;&gt;Str.slice(5, 13);&lt;/code&gt; - “cript는 프” [5] 부터 시작 [13]인 ‘로’ 앞까지
앞서서 &lt;code class=&quot;language-text&quot;&gt;let char = str.indexOf(“Script”);&lt;/code&gt; - 위치 인덱싱 값 반환 – 첫 문자 ‘S’ 기준으로 인덱싱값 반환&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;str.slice(char);&lt;/code&gt;=&gt; Script는 프로래밍 언어이다 - 출력 =&gt; 2번째 인자 안주면 무조건 끝까지 !!&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;(4) StartsWith(“시작하는 문자열”)&lt;/p&gt;
&lt;p&gt;– 해당 문자열로 str이 시작하는지 아닌지 true/false&lt;/p&gt;
&lt;p&gt;(5) endsWith(“끝나는 문자열”)&lt;/p&gt;
&lt;p&gt;– 해당 문자열로 str이 끝나는지 아닌지 true/false&lt;/p&gt;
&lt;p&gt;(6) includes(“찾으려는 문자열”)&lt;/p&gt;
&lt;p&gt;– 해당 문자열에 찾으려는 문자열이 있으면 true 없으면 false 반환&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h2 id=&quot;1-2-텍스트-문자열str의-연결&quot;&gt;&lt;a href=&quot;#1-2-%ED%85%8D%EC%8A%A4%ED%8A%B8-%EB%AC%B8%EC%9E%90%EC%97%B4str%EC%9D%98-%EC%97%B0%EA%B2%B0&quot; aria-label=&quot;1 2 텍스트 문자열str의 연결 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1-2. 텍스트 문자열(str)의 연결**&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;구버전&lt;/th&gt;
&lt;th&gt;ES6&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;“안녕하세요! ” + username(변수) + “님”&lt;/td&gt;
&lt;td&gt;const hi = &lt;code class=&quot;language-text&quot;&gt;안녕하세요. 저는 ${name} 입니다.&lt;/code&gt;;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- +를 붙여야 한다. Str type이라면 ‘’나 “” 필수&lt;/td&gt;
&lt;td&gt;+ 필요없고 ${name -변수} 변수값을 문자열 값에 넣을 수 있다. 그리고 &lt;code class=&quot;language-text&quot;&gt;&lt;/code&gt;(1옆에 있는 기호)로 문자열 지정이 가능하고 변수값을 넣을 수 있게 되었다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;구버전&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Let detail = ‘자세히’\n +’보아야’\n + ‘이이이’;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let detail = “자세히&lt;/p&gt;
&lt;p&gt;보아야&lt;/p&gt;
&lt;p&gt;이이이”;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ES6&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let message = &amp;quot;감사합니다., &amp;quot;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let userName = &amp;quot;김개발&amp;quot;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let banger = &amp;quot;님!&amp;quot;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let customMess = message + userName + banger;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let message = &amp;quot;감사합니다., &amp;quot;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let userName = &amp;quot;김개발&amp;quot;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let banger = &amp;quot;님!&amp;quot;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let customMess =&lt;/code&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;{message}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.625em;vertical-align:-0.19444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.03588em;&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;e&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;{userName} ${banger};`&lt;/p&gt;
&lt;h3 id=&quot;str과-number-type의-만남--js의-특징&quot;&gt;&lt;a href=&quot;#str%EA%B3%BC-number-type%EC%9D%98-%EB%A7%8C%EB%82%A8--js%EC%9D%98-%ED%8A%B9%EC%A7%95&quot; aria-label=&quot;str과 number type의 만남  js의 특징 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;str과 number type의 만남 – js의 특징&lt;/h3&gt;
&lt;p&gt;String + Number 을 시도할 때 항상 주의해야 합니다.
String과 Number형을 더하면 항상 String 형으로 변환됩니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let text = &amp;quot;2 더하기 2는 &amp;quot; + (2 + 2)&lt;/code&gt; – |2 더하기 2는 4| 출력&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let text = &amp;quot;2 더하기 2는 &amp;quot; + 2 + 2;&lt;/code&gt; - |2 더하기 2는 22| 출력&lt;/p&gt;
&lt;h2 id=&quot;1-3-string-☞-number-type-변환&quot;&gt;&lt;a href=&quot;#1-3-string-%E2%98%9E-number-type-%EB%B3%80%ED%99%98&quot; aria-label=&quot;1 3 string ☞ number type 변환 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1-3. String ☞ Number type 변환​&lt;/h2&gt;
&lt;p&gt;JS에서는 type error가 잘 안나는 편이라 덜 신경쓰이지만 원래 다른 언어에서는 칼 같이 type에 따른 error가 많이 뜬다. 범용적으로 str은 str끼리 num은 num끼리 묶어야 코드 가독성이 좋다.&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;+기호_는 str, num type 신경안쓰고 모두 되는 연산자라 많이 헷갈린다.
꼭 문자형과 숫자형을 구분하는 것이 좋다.&lt;/li&gt;
&lt;li&gt;기호_는 num type만 가능하므로 str type으로 -연산하면 NaN(Not a Number)가 뜬다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;string을-number-type으로-변환하는-메서드&quot;&gt;&lt;a href=&quot;#string%EC%9D%84-number-type%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%98%EB%8A%94-%EB%A9%94%EC%84%9C%EB%93%9C&quot; aria-label=&quot;string을 number type으로 변환하는 메서드 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;String을 Number type으로 변환하는 메서드&lt;/h3&gt;
&lt;p&gt;Number! parseInt / parseFloat
&lt;code class=&quot;language-text&quot;&gt;Let birthinput = “1999”&lt;/code&gt; -str
&lt;code class=&quot;language-text&quot;&gt;Let birth = Number(birhinput);&lt;/code&gt; - num​&lt;/p&gt;
&lt;h3 id=&quot;number을-string-type으로-변환하는-메서드&quot;&gt;&lt;a href=&quot;#number%EC%9D%84-string-type%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%98%EB%8A%94-%EB%A9%94%EC%84%9C%EB%93%9C&quot; aria-label=&quot;number을 string type으로 변환하는 메서드 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Number을 String type으로 변환하는 메서드&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Let n = 12;&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;Let nToS = n.toString();&lt;/code&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Git을 이용한 gatsby blog 작성]]></title><link>https://ctsictai.github.io//posts/the-origins-of-social-stationery-lettering</link><guid isPermaLink="false">https://ctsictai.github.io//posts/the-origins-of-social-stationery-lettering</guid><pubDate>Tue, 08 Oct 2019 22:30:32 GMT</pubDate><content:encoded>&lt;h1 id=&quot;git의-구조&quot;&gt;&lt;a href=&quot;#git%EC%9D%98-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;git의 구조 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git의 구조&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://jistol.github.io/assets/img/git/git-basic/git-basic-3.png&quot; alt=&quot;Git-Structure&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;git-add-&quot;&gt;&lt;a href=&quot;#git-add-&quot; aria-label=&quot;git add  permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Git add .&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;변경된 파일을 모두 tracking해서 working space에서 stage(index)로 upload&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;git-status&quot;&gt;&lt;a href=&quot;#git-status&quot; aria-label=&quot;git status permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git status&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;현재의 git과의 상태를 체크하는 명령어 - step by step 마다 쳐서 확인한다. (add/commit 상태 확인)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;no add status&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;modified: movie/views.py&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add status&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;new file: requirements.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;git-commit--m-message&quot;&gt;&lt;a href=&quot;#git-commit--m-message&quot; aria-label=&quot;git commit  m message permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git commit -m “message”&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;간결하고 알아볼 수 있는 message를 남긴다. commit을 하면 index에서 local repo로 간다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;git-remote-add-origin-github-repo-url&quot;&gt;&lt;a href=&quot;#git-remote-add-origin-github-repo-url&quot; aria-label=&quot;git remote add origin github repo url permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git remote add origin github repo url&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;local repo와 remote repo를 연결하기 위해 github에서 만든 new repository 주소를 붙여준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;git-remote--v&quot;&gt;&lt;a href=&quot;#git-remote--v&quot; aria-label=&quot;git remote  v permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git remote -v&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;local repo와 연결된 remote repo 상태를 보여주는 명령어&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;git-branch-branch-name&quot;&gt;&lt;a href=&quot;#git-branch-branch-name&quot; aria-label=&quot;git branch branch name permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git branch “branch name”&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;create branch&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;git-branch&quot;&gt;&lt;a href=&quot;#git-branch&quot; aria-label=&quot;git branch permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git branch&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;해당 remote repo에 생성된 branch 현황을 보여준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;git-push-origin-master-혹은-branch-name&quot;&gt;&lt;a href=&quot;#git-push-origin-master-%ED%98%B9%EC%9D%80-branch-name&quot; aria-label=&quot;git push origin master 혹은 branch name permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git push origin master 혹은 branch name&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;remote repo(github에 있는 repo)에 최종적으로 file upload&lt;/li&gt;
&lt;li&gt;이 때 master는 master branch에 push 하는 것이고 branch name은 만든 branchdp push 한다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[09.30 ~ 10.04 한 주 정리 part.1]]></title><description><![CDATA[1. 변수
변수를 선언하는 명령어 - var / let / const - 최신버전에서는 var 사용은 지양한다.
- Let – 변수값 수정 가능
- Const – 변수값 수정 불가능
- [ ] 변수 선언 문법.]]></description><link>https://ctsictai.github.io//posts/perfecting-the-art-of-perfection/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/perfecting-the-art-of-perfection/</guid><pubDate>Tue, 08 Oct 2019 17:41:37 GMT</pubDate><content:encoded>&lt;h1 id=&quot;0930--1004-한-주-정리-part1&quot;&gt;&lt;a href=&quot;#0930--1004-%ED%95%9C-%EC%A3%BC-%EC%A0%95%EB%A6%AC-part1&quot; aria-label=&quot;0930  1004 한 주 정리 part1 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;09.30 ~ 10.04 한 주 정리 part.1&lt;/h1&gt;
&lt;h2 id=&quot;1-변수&quot;&gt;&lt;a href=&quot;#1-%EB%B3%80%EC%88%98&quot; aria-label=&quot;1 변수 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 변수&lt;/h2&gt;
&lt;p&gt;변수를 선언하는 명령어 - var / let / const - 최신버전에서는 var 사용은 지양한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Let – 변수값 수정 가능&lt;/li&gt;
&lt;li&gt;Const – 변수값 수정 불가능&lt;/li&gt;
&lt;li&gt;[] 변수 선언 문법&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://blogfiles.pstatic.net/MjAxOTEwMDRfMTIz/MDAxNTcwMTk4OTQ1NzQx.a4yWDmRikvIoOXDD6w84MQEZsHreb5R5xINSum38KJYg.dscq-Xo5r3CKotSm2oiZJHxT4IACet5L4_o_mciQVoog.PNG.civicofjuve/image.png?type=w1&quot;&gt;&lt;/p&gt;
&lt;p&gt;◎ 변수이름 짓기 규칙&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;대소문자 구문 - 변수이름, 함수이름, 연산자 모두 대소문자를 구분합니다. 따라서 myName과 MyName은 다른 변수입니다.&lt;/li&gt;
&lt;li&gt;변수 이름을 정할 때, 첫 번째 문자는 반드시 글자나 밑줄(_), 달러기호($)중 하나입니다.&lt;/li&gt;
&lt;li&gt;두 번째 문자부터는 글자, 밑줄, 달러, 숫자 중에서 자유롭게 쓸 수 있습니다.&lt;/li&gt;
&lt;li&gt;변수이름, 함수이름 등 camelCase(카멜케이스) 방식으로 쓸 것.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;※ 카멜케이스(camelCase)란?&lt;/p&gt;
&lt;p&gt;낙타 등처럼 울퉁불퉁하다는 소리입니다. 단어가 새로 시작할 때부터 대문자로 쓰면 됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;변수 선언 ex)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;let name = “김개발”;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;변수 값 수정&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Name = “김코딩”;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; List item&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(주의할 점!) 변수 값 수정 시에는 let을 붙일 필요가 없다 why? 이미 선언된 변수명이기 때문에&lt;/p&gt;
&lt;p&gt;변수명만 선언하고 변수값은 나중에 줘도 됨!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;let man ;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;man = “남”;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;2-함수function&quot;&gt;&lt;a href=&quot;#2-%ED%95%A8%EC%88%98function&quot; aria-label=&quot;2 함수function permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 함수(function)&lt;/h2&gt;
&lt;ul&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 텍스트 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://blogfiles.pstatic.net/MjAxOTEwMDRfMjQg/MDAxNTcwMTk5MjY0OTQ0.-aIwwtQ2LF8WdknKCnADHT8DE94qZDiXp1V-bNdChLsg.-n75Xf-fl31jUw1FPvf_3YIdKIAys3xRC4Nn6jK63pcg.PNG.civicofjuve/image.png?type=w1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blogfiles.pstatic.net/MjAxOTEwMDRfMTk0/MDAxNTcwMTk5MjY5OTE3.XvtmLWFKhgRfsBwixP71SPirBqMvXIX4HmjoPR3m3Jog.aDKIvV46VDz6wi_TSEww4Mgl9qQN2iyDPQhR5I6Inpwg.PNG.civicofjuve/image.png?type=w1&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;function 키워드로 시작하여&lt;/li&gt;
&lt;li&gt;함수 이름을 지어주고&lt;/li&gt;
&lt;li&gt;함수를 알리는 괄호((): parentheses)를 열고 닫고&lt;/li&gt;
&lt;li&gt;함수의 시작을 알리는 중괄호({: curly bracket)을 열어줍니다.&lt;/li&gt;
&lt;li&gt;실행할 코드를 작성합니다. 함수의 body라고 부르기도 합니다. 이 부분에 들여쓰기가 되어있습니다. 함수 내부에 있는 코드라는 것을 알기 좋게 하려고 들여쓰기 하였습니다.&lt;/li&gt;
&lt;li&gt;return(반환) 할 것이 있다면 작성합니다.&lt;/li&gt;
&lt;li&gt;중괄호(}: curly bracket)로 닫아줍니다.&lt;/li&gt;
&lt;li&gt;함수 호출(실제 js에서 실행되는 것)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;새로운-함수-정의법---arrow-function&quot;&gt;&lt;a href=&quot;#%EC%83%88%EB%A1%9C%EC%9A%B4-%ED%95%A8%EC%88%98-%EC%A0%95%EC%9D%98%EB%B2%95---arrow-function&quot; aria-label=&quot;새로운 함수 정의법   arrow function permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;새로운 함수 정의법 - Arrow Function&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;ES6에서 새로 생긴 방법&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;const getName = (name) =&gt; {}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Const getName(함수명) = (name)인자 – 인자가 하나면 ( ) 생략가능 나머지는 안됨 =&gt; {}(로직) – return만 있는 경우 {return} 모두 생략 가능&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;getName(); – 호출방식은 기존과 동일하다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;*구버전 vs ES6 함수 선언 비교
| 구버전 | ES6 |
|—|— |
| let getEmail = function(username){return &lt;code class=&quot;language-text&quot;&gt;${username}@gmail.com&lt;/code&gt;; | const getEmail = username =&gt; &lt;code class=&quot;language-text&quot;&gt;${username}@gmail.com&lt;/code&gt;; |&lt;/p&gt;
&lt;h3 id=&quot;함수의-인자argument-대하여&quot;&gt;&lt;a href=&quot;#%ED%95%A8%EC%88%98%EC%9D%98-%EC%9D%B8%EC%9E%90argument-%EB%8C%80%ED%95%98%EC%97%AC&quot; aria-label=&quot;함수의 인자argument 대하여 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;함수의 인자(argument) 대하여&lt;/h3&gt;
&lt;p&gt;어떤 함수를 호출했을 때 전달받는 Value&lt;/p&gt;
&lt;p&gt;function multiply(arg1, arg2){ - multiply라는 함수는 인자를 2개 받는다.&lt;/p&gt;
&lt;p&gt;var myNumber = arg1 * arg2; - 받은 인자 2개를 사용하였다.&lt;/p&gt;
&lt;p&gt;if (myNumber &gt; 100) { 받은 인자 2개를 사용한 것에 조건문 추가&lt;/p&gt;
&lt;p&gt;return “크다!”; - 출력되는 결과&lt;/p&gt;
&lt;p&gt;} else{&lt;/p&gt;
&lt;p&gt;return “작다!”; - 출력되는 결과 – 함수의 실행결과를 출력해주는 함수 안해주면&lt;/p&gt;
&lt;p&gt;undefined가 출력이 된다.&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;h2 id=&quot;3-수학식-표현-방법&quot;&gt;&lt;a href=&quot;#3-%EC%88%98%ED%95%99%EC%8B%9D-%ED%91%9C%ED%98%84-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;3 수학식 표현 방법 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 수학식 표현 방법&lt;/h2&gt;
&lt;p&gt;★ Num++ =&gt; num = num + 1 – 계산을 해서 그 결과를 리턴 까지 하는 명령어&lt;/p&gt;
&lt;p&gt;★ Num— =&gt; num = num - 1&lt;/p&gt;
&lt;p&gt;※ 중요한 코딩 오류 중 하나 num++의 js 성질&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let num = 1;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let newNum = num++;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;newNum은 num의 1이 할당되고 num++이게 실행되서 num은 2가 됨&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;newNum에도 2가 할당되고 싶으면&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let newNum = ++num;&lt;/code&gt; - ++을 앞에다가 써야 됨&lt;/p&gt;
&lt;h2 id=&quot;4-데이터-타입&quot;&gt;&lt;a href=&quot;#4-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85&quot; aria-label=&quot;4 데이터 타입 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 데이터 타입&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Undefined - 정의 되지 않는 변수&lt;/li&gt;
&lt;li&gt;null - 없는 값&lt;/li&gt;
&lt;li&gt;boolean - True/False | 조건문에서 조건에 대한 결과 값으로 많이 쓰이는 타입&lt;/li&gt;
&lt;li&gt;숫자 - number&lt;/li&gt;
&lt;li&gt;문자열 - string으로 ” ” 나 ’ ’ 혹은 &lt;code class=&quot;language-text&quot;&gt;&lt;/code&gt; 둘러 쌓인 값&lt;/li&gt;
&lt;li&gt;객체 - function을 제외한 모든 객체&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item></channel></rss>