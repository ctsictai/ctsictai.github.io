<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[CTS junior Web developer]]></title><description><![CDATA[Web developer Learning.]]></description><link>https://ctsictai.github.io/</link><generator>GatsbyJS</generator><lastBuildDate>Thu, 16 Jan 2020 03:57:22 GMT</lastBuildDate><item><title><![CDATA[RESTful API]]></title><description><![CDATA[RESTful API]]></description><link>https://ctsictai.github.io//posts/RESTful</link><guid isPermaLink="false">https://ctsictai.github.io//posts/RESTful</guid><pubDate>Thu, 16 Jan 2020 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;rest란&quot;&gt;&lt;a href=&quot;#rest%EB%9E%80&quot; aria-label=&quot;rest란 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;REST란?&lt;/h1&gt;
&lt;p&gt;“Representational State Transfer”의 약자가 REST이다.&lt;br&gt;
자원을 이름(자원의 표현)으로 구분하여 해당 자원의 상태(정보)를 주고 받는 모든 것을 의미한다. 즉, 자원(resource)의 표현(representation) 에 의한 상태 전달&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;자원은 보통 데이터를 말하며&lt;/li&gt;
&lt;li&gt;표현은 자원을 전달하는 방식으로 JSON, XML로 표현된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;rest의-구체적-의미&quot;&gt;&lt;a href=&quot;#rest%EC%9D%98-%EA%B5%AC%EC%B2%B4%EC%A0%81-%EC%9D%98%EB%AF%B8&quot; aria-label=&quot;rest의 구체적 의미 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;REST의 구체적 의미&lt;/h1&gt;
&lt;p&gt;HTTP URI(Uniform Resource Identifier)를 통해 자원(Resource)을 명시하고, HTTP Method(POST, GET, PUT, DELETE)를 통해 해당 자원에 대한 CRUD Operation을 적용하는 것을 의미한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;웹 사이트의 이미지, 텍스트, DB 내용 등의 모든 자원에 고유한 ID인 HTTP URI를 부여한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;rest의-장단점&quot;&gt;&lt;a href=&quot;#rest%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;rest의 장단점 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;REST의 장단점&lt;/h1&gt;
&lt;h2 id=&quot;장점&quot;&gt;&lt;a href=&quot;#%EC%9E%A5%EC%A0%90&quot; aria-label=&quot;장점 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;장점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;HTTP 프로토콜의 인프라를 그대로 사용하므로 REST API 사용을 위한 별도의 인프라를 구출할 필요가 없다.&lt;/li&gt;
&lt;li&gt;HTTP 프로토콜의 표준을 최대한 활용하여 여러 추가적인 장점을 함께 가져갈 수 있게 해준다.&lt;/li&gt;
&lt;li&gt;HTTP 표준 프로토콜에 따르는 모든 플랫폼에서 사용이 가능하다.&lt;/li&gt;
&lt;li&gt;Hypermedia API의 기본을 충실히 지키면서 범용성을 보장한다.&lt;/li&gt;
&lt;li&gt;REST API 메시지가 의도하는 바를 명확하게 나타내므로 의도하는 바를 쉽게 파악할 수 있다.&lt;/li&gt;
&lt;li&gt;여러가지 서비스 디자인에서 생길 수 있는 문제를 최소화한다.&lt;/li&gt;
&lt;li&gt;서버와 클라이언트의 역할을 명확하게 분리한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;단점&quot;&gt;&lt;a href=&quot;#%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;단점 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;단점&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;표준이 존재하지 않는다.&lt;/li&gt;
&lt;li&gt;사용할 수 있는 메소드가 4가지 밖에 없다.&lt;/li&gt;
&lt;li&gt;HTTP Method 형태가 제한적이다.&lt;/li&gt;
&lt;li&gt;브라우저를 통해 테스트할 일이 많은 서비스라면 쉽게 고칠 수 있는 URL보다 Header 값이 왠지 더 어렵게 느껴진다.&lt;/li&gt;
&lt;li&gt;구형 브라우저가 아직 제대로 지원해주지 못하는 부분이 존재한다.&lt;/li&gt;
&lt;li&gt;PUT, DELETE를 사용하지 못하는 점&lt;/li&gt;
&lt;li&gt;pushState를 지원하지 않는 점&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;rest가-필요한-이유&quot;&gt;&lt;a href=&quot;#rest%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9D%B4%EC%9C%A0&quot; aria-label=&quot;rest가 필요한 이유 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;REST가 필요한 이유&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;애플리케이션 분리 및 통합&lt;/li&gt;
&lt;li&gt;다양한 클라이언트의 등장&lt;/li&gt;
&lt;li&gt;최근의 서버 프로그램은 다양한 브라우저와 안드로이폰, 아이폰과 같은 모바일 디바이스에서도 통신을 할 수 있어야 한다.&lt;br&gt;
이러한 멀티 플랫폼에 대한 지원을 위해 서비스 자원에 대한 아키텍처를 세우고 이용하는 방법을 모색한 결과, REST에 관심을 가지게 되었다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;rest-구성-요소&quot;&gt;&lt;a href=&quot;#rest-%EA%B5%AC%EC%84%B1-%EC%9A%94%EC%86%8C&quot; aria-label=&quot;rest 구성 요소 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;REST 구성 요소&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;리소스&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모든 자원에 고유한 ID가 존재하고, 이 자원은 Server에 존재한다.&lt;/li&gt;
&lt;li&gt;자원을 구별하는 ID는 ‘/groups/:group_id’와 같은 HTTP URI 다.&lt;/li&gt;
&lt;li&gt;Client는 URI를 이용해서 자원을 지정하고 해당 자원의 상태(정보)에 대한 조작을 Server에 요청한다.&lt;/li&gt;
&lt;li&gt;EX) ”&lt;a href=&quot;http://api.lib.com/books/1&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://api.lib.com/books/1&lt;/a&gt;” : 도서관 1번 책 정보&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;메소드&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GET, POST, PUT, DELETE 와 같은 메서드를 제공한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;표현(메세지, representation)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JSON, XML, TEXT, RSS 등 여러 형태의 Representation으로 나타내어 질 수 있다.&lt;/li&gt;
&lt;li&gt;주로 JSON, XML로 많이 표현한다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;구체적으로 REST를 만들어서 예시를 들어보자&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“사용자”는 생성되는 리소스 ,&lt;/li&gt;
&lt;li&gt;“생성한다” 라는 행위는 메서드&lt;/li&gt;
&lt;li&gt;그리고 ‘이름이 Terry인 사용자’는 “메시지”가 된다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이를 REST 형태로 표현해보면 HTTP POST, ”&lt;a href=&quot;http://myweb/users/1&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://myweb/users/1&lt;/a&gt;”&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
   &amp;quot;users&amp;quot;:{
      &amp;quot;name&amp;quot;:&amp;quot;terry&amp;quot;
   }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;JSON 형태로 표현된 리소스(데이터) user의 이름이다.&lt;/p&gt;
&lt;h1 id=&quot;rest-특징&quot;&gt;&lt;a href=&quot;#rest-%ED%8A%B9%EC%A7%95&quot; aria-label=&quot;rest 특징 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;REST 특징&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Server-Client(서버-클라이언트 구조)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;자원이 있는 쪽이 Server, 자원을 요청하는 쪽이 Client가 된다.&lt;/li&gt;
&lt;li&gt;REST Server: API를 제공하고 비즈니스 로직 처리 및 저장을 책임진다.&lt;/li&gt;
&lt;li&gt;Client: 사용자 인증이나 context(세션, 로그인 정보) 등을 직접 관리하고 책임진다.&lt;/li&gt;
&lt;li&gt;서로 간 의존성이 줄어든다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Stateless(무상태)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTTP 프로토콜은 Stateless Protocol이므로 REST 역시 무상태성을 갖는다.&lt;/li&gt;
&lt;li&gt;Client의 context를 Server에 저장하지 않는다.
즉, 세션과 쿠키와 같은 context 정보를 신경쓰지 않아도 되므로 구현이 단순해진다.&lt;/li&gt;
&lt;li&gt;Server는 각각의 요청을 완전히 별개의 것으로 인식하고 처리한다.&lt;/li&gt;
&lt;li&gt;각 API 서버는 Client의 요청만을 단순 처리한다.
즉, 이전 요청이 다음 요청의 처리에 연관되어서는 안된다.&lt;/li&gt;
&lt;li&gt;물론 이전 요청이 DB를 수정하여 DB에 의해 바뀌는 것은 허용한다.&lt;/li&gt;
&lt;li&gt;Server의 처리 방식에 일관성을 부여하고 부담이 줄어들며, 서비스의 자유도가 높아진다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cacheable(캐시 처리 가능)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;웹 표준 HTTP 프로토콜을 그대로 사용하므로 웹에서 사용하는 기존의 인프라를 그대로 활용할 수 있다.
즉, HTTP가 가진 가장 강력한 특징 중 하나인 캐싱 기능을 적용할 수 있다.&lt;/li&gt;
&lt;li&gt;HTTP 프로토콜 표준에서 사용하는 Last-Modified 태그나 E-Tag를 이용하면 캐싱 구현이 가능하다.&lt;/li&gt;
&lt;li&gt;대량의 요청을 효율적으로 처리하기 위해 캐시가 요구된다.&lt;/li&gt;
&lt;li&gt;캐시 사용을 통해 응답시간이 빨라지고 REST Server 트랜잭션이 발생하지 않기 때문에 전체 응답시간, 성능, 서버의 자원 이용률을 향상시킬 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Layered System(계층화)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Client는 REST API Server만 호출한다.&lt;/li&gt;
&lt;li&gt;REST Server는 다중 계층으로 구성될 수 있다.&lt;/li&gt;
&lt;li&gt;API Server는 순수 비즈니스 로직을 수행하고 그 앞단에 보안, 로드밸런싱, 암호화, 사용자 인증 등을 추가하여 구조상의 유연성을 줄 수 있다.&lt;br&gt;
또한 로드밸런싱, 공유 캐시 등을 통해 확장성과 보안성을 향상시킬 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;PROXY, 게이트웨이 같은 네트워크 기반의 중간 매체를 사용할 수 있다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Code-On-Demand(optional)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Server로부터 스크립트를 받아서 Client에서 실행한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Uniform Interface(인터페이스 일관성)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URI로 지정한 Resource에 대한 조작을 통일되고 한정적인 인터페이스로 수행한다.&lt;/li&gt;
&lt;li&gt;HTTP 표준 프로토콜에 따르는 모든 플랫폼에서 사용이 가능하다.&lt;/li&gt;
&lt;li&gt;특정 언어나 기술에 종속되지 않는다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;restful-api란&quot;&gt;&lt;a href=&quot;#restful-api%EB%9E%80&quot; aria-label=&quot;restful api란 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;RESTful API란?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;REST 기반으로 서비스 API를 구현한 것&lt;/li&gt;
&lt;li&gt;최근 OpenAPI(누구나 사용할 수 있도록 공개된 API: 구글 맵, 공공 데이터 등), 마이크로 서비스(하나의 큰 애플리케이션을 여러 개의 작은 애플리케이션으로 쪼개어 변경과 조합이 가능하도록 만든 아키텍처) 등을 제공하는 업체 대부분은 REST API를 제공한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;rest-api의-특징&quot;&gt;&lt;a href=&quot;#rest-api%EC%9D%98-%ED%8A%B9%EC%A7%95&quot; aria-label=&quot;rest api의 특징 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;REST API의 특징&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;사내 시스템들도 REST 기반으로 시스템을 분산해 확장성과 재사용성을 높여 유지보수 및 운용을 편리하게 할 수 있다.&lt;/li&gt;
&lt;li&gt;REST는 HTTP 표준을 기반으로 구현하므로, HTTP를 지원하는 프로그램 언어로 클라이언트, 서버를 구현할 수 있다.
즉, REST API를 제작하면 델파이 클라이언트 뿐 아니라, 자바, C#, 웹 등을 이용해 클라이언트를 제작할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;rest-api-설계-기본-규칙&quot;&gt;&lt;a href=&quot;#rest-api-%EC%84%A4%EA%B3%84-%EA%B8%B0%EB%B3%B8-%EA%B7%9C%EC%B9%99&quot; aria-label=&quot;rest api 설계 기본 규칙 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;REST API 설계 기본 규칙&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;슬래시 구분자(/ )는 계층 관계를 나타내는데 사용한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Ex) &lt;a href=&quot;http://restapi.example.com/houses/apartments&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://restapi.example.com/houses/apartments&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;URI 마지막 문자로 슬래시(/ )를 포함하지 않는다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URI에 포함되는 모든 글자는 리소스의 유일한 식별자로 사용되어야 하며 URI가 다르다는 것은 리소스가 다르다는 것이고, 역으로 리소스가 다르면 URI도 달라져야 한다.&lt;/li&gt;
&lt;li&gt;REST API는 분명한 URI를 만들어 통신을 해야 하기 때문에 혼동을 주지 않도록 URI 경로의 마지막에는 슬래시(/)를 사용하지 않는다.&lt;/li&gt;
&lt;li&gt;Ex) &lt;a href=&quot;http://restapi.example.com/houses/apartments/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://restapi.example.com/houses/apartments/&lt;/a&gt; (X)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;하이픈(- )은 URI 가독성을 높이는데 사용&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;불가피하게 긴 URI경로를 사용하게 된다면 하이픈을 사용해 가독성을 높인다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;밑줄(_ )은 URI에 사용하지 않는다.&lt;/li&gt;
&lt;li&gt;URI 경로에는 소문자가 적합하다.&lt;/li&gt;
&lt;li&gt;RFC 3986(URI 문법 형식)은 URI 스키마와 호스트를 제외하고는 대소문자를 구별하도록 규정하기 때문&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;파일확장자는 URI에 포함하지 않는다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;REST API에서는 메시지 바디 내용의 포맷을 나타내기 위한 파일 확장자를 URI 안에 포함시키지 않는다.&lt;/li&gt;
&lt;li&gt;Accept header를 사용한다.&lt;/li&gt;
&lt;li&gt;Ex) &lt;a href=&quot;http://restapi.example.com/members/soccer/345/photo.jpg&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://restapi.example.com/members/soccer/345/photo.jpg&lt;/a&gt; (X)&lt;/li&gt;
&lt;li&gt;Ex) GET / members/soccer/345/photo HTTP/1.1 Host: restapi.example.com Accept: image/jpg (O)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;리소스 간에는 연관 관계가 있는 경우&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;/리소스명/리소스 ID/관계가 있는 다른 리소스명&lt;/li&gt;
&lt;li&gt;Ex) GET : /users/{userid}/devices (일반적으로 소유 ‘has’의 관계를 표현할 때)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://gmlwjd9405.github.io/images/network/rest.png&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[OAuth2.0]]></title><description><![CDATA[OAuth2.0]]></description><link>https://ctsictai.github.io//posts/OAuth</link><guid isPermaLink="false">https://ctsictai.github.io//posts/OAuth</guid><pubDate>Tue, 14 Jan 2020 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;oauth-개념&quot;&gt;&lt;a href=&quot;#oauth-%EA%B0%9C%EB%85%90&quot; aria-label=&quot;oauth 개념 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;OAuth 개념&lt;/h1&gt;
&lt;p&gt;OAuth 2.0은 외부 서비스(third-party application)의 인증 및 권한부여를 관리하는 범용 프레임워크 입니다.&lt;/p&gt;
&lt;p&gt;OAuth 기반 서비스의 API를 호출을 할 때에는, HTTP 헤더에 access token을 포함하여 요청을 보내게 됩니다. 서비스는 access token을 검사하면서 이 요청이 유효한지 판단하여 적절한 결과를 응답합니다.&lt;/p&gt;
&lt;p&gt;사용자 입장에선 OAuth의 권한 요청 절차는 access token을 획득하는 것이 가장 주요한 목적이라 할 수 있고, 서비스 제공자 입장에선 인증된 사용자에게 access token을 발급하는 것이 가장 중요한 일이라 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;결국 소셜 로그인 API를 만들기 위한 과정이다.&lt;/p&gt;
&lt;p&gt;여기서 중요한 것은 소셜 로그인 기능을 넣더라도 결국은 세션/쿠키 방식이나 토큰을 활용해 인증을 거쳐야 한다는 것이다.&lt;/p&gt;
&lt;h2 id=&quot;oauth에서-중요한-용어들&quot;&gt;&lt;a href=&quot;#oauth%EC%97%90%EC%84%9C-%EC%A4%91%EC%9A%94%ED%95%9C-%EC%9A%A9%EC%96%B4%EB%93%A4&quot; aria-label=&quot;oauth에서 중요한 용어들 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;OAuth에서 중요한 용어들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Resource Owner : User, 즉 일반 사용자를 칭합니다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Client : 우리가 관리하는 어플리케이션 서버&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;User와 혼동될 수 있는데 아니다!!! - 헷갈리지말자&lt;/li&gt;
&lt;li&gt;프론트 서버와 백엔드 서버 둘 다 포함하는 개념이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Authorization Server : 권한을 관리하는 서버입니다. Access Token, Refresh Token을 발급, 재발급 해주는 역할을 합니다.(프론트에서 받은 토큰 발급 프로세스를 진행하는 곳)&lt;/li&gt;
&lt;li&gt;Resource Server : OAuth2.0을 관리하는 서버(Google, Facebook, Naver 등) 의 자원을 관리하는 서버입니다. 주의할 점은 우리가 만드는 서버의 자원을 관리하는 곳이 아닙니다. Oauth 2.0 관리 서버의 자체 API를 의미합니다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Authorization Code : 권한 서버에서 인증을 받아 권한을 받아 Token 발급 받을 때 중간과정으로 권한 코드를 받아 클라이언트(우리가 관리하는 서버)에 보내고 클라이언트가 이걸 권한 서버에 보내서 Token을 받는다. (한번 더 보안벽이 있다고 이해하였다.)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;facebook, google 등에서 사용되는 방법이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9945F13F5B6EECC02A&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Resource Owner(사용자)가 Client(우리 서버)에게 인증 요청을 합니다.&lt;/li&gt;
&lt;li&gt;Client는 Authorization Request를 통해 Resource Owner에게 인증할 수단(ex Facebook, Google 로그인 url)을 보냅니다.&lt;/li&gt;
&lt;li&gt;Resource Owner는 해당 Request를 통해 인증을 진행하고 인증을 완료했다는 신호로 Authorization Grant를 url에 실어 Client에게 보냅니다.&lt;/li&gt;
&lt;li&gt;Client는 해당 권한증서(Authorization Grant)를 Authorization Server에 보냅니다.&lt;/li&gt;
&lt;li&gt;Authorization Server는 권한증서를 확인 후, 유저가 맞다면 Client에게 Access Token, Refresh Token, 그리고 유저의 프로필 정보(id 포함) 등을 발급해줍니다.&lt;/li&gt;
&lt;li&gt;Client는 해당 Access Token을 DB에 저장하거나 Resource Owner에게 넘깁니다.&lt;/li&gt;
&lt;li&gt;Resource Owner(사용자)가 Resource Server에 자원이 필요하면, Client는 Access Token을 담아 Resource Server에 요청합니다.&lt;/li&gt;
&lt;li&gt;Resource Server는 Access Token이 유효한지 확인 후, Client에게 자원을 보냅니다.&lt;/li&gt;
&lt;li&gt;만일 Access Token이 만료됐거나 위조되었다면, Client는 Authorization Server에 Refresh Token을 보내 Access Token을 재발급 받습니다.&lt;/li&gt;
&lt;li&gt;그 후 다시 Resource Server에 자원을 요청합니다.&lt;/li&gt;
&lt;li&gt;만일 Refresh token도 만료되었을 경우, Resource Owner는 새로운 Authorization Grant를 Client에게 넘겨야합니다. (이는 다시 사용자가 다시 로그인 하라는 말입니다.)&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[transaction]]></title><description><![CDATA[Transaction]]></description><link>https://ctsictai.github.io//posts/django/transaction</link><guid isPermaLink="false">https://ctsictai.github.io//posts/django/transaction</guid><pubDate>Tue, 14 Jan 2020 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;트랜잭션이란&quot;&gt;&lt;a href=&quot;#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;트랜잭션이란 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;트랜잭션이란?&lt;/h1&gt;
&lt;p&gt;트랜잭션(Transaction)은 데이터베이스의 상태를 변환시키는 하나의 논리적 기능을 수행하기 위한 작업의 단위 또는 한꺼번에 모두 수행되어야 할 일련의 연산들을 의미한다.&lt;/p&gt;
&lt;p&gt;트랜잭션의 특징&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;트랜잭션은 데이터베이스 시스템에서 병행 제어 및 회복 작업 시 처리되는 작업의 논리적 단위이다.&lt;/li&gt;
&lt;li&gt;사용자가 시스템에 대한 서비스 요구 시 시스템이 응답하기 위한 상태 변환 과정의 작업단위이다.&lt;/li&gt;
&lt;li&gt;하나의 트랜잭션은 Commit되거나 Rollback된다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;acidatomicity-consistency-isolation-durability&quot;&gt;&lt;a href=&quot;#acidatomicity-consistency-isolation-durability&quot; aria-label=&quot;acidatomicity consistency isolation durability permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ACID(Atomicity, Consistency, Isolation, Durability)&lt;/h2&gt;
&lt;p&gt;트랜잭션에 있어서 중요한 4가지 특징이다. 꼭 알아둬야 되는 개념으로 한 번 정리하고 넘어간다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;원자성(Atomicity)&lt;/strong&gt;은 트랜잭션과 관련된 작업들이 부분적으로 실행되다가 중단되지 않는 것을 보장하는 능력이다.&lt;br&gt;
예를 들어, 자금 이체는 성공할 수도 실패할 수도 있지만 보내는 쪽에서 돈을 빼 오는 작업만 성공하고 받는 쪽에 돈을 넣는 작업을 실패해서는 안된다. 원자성은 이와 같이 중간 단계까지 실행되고 실패하는 일이 없도록 하는 것이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;일관성(Consistency)&lt;/strong&gt;은 트랜잭션이 실행을 성공적으로 완료하면 언제나 일관성 있는 데이터베이스 상태로 유지하는 것을 의미한다.&lt;br&gt;
무결성 제약이 모든 계좌는 잔고가 있어야 한다면 이를 위반하는 트랜잭션은 중단된다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;고립성(Isolation)&lt;/strong&gt;은 트랜잭션을 수행 시 다른 트랜잭션의 연산 작업이 끼어들지 못하도록 보장하는 것을 의미한다.&lt;br&gt;
이것은 트랜잭션 밖에 있는 어떤 연산도 중간 단계의 데이터를 볼 수 없음을 의미한다. 은행 관리자는 이체 작업을 하는 도중에 쿼리를 실행하더라도 특정 계좌간 이체하는 양 쪽을 볼 수 없다.&lt;br&gt;
공식적으로 고립성은 트랜잭션 실행내역은 연속적이어야 함을 의미한다. 성능관련 이유로 인해 이 특성은 가장 유연성 있는 제약 조건이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;지속성(Durability)&lt;/strong&gt;은 성공적으로 수행된 트랜잭션은 영원히 반영되어야 함을 의미한다.&lt;br&gt;
시스템 문제, DB 일관성 체크 등을 하더라도 유지되어야 함을 의미한다. 전형적으로 모든 트랜잭션은 로그로 남고 시스템 장애 발생 전 상태로 되돌릴 수 있다.&lt;br&gt;
트랜잭션은 로그에 모든 것이 저장된 후에만 commit 상태로 간주될 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;트랜잭션-연산-및-상태&quot;&gt;&lt;a href=&quot;#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EC%97%B0%EC%82%B0-%EB%B0%8F-%EC%83%81%ED%83%9C&quot; aria-label=&quot;트랜잭션 연산 및 상태 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;트랜잭션 연산 및 상태&lt;/h1&gt;
&lt;h3 id=&quot;commit연산&quot;&gt;&lt;a href=&quot;#commit%EC%97%B0%EC%82%B0&quot; aria-label=&quot;commit연산 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Commit연산&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;COMMIT은 변경한 데이터를 데이터베이스에 마지막으로 반영하고 현재의 트랜잭션을 종료하라는 명령어&lt;/li&gt;
&lt;li&gt;COMMIT을 하면 트랜잭션의 처리과정이 모두 반영되며 하나의 트랜잭션 과정이 끝남&lt;/li&gt;
&lt;li&gt;COMMIT하기 전 데이터가 저장됨&lt;/li&gt;
&lt;li&gt;DDL(CREATE, DROP, ALTER, RENAME, TRUNCATE)은 AutoCommit임&lt;/li&gt;
&lt;li&gt;정상적인 종료시에도 COMMIT 작업을 수행함 (EXIT로 종료)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;rollback연산&quot;&gt;&lt;a href=&quot;#rollback%EC%97%B0%EC%82%B0&quot; aria-label=&quot;rollback연산 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Rollback연산&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;ROLLBACK은 그 반대로 변경한 데이터를 변경(DML)을 취소하고 현재의 트랜잭션을 끝내라는 명령어&lt;/li&gt;
&lt;li&gt;트랜잭션으로 인한 하나의 묶음처리가 시작되기 이전의 상태로 되돌려지는 것&lt;/li&gt;
&lt;li&gt;이전 COMMIT한 곳까지만 복구가 됨&lt;/li&gt;
&lt;li&gt;이전의 상태로 돌아가니 지금까지 수행했던 데이터베이스의 변경을 모두 무효화시킴&lt;/li&gt;
&lt;li&gt;비정상적인 종료시 자동으로 ROLLBACK 작업을 수행함 (우측 상단 X버튼 클릭시, 정전, 컴퓨터가 Down시)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;트랜잭션-상태도&quot;&gt;&lt;a href=&quot;#%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EC%83%81%ED%83%9C%EB%8F%84&quot; aria-label=&quot;트랜잭션 상태도 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;트랜잭션 상태도&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/997656365AE1FCA40B&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;transaction-in-django&quot;&gt;&lt;a href=&quot;#transaction-in-django&quot; aria-label=&quot;transaction in django permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Transaction in Django&lt;/h1&gt;
&lt;h2 id=&quot;데코레이터decorator를-이용한-python--django-트랜잭션&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0decorator%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-python--django-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98&quot; aria-label=&quot;데코레이터decorator를 이용한 python  django 트랜잭션 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데코레이터(decorator)를 이용한 python + django 트랜잭션&lt;/h2&gt;
&lt;p&gt;django 에서 트랜잭션을 이용하는 가장 쉬운 방법으로 데코레이터를 이용하는 방법입니다. 데코레이터를 이용하게 되면, 메서드 안에는 코드를 삽입할 필요가 없습니다.&lt;br&gt;
&lt;strong&gt;“@transaction.atomic”&lt;/strong&gt; 이라는 데코레이터를 붙여주기만 하면 끝입니다. django 에서 기본적으로 제공해주는 데코레이터이므로, 따로 모듈을 설치해줄 필요도 없습니다.&lt;br&gt;
가장 간단하게 atomic(원자성)한 트랜잭션을 처리하기 위한 손쉬운 방법이죠&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;from django.db import transaction  # 장고에서 제공하는 transaction

@transaction.atomic                 # transaction decorator
def transaction_test1(arg1, arg2):
    # start transaction
    a.save()

    b.save()
    # end transaction&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;with-명령어를-이용한-트랜잭션&quot;&gt;&lt;a href=&quot;#with-%EB%AA%85%EB%A0%B9%EC%96%B4%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98&quot; aria-label=&quot;with 명령어를 이용한 트랜잭션 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;with 명령어를 이용한 트랜잭션&lt;/h2&gt;
&lt;p&gt;메서드 전체가 아닌 메서드의 일부분만 트랜잭션으로 묶어줄 필요가 있을 때 사용합니다. 트랜잭션으로 묶일 부분을 직접 지정해줘야 하는 불편함(?)이 있지만, 데코레이터와 마찬가지로 비교적 간단하게 처리가 가능합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;from django.db import transaction

def transaction_test2(arg1, arg2):

    a.save()    # 항상 save 처리됨, 예외가 발생할 경우 에러 발생

    with transaction.atomic(): # 메서드에 일부분만 트랜잭션 처리
        # start transaction
        b.save()

        c.save()
        # end transaction&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;savepoint-를-직접-지정해-주는-트랜잭션&quot;&gt;&lt;a href=&quot;#savepoint-%EB%A5%BC-%EC%A7%81%EC%A0%91-%EC%A7%80%EC%A0%95%ED%95%B4-%EC%A3%BC%EB%8A%94-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98&quot; aria-label=&quot;savepoint 를 직접 지정해 주는 트랜잭션 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;savepoint 를 직접 지정해 주는 트랜잭션&lt;/h2&gt;
&lt;p&gt;위의 2가지 방법의 경우, 메서드 내에서(트랜잭션으로 묶여져있는) exception 이 발생하더라도 저절로 롤백이 되기 때문에 예외처리를 따로 해 줄 필요는 없습니다.&lt;br&gt;
하지만, 3 번의 경우에는 savepoint 및 cummit 지점을 직접 지정해 주기 때문에 &lt;strong&gt;예외처리&lt;/strong&gt; 또한 별도로 처리되어야 합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;from django.db import transaction

def transaction_test3(arg1, arg2):

    a.save()

    sid = transaction.savepoint()
    # start transaction
    try:

        b.save()

        c.save()

        transaction.savepoint_commit(sid)
        # end transaction
    except Exception
        # 트랜잭션 내에서 에러 발생시 롤백처리
        transaction.savepoint_rollback(sid)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;db-설정에서-트랜잭션-처리를-자동으로-설정하는-방법&quot;&gt;&lt;a href=&quot;#db-%EC%84%A4%EC%A0%95%EC%97%90%EC%84%9C-%ED%8A%B8%EB%9E%9C%EC%9E%AD%EC%85%98-%EC%B2%98%EB%A6%AC%EB%A5%BC-%EC%9E%90%EB%8F%99%EC%9C%BC%EB%A1%9C-%EC%84%A4%EC%A0%95%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;db 설정에서 트랜잭션 처리를 자동으로 설정하는 방법 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DB 설정에서 트랜잭션 처리를 자동으로 설정하는 방법&lt;/h2&gt;
&lt;p&gt;django의 기본 프로젝트 디렉토리에 settings.py에 있는 DATABASE 설정에서 주요 문구를 추가하면된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;# settings/base.py

DATABASE = {
  &amp;#39;default&amp;#39;: {
    #...생략
    &amp;#39;ATOMIC_REQUESTS&amp;#39;: True,
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;‘ATOMIC_REQUESTS’: False, 라면 디폴트값이 트랜잭션 처리를 하지 않는다. 그래서 데이터베이스 변화가 있는 API를 설계할 때 일일히 지정해줘야 한다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Bcrypt]]></title><description><![CDATA[Bcrypt encryption of security information]]></description><link>https://ctsictai.github.io//posts/django/bcrypt</link><guid isPermaLink="false">https://ctsictai.github.io//posts/django/bcrypt</guid><pubDate>Mon, 13 Jan 2020 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;bcrypt란&quot;&gt;&lt;a href=&quot;#bcrypt%EB%9E%80&quot; aria-label=&quot;bcrypt란 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Bcrypt란?&lt;/h1&gt;
&lt;p&gt;Blowfish를 기반으로 만들어진 “단방향 암호화 해싱함수”로 1999년 USENIX에서 발표됐다. Rainbow table 공격을 막기 위해서 salt를 사용하며, 암호검사 요청이 반복될 수록 cost를 늘림으로써, 무차별 대입 공격(brute-force search)을 막을 수 있다. cost는 반복횟수로 2^n 이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rainbow table attack이란?
미리 해쉬값들을 계산해 놓은 테이블을 Rainbow table이라고 한다. 이것으로 암호화된 해쉬값을 풀어내는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;bcrypt-암호화-적용-구조&quot;&gt;&lt;a href=&quot;#bcrypt-%EC%95%94%ED%98%B8%ED%99%94-%EC%A0%81%EC%9A%A9-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;bcrypt 암호화 적용 구조 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Bcrypt 암호화 적용 구조&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://docs.google.com/drawings/d/e/2PACX-1vQNx1HRk87QQFoenXuRby493jI2Eg6gXIlTN-sxLFfurB-5FI5I5lutbrO-OPqWdnln2PBWXJv2X2Kl/pub?w=860&amp;#x26;h=168&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mtext&gt;의오리지날버전은&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;: bcrypt의 오리지날 버전은&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.43056em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8888799999999999em;vertical-align:-0.19444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.02778em;&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.03588em;&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;의&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;오&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;리&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;지&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;날&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;버&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;전&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;은&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;2a&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;:&lt;/mo&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;r&lt;/mi&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;p&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mtext&gt;의오리지날버전은&lt;/mtext&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;: bcrypt의 오리지날 버전은&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.43056em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mrel&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2777777777777778em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.8888799999999999em;vertical-align:-0.19444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.02778em;&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.03588em;&quot;&gt;y&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;의&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;오&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;리&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;지&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;날&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;버&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;전&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;은&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;2&lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mtext&gt;다&lt;/mtext&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;.&lt;/mi&gt;&lt;mtext&gt;오리지날버전은&lt;/mtext&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;A&lt;/mi&gt;&lt;mi&gt;S&lt;/mi&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mi&gt;I&lt;/mi&gt;&lt;mi&gt;I&lt;/mi&gt;&lt;mtext&gt;문자나&lt;/mtext&gt;&lt;mi&gt;N&lt;/mi&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mi&gt;l&lt;/mi&gt;&lt;mtext&gt;문자를처리하는방법을정의하지않았다&lt;/mtext&gt;&lt;mi mathvariant=&quot;normal&quot;&gt;.&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;다. 오리지날 버전은 non-ASCII 문자나 Null 문자를 처리하는 방법을 정의하지 않았다.&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.76666em;vertical-align:-0.08333em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;다&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;오&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;리&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;지&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;날&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;버&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;전&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;은&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;n&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mbin&quot;&gt;−&lt;/span&gt;&lt;span class=&quot;mspace&quot; style=&quot;margin-right:0.2222222222222222em;&quot;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.69444em;vertical-align:0em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;A&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.05764em;&quot;&gt;S&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.07153em;&quot;&gt;C&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.07847em;&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.07847em;&quot;&gt;I&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;문&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;자&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;나&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.10903em;&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.01968em;&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.01968em;&quot;&gt;l&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;문&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;자&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;를&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;처&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;리&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;하&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;는&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;방&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;법&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;을&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;정&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;의&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;하&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;지&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;않&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;았&lt;/span&gt;&lt;span class=&quot;mord hangul_fallback&quot;&gt;다&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;.&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;2a$는 널 문자를 포함하며, UTF-8로 인코딩 할 것을 정의한 버전이다. (encoding=‘utf-8’)&lt;/li&gt;
&lt;li&gt;10$ : Cost의 크기는 2^10이다. Iteration count를 1024만큼 돌리겠다는 얘기다. (bcrypt.gensalt(round=10))&lt;/li&gt;
&lt;li&gt;N9qo8uLOickgx2ZMRZoMye : 랜덤하게 만든 salt&lt;/li&gt;
&lt;li&gt;ljZAgcFl7p92ldGxad68LJZdL17lhWy : 패스워드. Salt와 패스워드를 묶어서 해시해버렸기 때문에, 유추가 불가능하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://d2.naver.com/content/images/2015/06/helloworld-318732-2.png&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;django에서-사용하기&quot;&gt;&lt;a href=&quot;#django%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;django에서 사용하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Django에서 사용하기&lt;/h1&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import bcrypt # 임포트한다(그 전에 라이브러리 설치는 필수)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;main-processsignup&quot;&gt;&lt;a href=&quot;#main-processsignup&quot; aria-label=&quot;main processsignup permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Main process(signup)&lt;/h2&gt;
&lt;p&gt;bytes(user_data, encoding=‘utf-8’) → bcrypt.hashpw(data, bcrypt.gensalt()) -&gt; .decode(‘utf-8’)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;bytes(암호화할 패스워드, encoding=‘utf-8’한글포함한 대부분의 문자 포함)화 한다&lt;/li&gt;
&lt;li&gt;bcrypt.hashpw(암호화할 패스워드, 솔트 추가) - 암호화 함수&lt;/li&gt;
&lt;li&gt;bcrypt.gensalt() -보안강화를 위한 salt 추가!&lt;/li&gt;
&lt;li&gt;.decode(‘utf-8’) - type을 ‘str’으로 변환&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;signin-process&quot;&gt;&lt;a href=&quot;#signin-process&quot; aria-label=&quot;signin process permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Signin Process&lt;/h1&gt;
&lt;p&gt;password 값 도착 → bcrypt.hashpw(받은password, bcrypt.gensalt()) → DB password encoding→ checkpw(받은 패스워드 인코딩한 값, DB에 저장된 password 인코딩한 값) 비교&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프론트에서 입력한 password를 요청 받음&lt;/li&gt;
&lt;li&gt;받은 password 암호화&lt;/li&gt;
&lt;li&gt;DB password 불러와서 encoding한다. (type 맞춰주기 위해서)&lt;/li&gt;
&lt;li&gt;bcrypt.checkpw(받은 패스워드 인코딩한 값, DB에 저장된 password 인코딩한 값) 비교 함수 적용&lt;/li&gt;
&lt;li&gt;일치하면 로그인 성공&lt;/li&gt;
&lt;li&gt;일치하지 않으면 로그인 실패&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;추가로-쓰이는-인자&quot;&gt;&lt;a href=&quot;#%EC%B6%94%EA%B0%80%EB%A1%9C-%EC%93%B0%EC%9D%B4%EB%8A%94-%EC%9D%B8%EC%9E%90&quot; aria-label=&quot;추가로 쓰이는 인자 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;추가로 쓰이는 인자&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;bcrypt.gensalt(round=4) : round는 cost 인자로서 해쉬 함수를 반복할 횟수를 결정한다. 이 때 반복 횟수는 2^n이 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;예시&quot;&gt;&lt;a href=&quot;#%EC%98%88%EC%8B%9C&quot; aria-label=&quot;예시 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;예시&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;# bcrypt 임포트한다
import bcrypt
password = b&amp;quot;super secret password&amp;quot;
# 패스워드 해싱
hashed = bcrypt.hashpw(password, bcrypt.gensalt(14))
# DB 저장 패스워드 가져오기
user_data      = User.objects.get(email=data[&amp;quot;email&amp;quot;])
user_password  = user_data.password.encode(&amp;#39;utf-8&amp;#39;)
# 프론트에서 받은 패스워드 hashing
byted_password = bcrypt.hashpw(data[&amp;#39;password&amp;#39;], bcrypt.gensalt(14))
# 패스워드 체크
if bcrypt.checkpw(byted_password, user_password):
    print(&amp;quot;It Matches!&amp;quot;)
else:
    print(&amp;quot;It Does not Match :(&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Python Closure]]></title><description><![CDATA[closure in python]]></description><link>https://ctsictai.github.io//posts/python/closure</link><guid isPermaLink="false">https://ctsictai.github.io//posts/python/closure</guid><pubDate>Thu, 09 Jan 2020 23:30:03 GMT</pubDate><content:encoded>&lt;p&gt;전에 봤던 데코레이터의 개념을 정확히 알기 위해서는 Closure를 알아야한다. Closure의 개념을 알기 위해서는 변수의 범위를 알아야한다.(SCOPE)
전에 정리를 한번했었는데 간단히 정리하고 넘어가도록 한다.&lt;/p&gt;
&lt;h1 id=&quot;변수의-사용-범위-알아보기&quot;&gt;&lt;a href=&quot;#%EB%B3%80%EC%88%98%EC%9D%98-%EC%82%AC%EC%9A%A9-%EB%B2%94%EC%9C%84-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0&quot; aria-label=&quot;변수의 사용 범위 알아보기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;변수의 사용 범위 알아보기&lt;/h1&gt;
&lt;p&gt;Closure 개념을 알아보기 전에 변수의 사용범위에 대해 짚고 넘어간다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;x = 10       # 전역변수 func 함수 안에서도 유효하고 func 밖에서도 유효한 변수
def func():
  a = 4      # 지역변수 - func 함수안에서만 유효한 변수
  print(a)   # --&amp;gt; local scope --&amp;gt; 정상 출력

print(a)     # 에러남 --&amp;gt; why? : 지역변수 a를 전역범위에서 사용했기 때문에
print(x)     # 10 정상 출력&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;함수-안에서-전역변수-변경하기&quot;&gt;&lt;a href=&quot;#%ED%95%A8%EC%88%98-%EC%95%88%EC%97%90%EC%84%9C-%EC%A0%84%EC%97%AD%EB%B3%80%EC%88%98-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0&quot; aria-label=&quot;함수 안에서 전역변수 변경하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;함수 안에서 전역변수 변경하기&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;x = 10       # 전역변수 func 함수 안에서도 유효하고 func 밖에서도 유효한 변수
def func():
  global x   # 글로벌 변수 선언
  x = 4      # 함수 내에서 뿐만 아니라 전역에서도 유효한 변수가됨

func()       # func 함수 호출 global x --&amp;gt; 4로 변경
print(x)
4            # func에서 선언된 global x 값으로 결과값&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;함수-안의-함수에서-지역변수-변경&quot;&gt;&lt;a href=&quot;#%ED%95%A8%EC%88%98-%EC%95%88%EC%9D%98-%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C-%EC%A7%80%EC%97%AD%EB%B3%80%EC%88%98-%EB%B3%80%EA%B2%BD&quot; aria-label=&quot;함수 안의 함수에서 지역변수 변경 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;함수 안의 함수에서 지역변수 변경&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def A():
    x = 10        # A의 지역 변수 x
    def B():
        x = 20    # x에 20 할당 -&amp;gt; 이건 B의 지역변수로 위의 x와 다르다

    B()
    print(x)      # A의 지역 변수 x 출력

A()
10               # A의 지역변수값 그대로 출력&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;x값을 일치 하기 위해서는 지역변수값을 변경 시켜야 한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def A():
    x = 10          # A의 지역 변수 x
    def B():
        nonlocal x  # 현재 함수의 바깥쪽에 있는 지역 변수 사용
        x = 20      # A의 지역 변수 x에 20 할당

    B()
    print(x)        # A의 지역 변수 x 출력

A()
20                  # B에서 바뀐 값 20 이 출력&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;nonlocal이 지역변수를 찾는 순서
가까운 함수부터 지역 변수를 찾고, 지역 변수가 없으면 계속 바깥쪽으로 나가서 찾습니다.(계층적)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;실무에서는 이렇게 여러 단계로 함수를 만들 일은 거의 없다고 한다. 그리고 함수마다 이름이 같은 변수를 사용하기 보다는 변수 이름을 다르게 짓는 것이 좋습니다.&lt;/p&gt;
&lt;p&gt;전역 변수는 코드가 복잡해졌을 때 변수의 값을 어디서 바꾸는지 알기가 힘듭니다. 따라서 전역 변수는 가급적이면 사용하지 않는 것을 권장합니다.&lt;/p&gt;
&lt;h1 id=&quot;closure란&quot;&gt;&lt;a href=&quot;#closure%EB%9E%80&quot; aria-label=&quot;closure란 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Closure란?&lt;/h1&gt;
&lt;p&gt;어떤 함수 내부에서 정의된 함수는 클로저가 될 수 있으며, 클로저는 바깥 함수로부터 생성된 변수값을 변경 또는 저장할 수 있는 함수이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;언제 활용??&lt;br&gt;
지역 변수와 코드를 묶어서 사용하고 싶을 때 활용합니다. 또한, 클로저에 속한 지역 변수는 바깥에서 직접 접근할 수 없으므로 데이터를 숨기고 싶을 때 활용합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def login_decorator(func):
    def wrapper(self, request, *args, **kwargs):   # Closure 부분

        if &amp;quot;Authorization&amp;quot; not in request.headers:
            return JsonResponse({&amp;quot;ERROR_CODE&amp;quot;:&amp;quot;INVALID_LOGIN&amp;quot;}, status=401)

        encode_token = request.headers[&amp;quot;Authorization&amp;quot;]  # request가 바깥 전역함수 login_decorator의 func에서 request 변수 중 headers에 있는 [&amp;quot;Authorization&amp;quot;]값
        try:
            data = jwt.decode(encode_token, SECRET[&amp;#39;secret&amp;#39;], algorithm=&amp;#39;HS256&amp;#39;)
            user = User.objects.get(id = data[&amp;quot;user_id&amp;quot;])     request.user = user       # request.user에 새로운 값 부여
        except jwt.DecodeError:
            return JsonResponse({&amp;quot;ERROR_CODE&amp;quot; : &amp;quot;INVALID_TOKEN&amp;quot;}, status = 401)

        except User.DoesNotExist:
            return JsonResponse({&amp;quot;ERROR_CODE&amp;quot; : &amp;quot;UNKNOWN_USER&amp;quot;}, status = 401)

        return func(self, request, *args, **kwargs) # 바뀐 변수값을 리턴
    return wrapper     # 함수 자체를 리턴&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;lamda로-클로져-만들기&quot;&gt;&lt;a href=&quot;#lamda%EB%A1%9C-%ED%81%B4%EB%A1%9C%EC%A0%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;lamda로 클로져 만들기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;lamda로 클로져 만들기&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def calc():
    a = 3
    b = 5
    return lambda x: a * x + b    # 람다 표현식을 반환(함수 따로 안만들고)

c = calc()
print(c(1), c(2), c(3), c(4), c(5))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Decorator]]></title><description><![CDATA[decorator example]]></description><link>https://ctsictai.github.io//posts/python/django/decorator</link><guid isPermaLink="false">https://ctsictai.github.io//posts/python/django/decorator</guid><pubDate>Wed, 08 Jan 2020 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;데코레이터란&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0%EB%9E%80&quot; aria-label=&quot;데코레이터란 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데코레이터란?&lt;/h1&gt;
&lt;p&gt;함수(메서드)를 장식하는 개념으로 함수 앞뒤에 기능을 추가해서 손쉽게 함수를 활용할 수 있는 기법이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Calc:
    @staticmethod    # 데코레이터
    def add(a, b):
        print(a + b)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;그러면-왜-쓸까&quot;&gt;&lt;a href=&quot;#%EA%B7%B8%EB%9F%AC%EB%A9%B4-%EC%99%9C-%EC%93%B8%EA%B9%8C&quot; aria-label=&quot;그러면 왜 쓸까 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;그러면 왜 쓸까?&lt;/h2&gt;
&lt;p&gt;함수나 클래스의 메서드는 한 함수에 한 기능을 넣는 것이 좋다.&lt;br&gt;
(Unit test를 생각한다면 더더욱 함수 하나에 한 기능을 넣어야 한다.)&lt;/p&gt;
&lt;p&gt;그런데 한 함수에 한 기능을 넣기에는 애매한 경우가 있다.&lt;br&gt;
혹은 한가지 기능에 간단한 로직을 첨가하는 것이 좀 더 좋아지는 경우&lt;br&gt;
한 기능을 여러 메서드나 함수에서 계속적으로 사용할 때 함수마다 기능을 넣는 것은 계속 같은 코드가 중복되는 문제가 발생한다.&lt;/p&gt;
&lt;p&gt;이럴 때 사용하는 것이 데코레이터이다.&lt;/p&gt;
&lt;h2 id=&quot;데코레이터-형태-설명&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0-%ED%98%95%ED%83%9C-%EC%84%A4%EB%AA%85&quot; aria-label=&quot;데코레이터 형태 설명 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데코레이터 형태 설명&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def trace(func):                             # 호출할 함수를 매개변수로 받음
    def wrapper():                           # 호출할 함수를 감싸는 함수
        print(func.__name__, &amp;#39;함수 시작&amp;#39;)    # __name__으로 함수 이름 출력
        func()                               # 매개변수로 받은 함수를 호출
        print(func.__name__, &amp;#39;함수 끝&amp;#39;)
    return wrapper                           # wrapper 함수 반환
    # 함수안에서 함수를 만들고 반환하는 클로저 개념

def hello():
    print(&amp;#39;hello&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;결과&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;trace_hello = trace(hello)    # 데코레이터에 호출할 함수를 넣음
trace_hello()                 # 반환된 함수를 호출

hello 함수 시작
hello
hello 함수 끝&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;데코레이터의-일반-형태&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0%EC%9D%98-%EC%9D%BC%EB%B0%98-%ED%98%95%ED%83%9C&quot; aria-label=&quot;데코레이터의 일반 형태 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데코레이터의 일반 형태&lt;/h2&gt;
&lt;p&gt;데코레이터 앞에 @를 붙여준다. 그리고 데코레이터를 적용할 함수 앞 줄에 꼭 입력한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@데코레이터
def 함수이름():
    코드&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def trace(func):                             # 호출할 함수를 매개변수로 받음
    def wrapper():                           # 호출할 함수를 감싸는 함수
        print(func.__name__, &amp;#39;함수 시작&amp;#39;)    # __name__으로 함수 이름 출력
        func()                               # 매개변수로 받은 함수를 호출
        print(func.__name__, &amp;#39;함수 끝&amp;#39;)
    return wrapper                           # wrapper 함수 반환
    # 함수안에서 함수를 만들고 반환하는 클로저 개념

@trace               # @데코레이터
def hello():
    print(&amp;#39;hello&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;가변-인수를-가지는-데코레이터&quot;&gt;&lt;a href=&quot;#%EA%B0%80%EB%B3%80-%EC%9D%B8%EC%88%98%EB%A5%BC-%EA%B0%80%EC%A7%80%EB%8A%94-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0&quot; aria-label=&quot;가변 인수를 가지는 데코레이터 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;가변 인수를 가지는 데코레이터&lt;/h2&gt;
&lt;p&gt;매개변수(인수)가 고정되지 않은 함수를 처리할 때 wrapper 함수를 가변 인수 함수로 만들면 됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def trace(func):                     # 호출할 함수를 매개변수로 받음
    def wrapper(*args, **kwargs):    # 가변 인수 함수로 만듦
        res = func(*args, **kwargs)  # func에 args, kwargs를 언패킹하여 넣어줌
        print(&amp;#39;{0}(args={1}, kwargs={2}) -&amp;gt; {3}&amp;#39;.format(func.__name__, args, kwargs, r))
                                     # 매개변수와 반환값 출력
        return res                   # func의 반환값을 반환
    return wrapper                   # wrapper 함수 반환

@trace                   # @데코레이터
def get_max(*args):      # 위치 인수를 사용하는 가변 인수 함수
    return max(args)

print(get_max(10, 20))
&amp;gt; get_max(args=(10, 20), kwargs={}) -&amp;gt; 20
&amp;gt; 20&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;매개변수인자가-존재하는-데코레이터&quot;&gt;&lt;a href=&quot;#%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EC%9D%B8%EC%9E%90%EA%B0%80-%EC%A1%B4%EC%9E%AC%ED%95%98%EB%8A%94-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0&quot; aria-label=&quot;매개변수인자가 존재하는 데코레이터 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;매개변수(인자)가 존재하는 데코레이터&lt;/h2&gt;
&lt;p&gt;데코레이터는 값을 지정해서 동작을 바꿀 수 있습니다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def is_multiple(x):              # 데코레이터가 사용할 매개변수를 지정
    def real_decorator(func):    # 호출할 함수를 매개변수로 받음
        def wrapper(a, b):       # 호출할 함수의 매개변수와 똑같이 지정&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;일반적인 데코레이터를 만들 때 함수 안에 함수를 하나만 만들었습니다. 하지만 매개변수가 있는 데코레이터를 만들 때는 함수를 하나 더 만들어야 합니다.&lt;/p&gt;
&lt;p&gt;먼저 is&lt;em&gt;multiple 함수를 만들고 데코레이터가 사용할 매개변수 x를 지정합니다.(매개변수를 지정할 함수) 그리고 is&lt;/em&gt;multiple 함수 안에서 실제 데코레이터 역할을 하는 real&lt;em&gt;decorator(일반적인 데코레이터 함수)를 만듭니다. 즉, 이 함수에서 호출할 함수를 매개변수로 받습니다. 그다음에 real&lt;/em&gt;decorator 함수 안에서 wrapper 함수를 만들어주면 됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def is_multiple(x):              # 데코레이터가 사용할 매개변수를 지정
    def real_decorator(func):    # 호출할 함수를 매개변수로 받음
        def wrapper(a, b):       # 호출할 함수의 매개변수와 똑같이 지정
            res = func(a, b)     # func를 호출하고 반환값을 변수에 저장
            if res % x == 0:     # func의 반환값이 x의 배수인지 확인
                print(&amp;#39;{0}의 반환값은 {1}의 배수입니다.&amp;#39;.format(func.__name__, x))
            else:
                print(&amp;#39;{0}의 반환값은 {1}의 배수가 아닙니다.&amp;#39;.format(func.__name__, x))
            return res           # func의 반환값을 반환
        return wrapper           # wrapper 함수 반환
    return real_decorator        # real_decorator 함수 반환&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;여기서는 real_decorator, wrapper 함수를 두 개 만들었으므로 함수를 만든 뒤에 return으로 두 함수를 반환해줍니다.&lt;/p&gt;
&lt;p&gt;데코레이터를 사용할 때는 데코레이터에 ( )(괄호)를 붙인 뒤 인수를 넣어주면 됩니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@데코레이터(인수)
def 함수이름():
    코드&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@is_multiple(3)     # @데코레이터(인수)
def add(a, b):
    return a + b
print(add(10, 20))
&amp;gt; add의 반환값은 3의 배수입니다.
&amp;gt; 30&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;-데코레이터-여러개-지정하기&quot;&gt;&lt;a href=&quot;#-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0-%EC%97%AC%EB%9F%AC%EA%B0%9C-%EC%A7%80%EC%A0%95%ED%95%98%EA%B8%B0&quot; aria-label=&quot; 데코레이터 여러개 지정하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;※ 데코레이터 여러개 지정하기&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@데코레이터1
@데코레이터2
def 함수이름():
    코드&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;데코레이터가 위에서부터 차례대로 실행된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def decorator1(func):
    def wrapper():
        print(&amp;#39;decorator1&amp;#39;)
        func()
    return wrapper

def decorator2(func):
    def wrapper():
        print(&amp;#39;decorator2&amp;#39;)
        func()
    return wrapper

# 데코레이터를 여러 개 지정
@decorator1
@decorator2
def hello():
    print(&amp;#39;hello&amp;#39;)

hello()

decorator1
decorator2
hello&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;실제-데코레이터-생성-예시&quot;&gt;&lt;a href=&quot;#%EC%8B%A4%EC%A0%9C-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0-%EC%83%9D%EC%84%B1-%EC%98%88%EC%8B%9C&quot; aria-label=&quot;실제 데코레이터 생성 예시 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;실제 데코레이터 생성 예시&lt;/h1&gt;
&lt;p&gt;로그인 시 JWT 토큰을 발급하고 특정 페이지를 조회하거나 페이지를 게시할 때 로그인 유저인지 확인하기 위한 데코레이터&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def login_decorator(func):
    def wrapper(self, request, *args, **kwargs):

        if &amp;quot;Authorization&amp;quot; not in request.headers:
            return JsonResponse({&amp;quot;ERROR_CODE&amp;quot;:&amp;quot;INVALID_LOGIN&amp;quot;}, status=401)             # 웹페이지에서 기존에 발급받았던 토큰을 request.header에 실어서 보낸다. 이 때 아무것도 없다면 로그인이 안되있다고 판단하고 에러를 리턴한다.

        encode_token = request.headers[&amp;quot;Authorization&amp;quot;]                                 # 프론트에서 보낸 토큰

        try:
            data = jwt.decode(encode_token, SECRET[&amp;#39;secret&amp;#39;], algorithm=&amp;#39;HS256&amp;#39;)
            user = User.objects.get(id = data[&amp;quot;user_id&amp;quot;])                               # 토큰값에 있는 user_id와 user DB table에 있는 user_id와 비교
            request.user = user                                                         # 프론트엔드에게 받은 request.user에 3번의 자료 저장 =&amp;gt;프론트엔드에게 전달해주기 전 준비과정
        except jwt.DecodeError:                                                         # 토큰값이 decode가 안될 시에 에러 리턴
            return JsonResponse({&amp;quot;ERROR_CODE&amp;quot; : &amp;quot;INVALID_TOKEN&amp;quot;}, status = 401)

        except User.DoesNotExist:                                                       # user가 존재하지 않는 경우 에러 리턴
            return JsonResponse({&amp;quot;ERROR_CODE&amp;quot; : &amp;quot;UNKNOWN_USER&amp;quot;}, status = 401)

        return func(self, request, *args, **kwargs)                                     # 4번에 저장된 request를 데코레이터 리턴
=&amp;gt; 데코레이터종료 및 프론트엔드에게 해당 유저의 정보를 리턴

    return wrapper&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;실제-데코레이터-적용-예시&quot;&gt;&lt;a href=&quot;#%EC%8B%A4%EC%A0%9C-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0-%EC%A0%81%EC%9A%A9-%EC%98%88%EC%8B%9C&quot; aria-label=&quot;실제 데코레이터 적용 예시 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;실제 데코레이터 적용 예시&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;@login_decorator                                     # 데코레이터 함수 적용
def get(self, request):                              # 로그인 데코레이터 적용시킬 함수
    user = request.user                              # request.user가 로그인 데코레이터에서 받은 변수값
    data = [{
        &amp;quot;user_name&amp;quot; : user.user_name,
        &amp;quot;user_email&amp;quot; : user.email
    }]
    return JsonResponse({&amp;quot;data&amp;quot;: data}, status=200)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Sorting Algorithm python]]></title><description><![CDATA[Sorting by Python]]></description><link>https://ctsictai.github.io//posts/algorithm/sorting/1</link><guid isPermaLink="false">https://ctsictai.github.io//posts/algorithm/sorting/1</guid><pubDate>Tue, 31 Dec 2019 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;프로그래머스-정렬-1번-문제&quot;&gt;&lt;a href=&quot;#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%A0%95%EB%A0%AC-1%EB%B2%88-%EB%AC%B8%EC%A0%9C&quot; aria-label=&quot;프로그래머스 정렬 1번 문제 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;프로그래머스 정렬 1번 문제&lt;/h1&gt;
&lt;p&gt;배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.&lt;/p&gt;
&lt;p&gt;예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면&lt;/p&gt;
&lt;p&gt;array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다.&lt;br&gt;
1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다.&lt;br&gt;
2에서 나온 배열의 3번째 숫자는 5입니다.&lt;br&gt;
배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요.&lt;/p&gt;
&lt;h3 id=&quot;제한사항&quot;&gt;&lt;a href=&quot;#%EC%A0%9C%ED%95%9C%EC%82%AC%ED%95%AD&quot; aria-label=&quot;제한사항 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;제한사항&lt;/h3&gt;
&lt;p&gt;array의 길이는 1 이상 100 이하입니다.
array의 각 원소는 1 이상 100 이하입니다.
commands의 길이는 1 이상 50 이하입니다.
commands의 각 원소는 길이가 3입니다.&lt;/p&gt;
&lt;h3 id=&quot;입출력-예&quot;&gt;&lt;a href=&quot;#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88&quot; aria-label=&quot;입출력 예 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;입출력 예&lt;/h3&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;array&lt;/th&gt;
&lt;th&gt;commands&lt;/th&gt;
&lt;th&gt;return&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;[1, 5, 2, 6, 3, 7, 4]&lt;/td&gt;
&lt;td&gt;[[2, 5, 3], [4, 4, 1], [1, 7, 3]]&lt;/td&gt;
&lt;td&gt;[5, 6, 3]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&quot;입출력-예-설명&quot;&gt;&lt;a href=&quot;#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88-%EC%84%A4%EB%AA%85&quot; aria-label=&quot;입출력 예 설명 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;입출력 예 설명&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;[1, 5, 2, 6, 3, 7, 4]를 2번째부터 5번째까지 자른 후 정렬합니다. [2, 3, 5, 6]의 세 번째 숫자는 5입니다.&lt;/li&gt;
&lt;li&gt;[1, 5, 2, 6, 3, 7, 4]를 4번째부터 4번째까지 자른 후 정렬합니다. [6]의 첫 번째 숫자는 6입니다.&lt;/li&gt;
&lt;li&gt;[1, 5, 2, 6, 3, 7, 4]를 1번째부터 7번째까지 자릅니다. [1, 2, 3, 4, 5, 6, 7]의 세 번째 숫자는 3입니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;기본-로직&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%EB%B3%B8-%EB%A1%9C%EC%A7%81&quot; aria-label=&quot;기본 로직 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기본 로직&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;배열 array를 슬라이스([:]) 하고 정렬(sorted)을 한다&lt;/li&gt;
&lt;li&gt;정렬한 list에서 commands에 해당되는 인덱스의 값을 리턴한다.&lt;/li&gt;
&lt;li&gt;리턴한 값을 answer list에 추가한다(append)&lt;/li&gt;
&lt;li&gt;commands의 길이가 최대 50까지 이므로 반복문이 필요하다. (나는 while문으로 접근하였다.)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;문제-풀이&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4&quot; aria-label=&quot;문제 풀이 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문제 풀이&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def solution(array, commands):
    answer = []
    i = 0
    while i &amp;lt;= len(commands)-1:
        ele = sorted(array[commands[i][0]-1:commands[i][1]])
        m = ele[commands[i][2]-1]
        answer.append(m)
        i += 1

    return answer&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;while문으로 commands의 리스트 길이만큼 돌린다.&lt;/li&gt;
&lt;li&gt;배열 array를 슬라이스 하고 정렬까지 완료&lt;/li&gt;
&lt;li&gt;정렬한 list에서 command에 있는 인덱스값으로 요소값 리턴&lt;/li&gt;
&lt;li&gt;리턴한 요소값을 answer list에 요소 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이렇게 풀었지만 더 간단히 푸는 방법이 있었다????&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def solution(array, commands):
    return list(map(lambda x: sorted(array[x[0]-1:x[1]])[x[2]-1], commands))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;list에서 map과 람다함수를 이용해서 한 줄로 깔끔하게 풀어낸 모습이다.&lt;/li&gt;
&lt;li&gt;람다함수의 x는 map의 인자중 map을 돌릴 리스트에 해당하는 commands가 된다.&lt;/li&gt;
&lt;li&gt;commands라는 list 요소를 lamda 함수 조건대로 변환해준다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Token System]]></title><description><![CDATA[Token system & user auth management at webpage in django]]></description><link>https://ctsictai.github.io//posts/django/userauthmethod/token</link><guid isPermaLink="false">https://ctsictai.github.io//posts/django/userauthmethod/token</guid><pubDate>Fri, 13 Dec 2019 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;사용자-인증-정보-관리&quot;&gt;&lt;a href=&quot;#%EC%82%AC%EC%9A%A9%EC%9E%90-%EC%9D%B8%EC%A6%9D-%EC%A0%95%EB%B3%B4-%EA%B4%80%EB%A6%AC&quot; aria-label=&quot;사용자 인증 정보 관리 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;사용자 인증 정보 관리&lt;/h1&gt;
&lt;p&gt;token system을 이해하기 위해서는 선행되어서 이해해야 할 중요한 것이 바로 사용자 인증 정보 관리이다.
token system이라는 것은 사용자 인증 정보 관리를 한 방편이기 때문이다.&lt;/p&gt;
&lt;p&gt;사용자 인증정보 관리라는 것은 서비스 페이지를 이용한 유저가 DB에 저장되어 있는 회원 유저이고 로그인한 상태인지를 계속 인지하고 관리하는 것을 말한다.&lt;/p&gt;
&lt;h2 id=&quot;사용자의-인증정보를-관리하는-방식&quot;&gt;&lt;a href=&quot;#%EC%82%AC%EC%9A%A9%EC%9E%90%EC%9D%98-%EC%9D%B8%EC%A6%9D%EC%A0%95%EB%B3%B4%EB%A5%BC-%EA%B4%80%EB%A6%AC%ED%95%98%EB%8A%94-%EB%B0%A9%EC%8B%9D&quot; aria-label=&quot;사용자의 인증정보를 관리하는 방식 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;사용자의 인증정보를 관리하는 방식&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;세션 기반 인증입니다. 이는 서버 기반 인증이라고 불리기도 합니다.&lt;/p&gt;
&lt;p&gt;이 인증 시스템은 이전부터 수 많은 웹서비스로서부터 사용이 되고 있는데요, 이름이 그렇듯, 만약에 유저가 로그인을 하게 되면, 서버측에서 유저가 현재 로그인 중이라는 인증정보를 기억하고 있어야 합니다. 그리고 이 정보를 세션 이라고 부릅니다.&lt;/p&gt;
&lt;p&gt;세션을 유지하기 위해서는 여러가지 방법이 사용되는데, 메모리, 디스크, 데이터베이스 시스템에 이를 저장합니다. 하지만 이 시스템엔 몇가지 문제점이 있는데, 이 문제점들은 큰 규모의 어플리케이션을 개발하는 것에 있어서 걸림돌이 되곤 했습니다.
문제점은 로그인 유저수가 많아지면 성능에 과부하가 쉽게 온다는 점과 서버확장이 여의치 않다는 것입니다.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;2-token-system&quot;&gt;&lt;a href=&quot;#2-token-system&quot; aria-label=&quot;2 token system permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Token System&lt;/h1&gt;
&lt;p&gt;사용자의 인증을 하는 방식을 토큰을 통해서 관리하는 방식으로 최근 몇 년동안 대세로 자리 잡았습니다. 그러면 왜 대세가 되었는가?&lt;/p&gt;
&lt;h2 id=&quot;1-stateless-서버--높은-확장성&quot;&gt;&lt;a href=&quot;#1-stateless-%EC%84%9C%EB%B2%84--%EB%86%92%EC%9D%80-%ED%99%95%EC%9E%A5%EC%84%B1&quot; aria-label=&quot;1 stateless 서버  높은 확장성 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Stateless 서버 &amp;#x26; 높은 확장성&lt;/h2&gt;
&lt;p&gt;Stateless 서버를 이해하려면 먼저 Stateful 서버가 무엇인지 알아야합니다. Stateful 서버는 클라이언트에게서 요청을 받을 때 마다, 클라이언트의 상태를 계속해서 유지하고, 이 정보를 서비스 제공에 이용합니다.&lt;/p&gt;
&lt;p&gt;stateful 서버의 예제로는 세션을 유지하는 웹서버가 있습니다. 예를들어 유저가 로그인을 하면, 세션에 로그인이 되었다고 저장을 해 두고, 서비스를 제공 할 때에 그 데이터를 사용합니다. 여기서 이 세션은, 서버컴퓨터의 메모리에 담을 때도 있고, 데이터베이스 시스템에 담을 때도 있습니다.&lt;/p&gt;
&lt;p&gt;Stateless 서버는 반대로, 상태를 유지 하지 않습니다. 상태정보를 저장하지 않으면, 서버는 클라이언트측에서 들어오는 요청만으로만 작업을 처리합니다. 이렇게 상태가 없는 경우 클라이언트와 서버의 연결고리가 없기 때문에 서버의 확장성 (Scalability) 이 높아집니다.&lt;/p&gt;
&lt;p&gt;서버 시스템이 분산이 되어있어도, 유저는 같은 토큰으로 서버에 요청을 하면 되고, 서버는 그저 그 토큰이 위조되지 않았는지만 검증을 하고 데이터베이스 조회도 할 필요 없이 바로 유저임을 신뢰하고 처리를 하면 되기 때문입니다.&lt;/p&gt;
&lt;h2 id=&quot;2-모바일-어플리케이션에-적합하다&quot;&gt;&lt;a href=&quot;#2-%EB%AA%A8%EB%B0%94%EC%9D%BC-%EC%96%B4%ED%94%8C%EB%A6%AC%EC%BC%80%EC%9D%B4%EC%85%98%EC%97%90-%EC%A0%81%ED%95%A9%ED%95%98%EB%8B%A4&quot; aria-label=&quot;2 모바일 어플리케이션에 적합하다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 모바일 어플리케이션에 적합하다&lt;/h2&gt;
&lt;p&gt;만약에 Android / iOS 모바일 어플리케이션을 개발 한다면, 안전한 API 를 만들기 위해선 쿠키같은 인증시스템은 이상적이지 않습니다. (쿠키 컨테이너를 사용해야하죠). 토큰 기반 인증을 도입한다면, 더욱 간단하게 이 번거로움을 해결 할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;3-확장성extensibility이-좋다소셜로그인-기능-구현&quot;&gt;&lt;a href=&quot;#3-%ED%99%95%EC%9E%A5%EC%84%B1extensibility%EC%9D%B4-%EC%A2%8B%EB%8B%A4%EC%86%8C%EC%85%9C%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EA%B8%B0%EB%8A%A5-%EA%B5%AC%ED%98%84&quot; aria-label=&quot;3 확장성extensibility이 좋다소셜로그인 기능 구현 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 확장성(Extensibility)이 좋다(소셜로그인 기능 구현)&lt;/h2&gt;
&lt;p&gt;여기서의 확장성은, Scalability 와는 또 다른 개념입니다. Scalability 는 서버를 확장하는걸 의미하는 반면, Extensibility 는 로그인 정보가 사용되는 분야를 확장하는것을 의미합니다.&lt;/p&gt;
&lt;p&gt;토큰을 사용하여 다른 서비스에서도 권한을 공유 할 수 있습니다&lt;/p&gt;
&lt;p&gt;대표적인 예제로는, OAuth 가 있습니다. 페이스북/구글/카카오/네이버 같은 소셜 계정들을 이용하여 다른 웹서비스에서도 로그인 할 수 있게 할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;4-여러-플랫폼-및-도메인&quot;&gt;&lt;a href=&quot;#4-%EC%97%AC%EB%9F%AC-%ED%94%8C%EB%9E%AB%ED%8F%BC-%EB%B0%8F-%EB%8F%84%EB%A9%94%EC%9D%B8&quot; aria-label=&quot;4 여러 플랫폼 및 도메인 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 여러 플랫폼 및 도메인&lt;/h2&gt;
&lt;p&gt;어플리케이션과 서비스의 규모가 커지면, 우리는 여러 디바이스를 호환 시키고, 더 많은 종류의 서비스를 제공하게 됩니다. 토큰을 사용한다면, 그 어떤 디바이스에서도, 그 어떤 도메인에서도, 토큰만 유효하다면 요청이 정상적으로 처리 됩니다. 서버측에서 어플리케이션의 응답부분에 다음 헤더만 포함시켜주면 되지요.&lt;/p&gt;
&lt;h2 id=&quot;token-system-작동-원리&quot;&gt;&lt;a href=&quot;#token-system-%EC%9E%91%EB%8F%99-%EC%9B%90%EB%A6%AC&quot; aria-label=&quot;token system 작동 원리 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Token system 작동 원리&lt;/h2&gt;
&lt;p&gt;토큰 기반 시스템은 stateless 합니다. 무상태. 즉 상태유지를 하지 않는다는 것이죠. 이 시스템에서는 더 이상 유저의 인증 정보를 서버나 세션에 담아두지 않습니다. 이게 가장 핵심적인 개념이다.&lt;/p&gt;
&lt;h3 id=&quot;구현방식-순서&quot;&gt;&lt;a href=&quot;#%EA%B5%AC%ED%98%84%EB%B0%A9%EC%8B%9D-%EC%88%9C%EC%84%9C&quot; aria-label=&quot;구현방식 순서 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;구현방식 순서&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;유저가 아이디와 비밀번호로 로그인을 합니다&lt;/li&gt;
&lt;li&gt;서버측에서 해당 계정정보를 검증합니다.&lt;/li&gt;
&lt;li&gt;계정정보가 정확하다면, 서버측에서 유저에게 signed 토큰을 발급해줍니다.&lt;/li&gt;
&lt;li&gt;여기서 signed 의 의미는 해당 토큰이 서버에서 정상적으로 발급된 토큰임을 증명하는 signature 를 지니고 있다는 것입니다&lt;/li&gt;
&lt;li&gt;클라이언트 측에서 전달받은 토큰을 저장해두고, 서버에 요청을 할 때 마다, 해당 토큰을 함께 서버에 전달합니다.
이 때 웹서버에서 토큰을 서버에 전달 할 때에는, &lt;strong&gt;HTTP 요청의 헤더&lt;/strong&gt;에 토큰값을 포함시켜서 전달합니다.&lt;/li&gt;
&lt;li&gt;서버는 토큰을 검증하고, 요청에 응답합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img src=&quot;https://velopert.com/wp-content/uploads/2016/12/token-diagram.png&quot; alt=&quot;서버와 클라이언트간의 토큰 교환방식&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;웹-표준-기반의-token-jwt&quot;&gt;&lt;a href=&quot;#%EC%9B%B9-%ED%91%9C%EC%A4%80-%EA%B8%B0%EB%B0%98%EC%9D%98-token-jwt&quot; aria-label=&quot;웹 표준 기반의 token jwt permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;웹 표준 기반의 Token JWT&lt;/h1&gt;
&lt;p&gt;토큰 기반 인증 시스템의 구현체인 JWT는 웹 표준 RFC 7519 에 등록이 되어있습니다. 따라서 여러 환경에서 지원이 되며 (.NET, Ruby, Java, Node.js, Python, PHP …) 수많은 회사의 인프라스트럭쳐에서 사용 되고 있습니다 (구글, 마이크로소프트 …)&lt;/p&gt;
&lt;h1 id=&quot;jwtjson-web-token&quot;&gt;&lt;a href=&quot;#jwtjson-web-token&quot; aria-label=&quot;jwtjson web token permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JWT(JSON Web Token)&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;수많은 프로그래밍 언어에서 지원됩니다&lt;br&gt;
JWT 는 C, Java, Python, C++, R, C#, PHP, JavaScript, Ruby, Go, Swift 등 대부분의 주류 프로그래밍 언어에서 지원됩니다.&lt;/li&gt;
&lt;li&gt;자가 수용적 (self-contained) 입니다&lt;br&gt;
JWT 는 필요한 모든 정보를 자체적으로 지니고 있습니다. JWT 시스템에서 발급된 토큰은, 토큰에 대한 기본정보, 전달 할 정보 (로그인시스템에서는 유저 정보를 나타내겠죠?) 그리고 토큰이 검증됐다는것을 증명해주는 signature 를 포함하고있습니다.&lt;/li&gt;
&lt;li&gt;쉽게 전달 될 수 있습니다&lt;br&gt;
JWT 는 자가수용적이므로, 두 개체 사이에서 손쉽게 전달 될 수 있습니다. 웹서버의 경우 HTTP의 헤더에 넣어서 전달 할 수도 있고, URL 의 파라미터로 전달 할 수도 있습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;jwt-구조&quot;&gt;&lt;a href=&quot;#jwt-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;jwt 구조 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JWT 구조&lt;/h1&gt;
&lt;p&gt;JWT 는 . 을 구분자로 3가지의 문자열로 되어있습니다. 구조는 다음과 같이 이루어져있습니다:
&lt;img src=&quot;https://velopert.com/wp-content/uploads/2016/12/jwt.png&quot; alt=&quot;JWT구조&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;1-header&quot;&gt;&lt;a href=&quot;#1-header&quot; aria-label=&quot;1 header permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Header&lt;/h2&gt;
&lt;p&gt;Header 는 두가지의 정보를 지니고 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;typ: 토큰의 타입을 지정합니다. 바로 JWT 이죠.&lt;/li&gt;
&lt;li&gt;alg: 해싱 알고리즘을 지정합니다. 해싱 알고리즘으로는 보통 HMAC SHA256 혹은 RSA 가 사용되며, 이 알고리즘은, 토큰을 검증 할 때 사용되는 signature 부분에서 사용됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.martinwork.co.kr/images/jwt/jwt03.png&quot; alt=&quot;header&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-payload정보&quot;&gt;&lt;a href=&quot;#2-payload%EC%A0%95%EB%B3%B4&quot; aria-label=&quot;2 payload정보 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Payload(정보)&lt;/h2&gt;
&lt;p&gt;Payload 부분에는 토큰에 담을 정보가 들어있습니다. 여기에 담는 정보의 한 ‘조각’ 을 클레임(claim) 이라고 부르고, 이는 name / value 의 한 쌍으로 이뤄져있습니다. 토큰에는 여러개의 클레임 들을 넣을 수 있습니다.&lt;/p&gt;
&lt;p&gt;클레임 의 종류는 다음과 같이 크게 세 분류로 나뉘어져있습니다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;등록된 (registered) 클레임,&lt;/li&gt;
&lt;li&gt;공개 (public) 클레임,&lt;/li&gt;
&lt;li&gt;비공개 (private) 클레임&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-등록된-클레임&quot;&gt;&lt;a href=&quot;#1-%EB%93%B1%EB%A1%9D%EB%90%9C-%ED%81%B4%EB%A0%88%EC%9E%84&quot; aria-label=&quot;1 등록된 클레임 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1) 등록된 클레임&lt;/h3&gt;
&lt;p&gt;등록된 클레임들은 서비스에서 필요한 정보들이 아닌, 토큰에 대한 정보들을 담기위하여 이름이 이미 정해진 클레임들입니다. 등록된 클레임의 사용은 모두 선택적 (optional)이며, 이에 포함된 클레임 이름들은 다음과 같습니다:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;iss: 토큰 발급자 (issuer)&lt;/li&gt;
&lt;li&gt;sub: 토큰 제목 (subject)&lt;/li&gt;
&lt;li&gt;aud: 토큰 대상자 (audience)&lt;/li&gt;
&lt;li&gt;exp: 토큰의 만료시간 (expiraton), 시간은 NumericDate 형식으로 되어있어야 하며 (예: 1480849147370) 언제나 현재 시간보다 이후로 설정되어있어야합니다.
nbf: Not Before 를 의미하며, 토큰의 활성 날짜와 비슷한 개념입니다. 여기에도 NumericDate 형식으로 날짜를 지정하며, 이 날짜가 지나기 전까지는 토큰이 처리되지 않습니다.&lt;/li&gt;
&lt;li&gt;iat: 토큰이 발급된 시간 (issued at), 이 값을 사용하여 토큰의 age 가 얼마나 되었는지 판단 할 수 있습니다.&lt;/li&gt;
&lt;li&gt;jti: JWT의 고유 식별자로서, 주로 중복적인 처리를 방지하기 위하여 사용됩니다. 일회용 토큰에 사용하면 유용합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-공개-클레임&quot;&gt;&lt;a href=&quot;#2-%EA%B3%B5%EA%B0%9C-%ED%81%B4%EB%A0%88%EC%9E%84&quot; aria-label=&quot;2 공개 클레임 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2) 공개 클레임&lt;/h3&gt;
&lt;p&gt;공개 클레임들은 충돌이 방지된 (collision-resistant) 이름을 가지고 있어야 합니다. 충돌을 방지하기 위해서는, 클레임 이름을 URI 형식으로 짓습니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    {&amp;quot;https://localhost:8000/user/is_admin&amp;quot;: True}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;3-비공개-private-클레임&quot;&gt;&lt;a href=&quot;#3-%EB%B9%84%EA%B3%B5%EA%B0%9C-private-%ED%81%B4%EB%A0%88%EC%9E%84&quot; aria-label=&quot;3 비공개 private 클레임 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3) 비공개 (private) 클레임&lt;/h3&gt;
&lt;p&gt;등록된 클레임도아니고, 공개된 클레임들도 아닙니다. 양 측간에 (보통 클라이언트 &amp;#x3C;-&gt;서버) 협의하에 사용되는 클레임 이름들입니다. 프론트와 백엔드 사이에 제공되어야할 정보값을 정한다고 보면 됩니다. 공개 클레임과는 달리 이름이 중복되어 충돌이 될 수 있으니 사용할때에 유의해야합니다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
    &amp;quot;username&amp;quot;: &amp;quot;ctsiam&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;4-예제-payload&quot;&gt;&lt;a href=&quot;#4-%EC%98%88%EC%A0%9C-payload&quot; aria-label=&quot;4 예제 payload permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4) 예제 payload&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
    &amp;quot;iss&amp;quot;: &amp;quot;ctsict.com&amp;quot;,
    &amp;quot;exp&amp;quot;: SETTINGS[&amp;#39;secret&amp;#39;], # exp 정보가 있는 모듈 임포트해서 썼다.
    &amp;quot;https://localhost:8000/user/is_admin&amp;quot;: True,
    &amp;quot;userId&amp;quot;: &amp;quot;1112532453452&amp;quot;,
    &amp;quot;username&amp;quot;: &amp;quot;kimalo&amp;quot;
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.martinwork.co.kr/images/jwt/jwt04.png&quot; alt=&quot;payload 영역&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-signature서명&quot;&gt;&lt;a href=&quot;#3-signature%EC%84%9C%EB%AA%85&quot; aria-label=&quot;3 signature서명 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Signature(서명)&lt;/h2&gt;
&lt;p&gt;JSON Web Token 의 마지막 부분은 바로 서명(signature) 입니다. 이 서명은 헤더의 인코딩값과, 정보의 인코딩값을 합친후 주어진 비밀키(보통 따로 저장해서 임포트해서 쓴다)로 해쉬를 하여 생성합니다.&lt;/p&gt;
&lt;p&gt;이렇게 만든 해쉬를, base64 형태로 나타내면 됩니다 (문자열을 인코딩 하는게 아닌 hex → base64 인코딩을 해야합니다)&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blog.martinwork.co.kr/images/jwt/jwt05.png&quot; alt=&quot;signature영역&quot;&gt;&lt;/p&gt;
&lt;p&gt;위에서 계속 나왔던 이미지파일들 &lt;a href=&quot;https://jwt.io/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://jwt.io/&lt;/a&gt; 의 디버거이다. (JWT.IO 는 브라우저 상에서 JWT 토큰을 검증하고 생성 할 수 있게 해주는 디버거 서비스입니다)&lt;/p&gt;
&lt;p&gt;위의 정보값을 넣어보고 테스트 할 수 있으며 하단의 텍스트가 파란색으로 Signature Verified 라고 뜨면 JWT 토큰이 검증되었다는 것 입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://velopert.com/wp-content/uploads/2016/12/Untitled-4-950x767.png&quot; alt=&quot;jWT 검증&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;jwt-token-은-무결성이-보장된다&quot;&gt;&lt;a href=&quot;#jwt-token-%EC%9D%80-%EB%AC%B4%EA%B2%B0%EC%84%B1%EC%9D%B4-%EB%B3%B4%EC%9E%A5%EB%90%9C%EB%8B%A4&quot; aria-label=&quot;jwt token 은 무결성이 보장된다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JWT Token 은 무결성이 보장된다.&lt;/h2&gt;
&lt;p&gt;공식 홈페이지에 메인에서 테스트를 해보면 예시로 보여주고 있는 JWT Token 의 secret 키를 하나라도 입력을 하게 되면 JWT Token 에서 Signature 영역의 글자가 바로 바뀌는 것을 알 수 있다. 이처럼 JWT Token 은 변조가 되었을 때, 바로 알아차릴 수가 있다.&lt;/p&gt;
&lt;h1 id=&quot;refresh-token&quot;&gt;&lt;a href=&quot;#refresh-token&quot; aria-label=&quot;refresh token permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Refresh Token&lt;/h1&gt;
&lt;p&gt;Access Token(JWT)를 통한 인증 방식의 문제는 만일 제 3자에게 탈취당할 경우 보안에 취약하다는 점입니다.&lt;/p&gt;
&lt;p&gt;유효기간이 짧은 Token의 경우 그만큼 사용자는 로그인을 자주 해서 새롭게 Token을 발급받아야 하므로 불편합니다. 그러나 유효기간을 늘리자면, 토큰을 탈취당했을 때 보안에 더 취약해지게 됩니다.&lt;/p&gt;
&lt;p&gt;이때 “그러면 유효기간을 짧게 하면서 좋은 방법이 있지는 않을까?”라는 질문의 답이 바로 “Refresh Token”입니다.&lt;/p&gt;
&lt;p&gt;Refresh Token은 Access Token과 똑같은 형태의 JWT입니다. 처음에 로그인을 완료했을 때 Access Token과 동시에 발급되는 Refresh Token은 긴 유효기간을 가지면서, Access Token이 만료됐을 때 새로 발급해주는 열쇠가 됩니다(여기서 만료라는 개념은 그냥 유효기간을 지났다는 의미입니다.)&lt;/p&gt;
&lt;p&gt;사용 예를 간단히 들어보겠습니다. Refresh Token의 유효기간은 2주, Access Token의 유효기간은 1시간이라 하겠습니다. 사용자는 API 요청을 신나게 하다가 1시간이 지나게 되면, 가지고 있는 Access Token은 만료됩니다. 그러면 Refresh Token의 유효기간 전까지는 Access Token을 새롭게 발급받을 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Access Token은 탈취당하면 정보가 유출되는건 동일합니다. 다만 짧은 유효기간 안에만 사용이 가능하기에 더 안전하다는 의미입니다.&lt;/li&gt;
&lt;li&gt;Refresh Token의 유효기간이 만료됐다면, 사용자는 새로 로그인해야 합니다. Refresh Token도 탈취될 가능성이 있기 때문에 적절한 유효기간 설정이 필요해보입니다(보통 2주로 많이 잡더군요)&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;access-token--refresh-token-인증-과정&quot;&gt;&lt;a href=&quot;#access-token--refresh-token-%EC%9D%B8%EC%A6%9D-%EA%B3%BC%EC%A0%95&quot; aria-label=&quot;access token  refresh token 인증 과정 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Access Token + Refresh Token 인증 과정&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99DB8C475B5CA1C936&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;사용자가 ID , PW를 통해 로그인합니다.&lt;/li&gt;
&lt;li&gt;서버에서는 회원 DB에서 값을 비교합니다(보통 PW는 일반적으로 암호화해서 들어갑니다)&lt;/li&gt;
&lt;li&gt;~4. 로그인이 완료되면 Access Token, Refresh Token을 발급합니다. 이때 일반적으로 회원DB에 Refresh Token을 저장해둡니다.&lt;/li&gt;
&lt;li&gt;사용자는 Refresh Token은 안전한 저장소에 저장 후, Access Token을 헤더에 실어 요청을 보냅니다.&lt;/li&gt;
&lt;li&gt;~7. Access Token을 검증하여 이에 맞는 데이터를 보냅니다.&lt;/li&gt;
&lt;li&gt;시간이 지나 Access Token이 만료됐다고 보겠습니다.&lt;/li&gt;
&lt;li&gt;사용자는 이전과 동일하게 Access Token을 헤더에 실어 요청을 보냅니다.&lt;/li&gt;
&lt;li&gt;~11. 서버는 Access Token이 만료됨을 확인하고 권한없음을 신호로 보냅니다.&lt;/li&gt;
&lt;li&gt;사용자는 Refresh Token과 Access Token을 함께 서버로 보냅니다.&lt;/li&gt;
&lt;li&gt;서버는 받은 Access Token이 조작되지 않았는지 확인한후, Refresh Token과 사용자의 DB에 저장되어 있던 Refresh Token을 비교합니다. Token이 동일하고 유효기간도 지나지 않았다면 새로운 Access Token을 발급해줍니다.&lt;/li&gt;
&lt;li&gt;서버는 새로운 Access Token을 헤더에 실어 다시 API 요청을 진행합니다.&lt;/li&gt;
&lt;li&gt;Access Token 만료가 될 때마다 계속 과정 9~11을 거칠 필요는 없습니다.&lt;br&gt;
사용자(프론트엔드)에서 Access Token의 Payload를 통해 유효기간을 알 수 있습니다. 따라서 프론트엔드 단에서 API 요청 전에 토큰이 만료됐다면 바로 재발급 요청을 할 수도 있습니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;큰-장점&quot;&gt;&lt;a href=&quot;#%ED%81%B0-%EC%9E%A5%EC%A0%90&quot; aria-label=&quot;큰 장점 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;큰 장점&lt;/h2&gt;
&lt;p&gt;기존의 Access Token만 있을 때보다 안전합니다.&lt;/p&gt;
&lt;h2 id=&quot;단점&quot;&gt;&lt;a href=&quot;#%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;단점 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;단점&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;구현이 복잡합니다. 검증 프로세스가 길기 때문에 자연스레 구현하기 힘들어졌습니다(프론트엔드, 서버 모두)&lt;/li&gt;
&lt;li&gt;Access Token이 만료될 때마다 새롭게 발급하는 과정에서 생기는 HTTP 요청 횟수가 많습니다. 이는 서버의 자원 낭비로 귀결됩니다.&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[OAuth, Social Signin]]></title><description><![CDATA[Auth/Social_login]]></description><link>https://ctsictai.github.io//posts/django/socialsignin</link><guid isPermaLink="false">https://ctsictai.github.io//posts/django/socialsignin</guid><pubDate>Thu, 12 Dec 2019 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;oauth20&quot;&gt;&lt;a href=&quot;#oauth20&quot; aria-label=&quot;oauth20 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;OAuth2.0&lt;/h1&gt;
&lt;p&gt;주요 특징 및 개선점&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;간단해 졌다.&lt;br&gt;
OAuth 1.0a에서는 https 가 필수가 아니었기 때문에 API를 호출할 때 signature를 생성해서 호출해야 했다. 때문에 OAuth 1.0a API를 테스트 하려면 curl등을 사용하기 힘들고 별도의 API 콘솔등을 사용해서 테스트 해야 했다. OAuth 2.0의 Bearer 토큰 인증 방식을 쓰면 더 이상 signature 가 필요 없기 때문에 API를 테스트하거나 예제를 만들 때 간단하게 curl등 직관적인 방법을 사용해서 문서화하고 개발 할 수 있게 되었다.&lt;/li&gt;
&lt;li&gt;더 많은 인증 방법을 지원&lt;br&gt;
OAuth 1.0a는 한가지 인증 방식을 제공한다. HMAC을 이용한 암호화 인증 방식이다. 하지만 OAuth 2.0은 시나리오별로 여러가지 인증 방식을 제공하기 때문에 웹브라우저, 모바일 등의 다양한 시나리오에 대응할 수 있게 해준다.&lt;/li&gt;
&lt;li&gt;대형 서비스로의 확장성 지원&lt;br&gt;
커다란 서비스를 만들기 위해서는 인증 서버를 분리할 수 있어야 하고 또한 인증 서버를 다중화 할 수 있어야 한다. OAuth 2.0에서는 실제 API 서비스를 하는 서버와 인증 역할을 하는 authorization server의 역할을 명확히 구분함으로서 인증서버의 분리와 다중화 등에 대한 고려가 되어있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;다양한-인증방식&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EC%96%91%ED%95%9C-%EC%9D%B8%EC%A6%9D%EB%B0%A9%EC%8B%9D&quot; aria-label=&quot;다양한 인증방식 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다양한 인증방식&lt;/h2&gt;
&lt;h3 id=&quot;1-authorization-code-grant&quot;&gt;&lt;a href=&quot;#1-authorization-code-grant&quot; aria-label=&quot;1 authorization code grant permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Authorization Code Grant&lt;/h3&gt;
&lt;p&gt;웹 서버에서 API를 호출하는 등의 시나리오에서 Confidential Client가 사용하는 방식이다. 서버사이드 코드가 필요한 인증 방식이며 인증 과정에서 client&lt;em&gt;secret 이 필요하다.
로그인시에 페이지 URL에 response&lt;/em&gt;type=code 라고 넘긴다.&lt;/p&gt;
&lt;h3 id=&quot;2-implicit-grant&quot;&gt;&lt;a href=&quot;#2-implicit-grant&quot; aria-label=&quot;2 implicit grant permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. Implicit Grant&lt;/h3&gt;
&lt;p&gt;token과 scope에 대한 스펙 등은 다르지만 OAuth 1.0a과 가장 비슷한 인증방식이다. Public Client인 브라우저 기반의 어플리케이션(Javascript application)이나 모바일 어플리케이션에서 이 방식을 사용하면 된다. Client 증명서를 사용할 필요가 없으며 실제로 OAuth 2.0에서 가장 많이 사용되는 방식이다.
로그인시에 페이지 URL에 response_type=token 라고 넘긴다.&lt;/p&gt;
&lt;h2 id=&quot;다양한-토큰-지원&quot;&gt;&lt;a href=&quot;#%EB%8B%A4%EC%96%91%ED%95%9C-%ED%86%A0%ED%81%B0-%EC%A7%80%EC%9B%90&quot; aria-label=&quot;다양한 토큰 지원 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;다양한 토큰 지원&lt;/h2&gt;
&lt;p&gt;OAuth 2.0은 기본적으로 Bearer 토큰, 즉 암호화하지 않은 그냥 토큰을 주고받는 것으로 인증을 한다. 기본적으로 HTTPS 를 사용하기 때문에 토큰을 안전하게 주고받는 것은 HTTPS의 암호화에 의존한다. 또한 복잡한 signature 등을 생성할 필요가 없기 때문에 curl이 API를 호출 할 때 간단하게 Header 에 아래와 같이 한 줄을 같이 보내므로서 API를 테스트해볼 수 있다.
Authorization: Bearer&lt;/p&gt;
&lt;h2 id=&quot;refresh-token&quot;&gt;&lt;a href=&quot;#refresh-token&quot; aria-label=&quot;refresh token permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Refresh token&lt;/h2&gt;
&lt;p&gt;클라이언트가 같은 access token을 오래 사용하면 결국은 해킹에 노출될 위험이 높아진다. 그래서 OAuth 2.0에서는 refresh token 이라는 개념을 도입했다. 즉, 인증 토큰(access token)의 만료기간을 가능한 짧게 하고 만료가 되면 refresh token으로 access token을 새로 갱신하는 방법이다. 토큰의 상태를 관리해야 해서 개발이 복잡해 지는 단점이 있다.&lt;/p&gt;
&lt;h2 id=&quot;api-권한-제어-scope&quot;&gt;&lt;a href=&quot;#api-%EA%B6%8C%ED%95%9C-%EC%A0%9C%EC%96%B4-scope&quot; aria-label=&quot;api 권한 제어 scope permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;API 권한 제어 (scope)&lt;/h2&gt;
&lt;p&gt;OAuth 2.0은 써드파티 어플리케이션의 권한을 설정하기 위한 기능이다. scope의 이름이 스펙에 정의되어있지는 않으며 여러 개의 권한을 요청할 때에는 콤마등을 사용해서 로그인 시에 scope를 넘겨주게 된다.&lt;/p&gt;
&lt;h1 id=&quot;소셜로그인&quot;&gt;&lt;a href=&quot;#%EC%86%8C%EC%85%9C%EB%A1%9C%EA%B7%B8%EC%9D%B8&quot; aria-label=&quot;소셜로그인 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;소셜로그인&lt;/h1&gt;
&lt;p&gt;유저가 별도의 회원가입 없이 유저가 이용하고 있는 소셜 웹사이트(kakao, google 등)의 로그인정보를 사용하여 웹사이트에 로그인계정을 얻게되어 회원으로 접근할 수 있도록 하는 방법.&lt;/p&gt;
&lt;h2 id=&quot;장점&quot;&gt;&lt;a href=&quot;#%EC%9E%A5%EC%A0%90&quot; aria-label=&quot;장점 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;장점&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;해외 소셜 로그인 업체를 이용하면 외국인들을 대상으로 하는 회원 서비스가 쉬워진다.&lt;/li&gt;
&lt;li&gt;서버에 개인정보를 최소한으로 저장하여 DB 저장 공간을 아낄 수 있다.&lt;/li&gt;
&lt;li&gt;많은 계정과 비밀번호를 일일히 기억할 필요 없이 소셜로그인으로 모두 통합되어 관리가 쉽다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;단점&quot;&gt;&lt;a href=&quot;#%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;단점 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;단점&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;보안 해킹 이슈가 있다. 하나로 통합되어 가입/로그인 절차를 진행하므로 해킹에 취약하다&lt;/li&gt;
&lt;li&gt;서버입장에서는 소셜 로그인 회원들을 관리하기가 까다로워졌다.(개인정보 취득이나 회원의 판별여부)&lt;/li&gt;
&lt;li&gt;여러개의 소셜 로그인을 제공하는 경우 다중 소셜 로그인을 허용할 것인지 말 것인지 까다로운 문제에 봉착한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;장점은 유저입장에서의 장점이 많고 단점은 서버단에서의 관리적 입장에서의 단점이 많다. 그래서 유저 입장에서 본 결과 대부분의 사이트에서 소셜 로그인 기능을 제공하고 있는 것이다.&lt;/p&gt;
&lt;h1 id=&quot;소셜로그인-전체-프로세스-로직&quot;&gt;&lt;a href=&quot;#%EC%86%8C%EC%85%9C%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%A0%84%EC%B2%B4-%ED%94%84%EB%A1%9C%EC%84%B8%EC%8A%A4-%EB%A1%9C%EC%A7%81&quot; aria-label=&quot;소셜로그인 전체 프로세스 로직 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;소셜로그인 전체 프로세스 로직&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://nachwon.github.io/img/facebook_login/flow.png&quot; alt=&quot;페이스북 로그인 로직&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;백엔드-로직순서&quot;&gt;&lt;a href=&quot;#%EB%B0%B1%EC%97%94%EB%93%9C-%EB%A1%9C%EC%A7%81%EC%88%9C%EC%84%9C&quot; aria-label=&quot;백엔드 로직순서 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;백엔드 로직순서&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;프론트엔드에서 유저의 소셜로그인에 필요한 access_token을 발급받아 백엔드 서버로 전달한다&lt;/li&gt;
&lt;li&gt;받은 access_token을 가지고 해당 소셜 플랫폼 api로 필요한 회원정보를 요청&lt;/li&gt;
&lt;li&gt;소셜 플랫폼에서 여러가지 개인 보호 정책등으로 걸러진 유저의 회원정보를 json 형식으로 받음&lt;/li&gt;
&lt;li&gt;받은 개인정보를 유저를 식별할 수 있는 정보(id값(소셜플랫폼에서 제공하는))와 기타 추가적인 정보값을 DB에 있는지 확인하고 없으면 저장&lt;/li&gt;
&lt;li&gt;Signin 로직 구현 —&gt; backend server에서 자체적으로 발급하는 토큰을 전달하면된다.(DB에 저장하던 말던 상관없이 위의 절차가 완료되면 백서버에서 발급하는 토큰을 전달한다.)&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;소셜로그인을-쉽게-관리하기-위한-tip&quot;&gt;&lt;a href=&quot;#%EC%86%8C%EC%85%9C%EB%A1%9C%EA%B7%B8%EC%9D%B8%EC%9D%84-%EC%89%BD%EA%B2%8C-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-tip&quot; aria-label=&quot;소셜로그인을 쉽게 관리하기 위한 tip permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;소셜로그인을 쉽게 관리하기 위한 Tip&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;소셜 플랫폼회사코드를 따로 테이블을 만들어서 관리한다.&lt;/li&gt;
&lt;li&gt;이 때 유저테이블과의 관계는 1:N으로 소셜플랫폼하나에 여러 유저가 있을 수 있고 유저는 하나의 플랫폼을 가지므로!&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class SocialPlatform(models.Model):
    platform_name = models.CharField(max_length=20, default=0)

    class Meta:
        db_table = &amp;quot;social_platform&amp;quot;

class User(models.Model):
    ....
    social          = models.ForeignKey(SocialPlatform, on_delete=models.CASCADE, max_length=20, blank=True, default=1)
    social_login_id = models.CharField(max_length=50, blank=True)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;소셜로그인을 회원을 구분 지을 수 있는 것은 소셜플랫폼 회사에서 제공하는 ‘id’이다.&lt;/li&gt;
&lt;li&gt;‘id’가 예를들어 facebook id와 google id에서 겹칠 수 있는 문제가 발생한다. 그래서 소셜 플랫폼 제공하는 회사 코드도 만들어서 회사코드와 id로 소셜로그인 유저를 구분할 수 있게 된다.&lt;/li&gt;
&lt;li&gt;소셜로그인의 가장 큰 핵심은 소셜로그인한 회원을 서비스 페이지에서 어떻게 구별할 것인가의 문제이다&lt;/li&gt;
&lt;li&gt;실제 예제로 카카오를 예로 들어 설명한다.(나머지 소셜로그인도 비슷하게 진행된다.)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;실제-소셜-로그인-예제카카오&quot;&gt;&lt;a href=&quot;#%EC%8B%A4%EC%A0%9C-%EC%86%8C%EC%85%9C-%EB%A1%9C%EA%B7%B8%EC%9D%B8-%EC%98%88%EC%A0%9C%EC%B9%B4%EC%B9%B4%EC%98%A4&quot; aria-label=&quot;실제 소셜 로그인 예제카카오 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;실제 소셜 로그인 예제(카카오)&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class KakaoSigninView(View):
   def post(self, request):
       kakao_token  = request.headers[&amp;quot;Authorization&amp;quot;]
       # request의 header에 bearer(암호화 되지 않는 토큰)형식으로 토큰을 프론트에서 받는다.
       if not kakao_token:
           return JsonResponse({&amp;quot;MESSAGE&amp;quot; : &amp;quot;INVALID_KAKAO_TOKEN&amp;quot;}, status=400)

       headers      = ({&amp;#39;Authorization&amp;#39; : f&amp;quot;Bearer {kakao_token}&amp;quot;})
       url          = &amp;quot;https://kapi.kakao.com/v1/user/me&amp;quot;
       response     = requests.post(url, headers=headers, timeout=2) # header에서 프론트에서 받는 토큰과 정보를 요청할 api url주소를 통해 requests.post로 요청함

       user_data    = response.json()
       try:
           if User.objects.filter(social_login_id=user_data[&amp;#39;id&amp;#39;]).exists(): # 소셜id는 소셜플랫폼회사에서 회원을 식별하는 주식별자이다. 이게 있다면 이 소셜플랫폼으로 회원가입하고 로그인을 적어도 1번 이상 했다는 얘기 --&amp;gt; 로그인 로직 구현
               user = User.objects.get(social_login_id=user_data[&amp;#39;id&amp;#39;])
               payload = {
                   &amp;quot;user_id&amp;quot;       : user.id,
                   &amp;quot;kakao_id&amp;quot;      : user.social_login_id,
                   &amp;quot;user_is_maker&amp;quot; : user.is_maker,
                   &amp;quot;exp&amp;quot;           : WEDIZ_SECRET[&amp;#39;exp_time&amp;#39;]
                   }
               jwt_encode = jwt.encode(payload, WEDIZ_SECRET[&amp;#39;secret&amp;#39;], algorithm=&amp;quot;HS256&amp;quot;) # 카카오에서 받은 토큰으로 사용자를 인증하고 홈페이지에서 사용할 엑세스토큰을 자체 발급한다.
               return JsonResponse({&amp;quot;VALID_TOKEN&amp;quot; : jwt_encode.decode(&amp;#39;utf-8&amp;#39;)} , status=200)
           else: # 한 번도 이 소셜플랫폼으로 로그인 한적이 없는 경우 회원가입 로직을 구현한 후 곧바로 로그인 까지 구현함
               signup_user = User.objects.create(
                   email     = user_data[&amp;#39;kakao_account&amp;#39;][&amp;#39;email&amp;#39;],
                   social    = SocialPlatform.objects.get(id=2).id,#카카오 id가 2
                   social_login_id = user_data[&amp;#39;id&amp;#39;]
                   )
               payload = {
                   &amp;quot;user_id&amp;quot;       : signup_user.id,
                   &amp;quot;kakao_id&amp;quot;      : signup_user.social_login_id,
                   &amp;quot;user_is_maker&amp;quot; : signup_user.is_maker,
                   &amp;quot;exp&amp;quot;           : WEDIZ_SECRET[&amp;#39;exp_time&amp;#39;]
                   } # 로그인 로직
               jwt_encode = jwt.encode(payload, WEDIZ_SECRET[&amp;#39;secret&amp;#39;], algorithm=&amp;quot;HS256&amp;quot;)
               return JsonResponse({&amp;quot;VALID_TOKEN&amp;quot; : jwt_encode.decode(&amp;#39;utf-8&amp;#39;)}, status=200)
       except ValueError:
           return JsonResponse({&amp;quot;MESSAGE&amp;quot; : &amp;quot;INVALID_EMAIL&amp;quot;}, status=401)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;request의 header에 bearer(암호화 되지 않는 토큰)형식으로 토큰을 프론트에서 받는다.&lt;/li&gt;
&lt;li&gt;header에 ‘authorization’ 키에 value를 프론트에 받는 토큰을 실어서 회원정보를 요청할 api url주소를 통해서 requests.post방식으로 카카오 api 서버에 요청함&lt;/li&gt;
&lt;li&gt;소셜id는 소셜플랫폼회사에서 회원을 식별하는 주식별자이다. 이게 있다면 이 소셜플랫폼으로 회원가입하고 로그인을 적어도 1번 이상 했다는 얘기 —&gt; 로그인 로직 구현&lt;/li&gt;
&lt;li&gt;카카오에서 받은 토큰으로 사용자를 인증하고 홈페이지에서 사용할 엑세스토큰을 자체 발급한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;카카오 response key / value&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
  &amp;quot;id&amp;quot;:123456789,
  &amp;quot;properties&amp;quot;:{
     &amp;quot;nickname&amp;quot;:&amp;quot;홍길동카톡&amp;quot;,
     &amp;quot;thumbnail_image&amp;quot;:&amp;quot;http://xxx.kakao.co.kr/.../aaa.jpg&amp;quot;,
     &amp;quot;profile_image&amp;quot;:&amp;quot;http://xxx.kakao.co.kr/.../bbb.jpg&amp;quot;,
     &amp;quot;custom_field1&amp;quot;:&amp;quot;23&amp;quot;,
     &amp;quot;custom_field2&amp;quot;:&amp;quot;여&amp;quot;
     ...
  },
  &amp;quot;kakao_account&amp;quot;: {
    &amp;quot;profile_needs_agreement&amp;quot;: false,
    &amp;quot;profile&amp;quot;: {
      &amp;quot;nickname&amp;quot;: &amp;quot;홍길동&amp;quot;,
      &amp;quot;thumbnail_image_url&amp;quot;: &amp;quot;http://yyy.kakao.com/.../img_110x110.jpg&amp;quot;,
      &amp;quot;profile_image_url&amp;quot;: &amp;quot;http://yyy.kakao.com/dn/.../img_640x640.jpg&amp;quot;
    },
    &amp;quot;email_needs_agreement&amp;quot;:false,
    &amp;quot;is_email_valid&amp;quot;: true,
    &amp;quot;is_email_verified&amp;quot;: true,
    &amp;quot;email&amp;quot;: &amp;quot;xxxxxxx@xxxxx.com&amp;quot;
    &amp;quot;age_range_needs_agreement&amp;quot;:false,
    &amp;quot;age_range&amp;quot;:&amp;quot;20~29&amp;quot;,
    &amp;quot;birthday_needs_agreement&amp;quot;:false,
    &amp;quot;birthday&amp;quot;:&amp;quot;1130&amp;quot;,
    &amp;quot;gender_needs_agreement&amp;quot;:false,
    &amp;quot;gender&amp;quot;:&amp;quot;female&amp;quot;
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;“is&lt;em&gt;email&lt;/em&gt;valid”: true - 카카오의 이메일이 유효한것인지 알려주는 값(유효하지 않을 수도 있다.) —&gt; 이걸 담보하기 위해서 이메일 검증 방법을 쓰기도 한다. 그건 다음에 살펴보도록 한다.&lt;/li&gt;
&lt;li&gt;“is&lt;em&gt;email&lt;/em&gt;verified”: true - 카카오에서 인증된 이메일을 판별하는 인자&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;email&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;사용자 카카오계정의 이메일&lt;/li&gt;
&lt;li&gt;카카오계정 이메일은 변경될 수 있습니다.&lt;/li&gt;
&lt;li&gt;이메일 개인정보 제공동의를 하지 않은 사용자의 이메일은 제공되지 않습니다. email&lt;em&gt;needs&lt;/em&gt;agreement=true인데 email값이 내려오지 않는다면, 사용자의 정보 제공 동의가 필요한 경우입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://wedizstoryimage.s3.ap-northeast-2.amazonaws.com/kakao_email.png&quot; alt=&quot;카카오 로그인 이메일 인증&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;나머지 필요한 정보가 있으면 response 값을 잘 보고 해당 키값을 통해 가져오면 된다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Django View part3]]></title><description><![CDATA[Views Try-Except & django give exceptions]]></description><link>https://ctsictai.github.io//posts/django-part10/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/django-part10/</guid><pubDate>Wed, 11 Dec 2019 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;exception-handling&quot;&gt;&lt;a href=&quot;#exception-handling&quot; aria-label=&quot;exception handling permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Exception Handling&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Exception : 정상적인 프로그램 흐름을 중단시키는 에러를 말합니다.&lt;/li&gt;
&lt;li&gt;Exception Handling : 정상적인 프로그램 흐름을 중단하고 주변의 컨텍스트 또는 코드 블록에서 계속하기위한 메커니즘&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;try--except---exception-handling-method&quot;&gt;&lt;a href=&quot;#try--except---exception-handling-method&quot; aria-label=&quot;try  except   exception handling method permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Try / Except - Exception Handling Method&lt;/h1&gt;
&lt;p&gt;try 블록 수행 중 오류가 발생하면 except 블록이 수행된다. 하지만 try 블록에서 오류가 발생하지 않는다면 except 블록은 수행되지 않는다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;try-except 코드 예시&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;try:
    ...
except [발생 오류[as 오류 메시지 변수]]:
    ...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;try finally
finally절은 try문 수행 도중 예외 발생 여부에 상관없이 항상 수행된다. 보통 finally절은 사용한 리소스를 close해야 할 때에 많이 사용한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;f = int(s)
try:
    # 무언가를 수행한다.
finally:
    f.close()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;f변수는 int()함수인데 try문에 어떠한 로직을 실행하고 exception에 관계없이 finally 절에서 f.close()로 로직을 마무리 할 수 있다.&lt;/p&gt;
&lt;h2 id=&quot;여러개의-오류-처리시&quot;&gt;&lt;a href=&quot;#%EC%97%AC%EB%9F%AC%EA%B0%9C%EC%9D%98-%EC%98%A4%EB%A5%98-%EC%B2%98%EB%A6%AC%EC%8B%9C&quot; aria-label=&quot;여러개의 오류 처리시 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;여러개의 오류 처리시&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;try:
    ...
except 발생 오류1:
   ...
except 발생 오류2:
   ...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;실제 코드 예시&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class SigninView(View):
    def post(self, request):
        data = json.loads(request.body)

        try:
            validate_email(data[&amp;quot;email&amp;quot;])
            user_data      = User.objects.get(email=data[&amp;quot;email&amp;quot;])
            user_password  = user_data.password.encode(&amp;#39;utf-8&amp;#39;)
            byted_password = data[&amp;#39;password&amp;#39;].encode(&amp;#39;utf-8&amp;#39;)

            if bcrypt.checkpw(byted_password, user_password):
                payload = {
                        &amp;quot;user_id&amp;quot;       : user_data.id,
                        &amp;quot;user_is_maker&amp;quot; : user_data.is_maker,
                        &amp;quot;exp&amp;quot;           : WEDIZ_SECRET[&amp;#39;exp_time&amp;#39;],
                        }
                jwt_encode = jwt.encode(payload, WEDIZ_SECRET[&amp;#39;secret&amp;#39;], algorithm=&amp;quot;HS256&amp;quot;)
                token = jwt_encode.decode(&amp;quot;utf-8&amp;quot;)
                return JsonResponse({&amp;quot;VALID_TOKEN&amp;quot; : token}, status=200)

            else:
                return JsonResponse({&amp;quot;MESSAGE&amp;quot; : &amp;quot;INVALID_PASSWORD&amp;quot;}, status=401)
        except User.DoesNotExist:
            return JsonResponse({&amp;quot;MESSAGE&amp;quot; : &amp;quot;INVALID_USER&amp;quot;}, status=401)
        except KeyError:
            return JsonResponse({&amp;quot;MESSAGE&amp;quot; : &amp;quot;INVALID_INPUT&amp;quot;}, status=400)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;try - except에서 if문으로 한번 더 binary decision 로직을 구현하였다.&lt;/li&gt;
&lt;li&gt;signin 로직이다. 이메일과 패스워드를 비교하여 일치하는 지 여부를 판별한다.&lt;/li&gt;
&lt;li&gt;except에서는 유저가 존재하지 않는 경우&lt;/li&gt;
&lt;li&gt;jsonresponse에서 key가 잘못된 경우에 예외처리로 처리하였다.&lt;/li&gt;
&lt;li&gt;예외가 2개 이상인 경우 except를 예외 처리 수 만큼 붙여주면 된다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;jsonresponse는 프론트에 http 통신으로 보내는 응답값이므로 json형식에 맞는 body 설정과 status설정을 해줘야 한다. status는 http status code를 뜻한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;except는 예외처리이므로 보통 http status 400번대 에러가 status로 가장 많이 발생한다.&lt;/li&gt;
&lt;li&gt;서비스 상에서는 발생할 수 있는 모든 예외처리를 하는 것이 맞다.
그래서 500번대 에러도 예외처리로 처리하면 좋다&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;예외-발생-시키기&quot;&gt;&lt;a href=&quot;#%EC%98%88%EC%99%B8-%EB%B0%9C%EC%83%9D-%EC%8B%9C%ED%82%A4%EA%B8%B0&quot; aria-label=&quot;예외 발생 시키기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;예외 발생 시키기&lt;/h1&gt;
&lt;p&gt;프로그래밍을 하다 보면 종종 오류를 일부러 발생시켜야 할 경우도 생긴다. 파이썬은 raise 명령어를 사용해 오류를 강제로 발생시킬 수 있다.&lt;/p&gt;
&lt;p&gt;예를 들어 부모 밑에 자식을 무조건 생성하고 싶을 때에 예외를 일부러 발생시켜 자식을 같이 생성하라고 강제할 수 있다. 그 때 개략적으로 코드를 아래와 같이 구성한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Parent:
    def child(self):
        raise NotImplementedError&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;그러면 실제로 자식없는 부모를 생성하면 어떻게 될까?&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Jang(Parent):
    pass

jand = Jang()
jang.child()

Traceback (most recent call last):
  File &amp;quot;...&amp;quot;, line 33, in &amp;lt;module&amp;gt;
    jang.child()
  File &amp;quot;...&amp;quot;, line 26, in fly
    raise NotImplementedError
NotImplementedError&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Parent 클래스에 속해있는 child 함수를 구현하지 않으면 raise를 통해 에러가 도출 되도록 설계되어 있기 때문이다. 에러를 발생시키지 않으려면 child 함수를 구현해야한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;메소드 오버라이딩을 해야한다(상속받는 함수 재구현)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class Jang(Parent):
    def child(self):
        print(&amp;quot;자식입니다&amp;quot;)

jand = Jang()
jang.child()

자식입니다&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;예외이름을-잘-모르는-경우&quot;&gt;&lt;a href=&quot;#%EC%98%88%EC%99%B8%EC%9D%B4%EB%A6%84%EC%9D%84-%EC%9E%98-%EB%AA%A8%EB%A5%B4%EB%8A%94-%EA%B2%BD%EC%9A%B0&quot; aria-label=&quot;예외이름을 잘 모르는 경우 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;예외이름을 잘 모르는 경우&lt;/h1&gt;
&lt;p&gt;장고나 파이썬에서 제공하는 기본적인 예외들이 있다. 이 경우에는 이 예외를 import해서 가져다가 쓰면되지만 이 경우에 해당되지 않거나 초보자는 잘 모를 때가 있다. 그럴 때 쓸 수 있는 방법이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;try:
    test = []
    print(test[0])

except Exception as ex:
    print(&amp;#39;에러가 발생 했습니다&amp;#39;, ex)

    에러가 발생 했습니다 list index out of range&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;최후의 수단으로 어쩔수 없을 때 쓰는 것이 좋다&lt;/li&gt;
&lt;li&gt;왠만한 예외는 장고나 파이썬에서 제공하고 있으므로 import해서 쓰자&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;장고에서-제공하는-예외&quot;&gt;&lt;a href=&quot;#%EC%9E%A5%EA%B3%A0%EC%97%90%EC%84%9C-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%8A%94-%EC%98%88%EC%99%B8&quot; aria-label=&quot;장고에서 제공하는 예외 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;장고에서 제공하는 예외&lt;/h1&gt;
&lt;p&gt;장고의 예외는 django.core.exceptions에서 import 해야한다.&lt;br&gt;
많은 종류가 있지만 제가 생각하기에 사용빈도가 높거나 중요한 것 위주로 리뷰해본다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;from django.core.exceptions import ObjectDoesNotExist, .....&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;1-objectdoesnotexist&quot;&gt;&lt;a href=&quot;#1-objectdoesnotexist&quot; aria-label=&quot;1 objectdoesnotexist permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. ObjectDoesNotExist&lt;/h2&gt;
&lt;p&gt;DoesNotExist 예외 클래스의 기본 클래스이다. ObjectDoesNotExist는 전체 모델에 적용할 수 있는 일반적인 예외처리이다.&lt;/p&gt;
&lt;h2 id=&quot;2-doesnotexist&quot;&gt;&lt;a href=&quot;#2-doesnotexist&quot; aria-label=&quot;2 doesnotexist permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. DoesNotExist&lt;/h2&gt;
&lt;p&gt;ObjectDoesNotExist 자식 클래스로써 특정 클래스에 속성으로 사용되어 진다.&lt;br&gt;
&lt;strong&gt;EX)&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;except User.DoesNotExist:
    return JsonResponse({&amp;quot;MESSAGE&amp;quot; : &amp;quot;YOU_ARE_NOT_USER&amp;quot;}, status=401)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;3-multipleobjectsreturned&quot;&gt;&lt;a href=&quot;#3-multipleobjectsreturned&quot; aria-label=&quot;3 multipleobjectsreturned permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. MultipleObjectsReturned&lt;/h2&gt;
&lt;p&gt;예외 명 그대로 한 개의 쿼리셋 오브젝트가 리턴되야 하는데 다수의 쿼리셋 오브젝트가 리턴될 때 발생되는 예외처리이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;주로 쿼리셋 &lt;strong&gt;get()&lt;/strong&gt; 함수를 사용할 때 발생하는 예외로서 get은 한 개의 쿼리셋 오브젝트를 리턴해야 하는데 2개 이상 리턴되는 경우 예외를 발생시킨다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-improperlyconfigured&quot;&gt;&lt;a href=&quot;#4-improperlyconfigured&quot; aria-label=&quot;4 improperlyconfigured permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. ImproperlyConfigured&lt;/h2&gt;
&lt;p&gt;장고가 어떻게 든 잘못 구성된 경우 예외가 발생 settings.py 부정확하거나 파싱 할 수 있습니다&lt;/p&gt;
&lt;h2 id=&quot;5-validationerror&quot;&gt;&lt;a href=&quot;#5-validationerror&quot; aria-label=&quot;5 validationerror permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. ValidationError&lt;/h2&gt;
&lt;p&gt;ValidationError데이터 형식 모델 필드 유효성 검사를 실패 할 경우 예외가 발생합니다. 자세한 사항은 양식 및 필드 유효성 검증 , 모델 필드 유효성 검증을 참고해야 한다. 다음에 다뤄보도록 하겠다&lt;/p&gt;
&lt;h2 id=&quot;6-transactionmanagementerror&quot;&gt;&lt;a href=&quot;#6-transactionmanagementerror&quot; aria-label=&quot;6 transactionmanagementerror permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. TransactionManagementError&lt;/h2&gt;
&lt;p&gt;데이터 베이스 트랜잭션에 대한 모든 문제에 대해 발생하는 예외로서
&lt;code class=&quot;language-text&quot;&gt;django.db.transaction&lt;/code&gt; 에서 import해야한다.&lt;/p&gt;
&lt;h2 id=&quot;7-데이터베이스예외-중-integrityerror&quot;&gt;&lt;a href=&quot;#7-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%98%88%EC%99%B8-%EC%A4%91-integrityerror&quot; aria-label=&quot;7 데이터베이스예외 중 integrityerror permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. 데이터베이스예외 중 IntegrityError&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;django.db&lt;/code&gt; 에서 import한다.&lt;br&gt;
외래 키 검사 실패, 중복 키 등과 같이 데이터베이스의 관계 무결성에 영향을주는 경우 예외가 발생합니다.&lt;/p&gt;
&lt;h2 id=&quot;7-2-데이터베이스예외-중-programmingerror&quot;&gt;&lt;a href=&quot;#7-2-%EB%8D%B0%EC%9D%B4%ED%84%B0%EB%B2%A0%EC%9D%B4%EC%8A%A4%EC%98%88%EC%99%B8-%EC%A4%91-programmingerror&quot; aria-label=&quot;7 2 데이터베이스예외 중 programmingerror permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7-2. 데이터베이스예외 중 ProgrammingError&lt;/h2&gt;
&lt;p&gt;이 예외는 SQL에 구문 오류가 있거나 테이블을 찾을 수 없는 경우와 같이 프로그래밍 오류에서 발생합니다.&lt;/p&gt;
&lt;h1 id=&quot;python에서-제공하는-예외들&quot;&gt;&lt;a href=&quot;#python%EC%97%90%EC%84%9C-%EC%A0%9C%EA%B3%B5%ED%95%98%EB%8A%94-%EC%98%88%EC%99%B8%EB%93%A4&quot; aria-label=&quot;python에서 제공하는 예외들 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Python에서 제공하는 예외들&lt;/h1&gt;
&lt;h2 id=&quot;1-exception&quot;&gt;&lt;a href=&quot;#1-exception&quot; aria-label=&quot;1 exception permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Exception&lt;/h2&gt;
&lt;p&gt;가장 기본이 되는 예외처리 클래스&lt;br&gt;
모든 시스템 종료 외의 내장 예외는 이 클래스 파생됩니다. 모든 사용자 정의 예외도 이 클래스에서 파생되어야 한다.&lt;/p&gt;
&lt;h2 id=&quot;2-attributeerror&quot;&gt;&lt;a href=&quot;#2-attributeerror&quot; aria-label=&quot;2 attributeerror permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. AttributeError&lt;/h2&gt;
&lt;p&gt;어트리뷰트 참조나 대입이 실패할 때 발생(속성 참조 실패)&lt;br&gt;
보통 view 로직에서 발생한다.&lt;/p&gt;
&lt;h2 id=&quot;3-importerror&quot;&gt;&lt;a href=&quot;#3-importerror&quot; aria-label=&quot;3 importerror permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. ImportError&lt;/h2&gt;
&lt;p&gt;import 문이 모듈을 로드하는 데 문제가 있을 때 발생합니다.&lt;br&gt;
또한 from … import 에서 임포트 하려는 이름을 찾을 수 없을 때도 발생합니다.&lt;/p&gt;
&lt;h2 id=&quot;4-keyerror&quot;&gt;&lt;a href=&quot;#4-keyerror&quot; aria-label=&quot;4 keyerror permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. KeyError&lt;/h2&gt;
&lt;p&gt;매핑 (딕셔너리) 키가 기존 키 집합에서 발견되지 않을 때 발생한다.&lt;/p&gt;
&lt;h2 id=&quot;5-syntaxerror&quot;&gt;&lt;a href=&quot;#5-syntaxerror&quot; aria-label=&quot;5 syntaxerror permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. SyntaxError&lt;/h2&gt;
&lt;p&gt;parser가 문법 오류를 만날 때 발생합니다. import 문에서, 내장 함수 exec() 나 eval() 호출에서, 초기 스크립트나 (대화형으로) 표준 입력을 읽을 때 발생할 수 있습니다.&lt;/p&gt;
&lt;p&gt;세부 사항을 쉽게 확인할 수 있도록, 이 클래스의 인스턴스에는 filename, lineno, offset 및 text 어트리뷰트가 있습니다. 예외 인스턴스의 str()은 메시지만 돌려줍니다.&lt;/p&gt;
&lt;h2 id=&quot;6-typeerror&quot;&gt;&lt;a href=&quot;#6-typeerror&quot; aria-label=&quot;6 typeerror permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. TypeError&lt;/h2&gt;
&lt;p&gt;연산이나 함수가 부적절한 형의 객체에 적용될 때 발생합니다. 연관된 값은 형 불일치에 대한 세부 정보를 제공하는 문자열입니다.&lt;/p&gt;
&lt;p&gt;이 예외는 객체에 시도된 연산이 지원되지 않으며 그럴 의도도 없음을 나타내기 위해 사용자 코드가 발생시킬 수 있습니다. 만약 객체가 주어진 연산을 지원할 의사는 있지만, 아직 구현을 제공하지 않는 경우라면, NotImplementedError 를 발생시키는 것이 적합합니다.&lt;/p&gt;
&lt;p&gt;잘못된 type의 인자를 전달하면 (가령 int 를 기대하는데 list를 전달하기), TypeError 를 일으켜야 합니다. 하지만 잘못된 값을 갖는 인자를 전달하면 (가령 범위를 넘어서는 숫자) ValueError 를 일으켜야 합니다.&lt;/p&gt;
&lt;h2 id=&quot;7-valueerror&quot;&gt;&lt;a href=&quot;#7-valueerror&quot; aria-label=&quot;7 valueerror permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;7. ValueError&lt;/h2&gt;
&lt;p&gt;연산이나 함수가 올바른 형이지만 부적절한 값을 가진 인자를 받았고, 상황이 IndexError 처럼 더 구체적인 예외로 설명되지 않는 경우 발생합니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Binary Search algorithm by python]]></title><description><![CDATA[Search Methodology]]></description><link>https://ctsictai.github.io//posts/CodeAlgorithm/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/CodeAlgorithm/</guid><pubDate>Fri, 06 Dec 2019 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;binary-search&quot;&gt;&lt;a href=&quot;#binary-search&quot; aria-label=&quot;binary search permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Binary Search&lt;/h1&gt;
&lt;p&gt;target을 찾는 방법 중 하나이다.&lt;/p&gt;
&lt;p&gt;가장 쉬운 방법은 list를 처음부터 끝까지 target 값을 찾는 것이다.&lt;/p&gt;
&lt;p&gt;근데 이 방법은 딱 봐도 너무 무식하고 공수가 많이 든다는 것을 알 수 있다.&lt;/p&gt;
&lt;p&gt;그러면 좀 더 효율적으로 할 수 있는 논리적 방법이 없을까??&lt;/p&gt;
&lt;p&gt;많은 찾아야 할 값들 중에서 대강 스캔을 해본 뒤 정말 관계가 없어보이거나 필요없어 보이는 부분을 과감히 제외한다. 그리고 나머지 부분에서 내가원하는 target을 찾는 방법을 쉽게 떠올릴 수 있다.&lt;/p&gt;
&lt;p&gt;일반적으로도 내가 해야되는 수많은 선택지 중에서 일부를 과감히 버리게 된다.&lt;/p&gt;
&lt;p&gt;이걸 단순 논리적으로 접근한 것이 바로 이진탐색(Binary Search)이다.&lt;/p&gt;
&lt;h2 id=&quot;1-이진-탐색이란&quot;&gt;&lt;a href=&quot;#1-%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;1 이진 탐색이란 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 이진 탐색이란?&lt;/h2&gt;
&lt;p&gt;탐색할 리스트의 요소 개수를 절반으로 줄여가면서 탐색을 하는 방법을 말한다.&lt;/p&gt;
&lt;p&gt;다만 이진 탐색(binary search)은 오름 차순으로 정렬된 배열에만 적용할 수 있다는 단점이 있습니다.&lt;/p&gt;
&lt;p&gt;이진 탐색에서 중요한 요소는 low index와 high 혹은 max index와 반을 잘라 낼 수 있는 mid index이다.&lt;/p&gt;
&lt;p&gt;크기가 n 인 리스트 data에서 target 이라는 특정 요소를 찾아낸다고 가정했을 때, 이진 탐색의 절차는 다음과 같다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;low =0, high = n−1 로 초기화 합니다.&lt;/li&gt;
&lt;li&gt;mid 는 (log + high) 를 2 로 나눈 몫으로 결정합니다.&lt;/li&gt;
&lt;li&gt;data[mid] 와 target 이 서로 같으면 목적을 달성했으므로 탐색을 종료합니다.&lt;/li&gt;
&lt;li&gt;만약 target &amp;#x3C; data[mid] 이면 high = mid-1 로 업데이트 한 후, 2번으로 돌아갑니다. 만약 target &gt; data[mid] 라면 low = mid+1 로 업데이트 한 후, 2번으로 돌아갑니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;4번을 자세히 보면 2번으로 계속 되돌아 가는 걸 볼 수 있다, —&gt; 재귀함수를 써야되는 근거가 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;시간복잡도로 이진 탐색을 보면 기존의 일괄탐색은 O(n)인 반면&lt;/li&gt;
&lt;li&gt;이진탐색은 그의 반으로 줄어든다. O(logn)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-재귀함수를-이용한-이진-탐색-알고리즘&quot;&gt;&lt;a href=&quot;#2-%EC%9E%AC%EA%B7%80%ED%95%A8%EC%88%98%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%9D%B4%EC%A7%84-%ED%83%90%EC%83%89-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot; aria-label=&quot;2 재귀함수를 이용한 이진 탐색 알고리즘 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 재귀함수를 이용한 이진 탐색 알고리즘&lt;/h2&gt;
&lt;p&gt;위에서 보았듯이 low index와 high index (mid index는 low와 high로 구할 수 있음), 찾을 대상인 list 그리고 찾을 목표 target이 필요한 인자임을 알 수 있다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def search(nums, target, low, high):
    if low &amp;gt; high:
        return False

    mid = (low + high) // 2

    if nums[mid] == target:
        return mid
    elif nums[mid] &amp;lt; target:
        low = mid + 1
    else:
        high = mid - 1
    return search(nums, target, low, high)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;리턴을 search로 해서 계속 재귀하는 함수이고 재귀함수에는 종료조건이 있어야 하는데 그게 바로 첫행에 있는 low&gt;high이다.&lt;/li&gt;
&lt;li&gt;low &gt; high는 반으로 나누고 나누다가 결국 나눌 리스트 값이 존재하지 않는 경우이다. 이런경우 찾는 값이 없는 것이므로 False를 리턴하였다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[SqlAlchemy]]></title><description><![CDATA[Sqlalchemy]]></description><link>https://ctsictai.github.io//posts/sqlalchemy/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/sqlalchemy/</guid><pubDate>Thu, 05 Dec 2019 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;sqlalchemy의-철학&quot;&gt;&lt;a href=&quot;#sqlalchemy%EC%9D%98-%EC%B2%A0%ED%95%99&quot; aria-label=&quot;sqlalchemy의 철학 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SqlAlchemy의 철학&lt;/h1&gt;
&lt;p&gt;SQL 데이터베이스는 크기와 성능이 중요해질수록 개체 컬렉션과 유사하게 동작합니다. 객체 컬렉션은 테이블과 행처럼 동작하지 않으므로 더 추상화가 중요합니다. SQLAlchemy는 이러한 두 가지 원칙을 모두 수용하려고합니다.&lt;/p&gt;
&lt;p&gt;SQLAlchemy는 데이터베이스를 테이블 집합이 아닌 관계형 대수 엔진으로 간주합니다. 행은 테이블뿐만 아니라 조인 및 다른 select 문에서도 선택할 수 있습니다. 이들 유닛 중 어느 것이 더 큰 구조로 구성 될 수있다. SQLAlchemy의 표현식 언어는이 개념을 핵심으로합니다.&lt;/p&gt;
&lt;p&gt;SQLAlchemy는 데이터 매퍼 패턴을 제공하는 선택적 구성 요소 인 ORM (Object-Relational Mapper)으로 가장 유명합니다. 여기서 클래스는 개방형 다중 방식으로 데이터베이스에 매핑 될 수 있으므로 개체 모델 및 데이터베이스 스키마를 처음부터 깨끗하게 분리 된 방식.&lt;/p&gt;
&lt;p&gt;이러한 문제에 대한 SQLAlchemy의 전반적인 접근법은 소위 칭찬 지향적 접근법에 기반한 다른 대부분의 SQL / ORM 도구와 완전히 다릅니다. 자동화 벽 뒤에 SQL 및 객체 관계형 세부 정보를 숨기는 대신 일련의 구성 가능하고 투명한 도구 내에서 모든 프로세스가 완전히 노출됩니다. 라이브러리는 중복 작업을 자동화하는 작업을 수행하는 반면 개발자는 데이터베이스 구성 방법 및 SQL 작성 방법을 제어합니다.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.sqlalchemy.org/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;SQLALCHEMY 공홈 참조&lt;/a&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-설치&quot;&gt;&lt;a href=&quot;#1-%EC%84%A4%EC%B9%98&quot; aria-label=&quot;1 설치 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 설치&lt;/h1&gt;
&lt;p&gt;&lt;code&gt; pip install sqlalchemy&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;2-db-연결&quot;&gt;&lt;a href=&quot;#2-db-%EC%97%B0%EA%B2%B0&quot; aria-label=&quot;2 db 연결 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. DB 연결&lt;/h1&gt;
&lt;p&gt;DB에 연결을 하기 위한 추가 프로그램 설치가 필요하다&lt;/p&gt;
&lt;h2 id=&quot;2-1-dbapi-설치&quot;&gt;&lt;a href=&quot;#2-1-dbapi-%EC%84%A4%EC%B9%98&quot; aria-label=&quot;2 1 dbapi 설치 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2-1. DBAPI 설치&lt;/h2&gt;
&lt;p&gt;DBAPI는 동일한 API를 사용하여 다양한 데이터베이스에서 작동하도록 권장하는 표준입니다.&lt;/p&gt;
&lt;p&gt;MySQL : PyMySQL, MySQL-Connector, CyMySQL, MySQL-Python (default)&lt;/p&gt;
&lt;p&gt;&lt;code&gt; pip install pymysql&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-2-create-engine&quot;&gt;&lt;a href=&quot;#2-2-create-engine&quot; aria-label=&quot;2 2 create engine permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2-2. Create engine&lt;/h2&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;databasespy---settings-file&quot;&gt;&lt;a href=&quot;#databasespy---settings-file&quot; aria-label=&quot;databasespy   settings file permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;databases.py - settings file&lt;/h3&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;from sqlalchemy import create_engine
engine = create_engine(&amp;#39;mysql+pymysql://username:password@localhost/db명&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;엔진을 통해 mysql db 서버와 연결하는 기초 공사를 하는 중이다.
(아직 연결 안됨)&lt;/p&gt;
&lt;h2 id=&quot;2-3-진짜-연결&quot;&gt;&lt;a href=&quot;#2-3-%EC%A7%84%EC%A7%9C-%EC%97%B0%EA%B2%B0&quot; aria-label=&quot;2 3 진짜 연결 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2-3. 진짜 연결&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;from sqlalchemy import create_engine
engine = create_engine(&amp;#39;mysql+pymysql://username:password@localhost/db명&amp;#39;)
engine.connect()

print(engine)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Engine(&amp;#39;mysql+pymysql://username:password@localhost/db명&amp;#39;)&lt;/code&gt;
이 화면이 뜨면 정상 연결이 되었다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;3-매핑-선언&quot;&gt;&lt;a href=&quot;#3-%EB%A7%A4%ED%95%91-%EC%84%A0%EC%96%B8&quot; aria-label=&quot;3 매핑 선언 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 매핑 선언&lt;/h1&gt;
&lt;p&gt;ORM에서는 처음에 데이터베이스 테이블을 생성하고 사용할 수 있도록 설정한 뒤 다음 직접 정의한 클래스에 맵핑을 해야한다.(안 그러면 ORM 명령어가 DB단에 들어가지 않는다)&lt;/p&gt;
&lt;p&gt;sqlalchemy에서는 두가지가 동시에 이뤄지는데 Declarative 란걸 이용해 클래스를 생성하고 실제 디비 테이블에 연결을 한다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;from sqlalchemy.ext.declarative import declarative_base
Base = declarative_base()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;4-실제-모델-테이블-형성&quot;&gt;&lt;a href=&quot;#4-%EC%8B%A4%EC%A0%9C-%EB%AA%A8%EB%8D%B8-%ED%85%8C%EC%9D%B4%EB%B8%94-%ED%98%95%EC%84%B1&quot; aria-label=&quot;4 실제 모델 테이블 형성 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 실제 모델 테이블 형성&lt;/h1&gt;
&lt;blockquote&gt;
&lt;h3 id=&quot;modelspy에서&quot;&gt;&lt;a href=&quot;#modelspy%EC%97%90%EC%84%9C&quot; aria-label=&quot;modelspy에서 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;models.py에서&lt;/h3&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;from sqlalchemy import Column, Integer, String

class User(Base):
    __tablename__ = &amp;#39;users&amp;#39;

    id = Column(Integer, primary_key=True)
    name = Column(String)
    fullname = Column(String)
    password = Column(String)

    def __init__(self, name, fullname, password):
        self.name = name
        self.fullname = fullname
        self.password = password

    def __repr__(self):
        return &amp;quot;&amp;lt;User(&amp;#39;%s&amp;#39;, &amp;#39;%s&amp;#39;, &amp;#39;%s&amp;#39;)&amp;gt;&amp;quot; % (self.name, self.fullname, self.password)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;DB의 필드를 만들려면 직접 컬럼 클래스를 import 해야 한다.&lt;/li&gt;
&lt;li&gt;필드의 타입을 지정하려면 타입에 해당하는 클래스들을 import해야 한다.
(ex) 숫자 타입 이라면 Integer | 문자타입이라면 String etc on..&lt;/li&gt;
&lt;li&gt;위 User 클래스는 &lt;strong&gt;tablename&lt;/strong&gt;에서 정의한 테이블에 네임에 맵핑된다.&lt;/li&gt;
&lt;li&gt;primary key인 id와 name, fullname, password 컬럼을 가진다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;repr&lt;/strong&gt;은 해당 클래스에 대해 string 값으로 대표되는 값을 표현해준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Declarative system으로 만들어진 이 클래스는 table metadata를 가지게 되는데 이게 사용자정의 클래스와 테이블을 연결해주는 구실을 한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;5-세션-이용&quot;&gt;&lt;a href=&quot;#5-%EC%84%B8%EC%85%98-%EC%9D%B4%EC%9A%A9&quot; aria-label=&quot;5 세션 이용 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. 세션 이용&lt;/h1&gt;
&lt;p&gt;ORM은 데이터베이스를 session을 이용해 다룰 수 있는데 처음 앱을 작성할 때 create_engine()과 같은 레벨에서 Session 클래스를 factory 패턴으로 생성할 수 있다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;Base.metadata.create_all(engine)
Session = sessionmaker()
Session.configure(bind=engine)
session = Session()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;1행에서 engine을 통해 메타데이터에 접근함
2행에서 다른 트랜잭션을 위한 것들은 sessionmaker()에서 호출될 때 정의하는 것(자세한 사항은 추후 업뎃)
3행에서 세션에 엔진을 묶어 엔진 실행시 세션클래스에서 새 객체를 만들게 한다
4행에서 Session 클래스 편하게 쓰기 위해 인스턴스화&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Django URL & querystring]]></title><description><![CDATA[django Querystrung URL]]></description><link>https://ctsictai.github.io//posts/django-part9/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/django-part9/</guid><pubDate>Wed, 04 Dec 2019 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;urlspy&quot;&gt;&lt;a href=&quot;#urlspy&quot; aria-label=&quot;urlspy permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;urls.py&lt;/h1&gt;
&lt;p&gt;웹 환경에서 url 주소를 설정하는 것.
프론트엔드와 접점이 일어나는 시작점&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;용어 정리&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;URI – Uniform Resource Indentifier – URL + URN(Uniform Resource Name)&lt;/li&gt;
&lt;li&gt;URL – Uniform Resource Locator – 웹프로그래밍에선 URI = URL로 쓰임&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;url관리
장고의 앱별로 별도 관리를 하고 최종 url은 프로젝트 디렉토리 내의 url에서 처리한다.&lt;/li&gt;
&lt;li&gt;앱 별로 관리 함으로써 앱별로 url을 views.py와 연계되어 관리하기가 더 수월하다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 때 쓰이는 게 include()이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;urlpatterns = [
    path(&amp;#39;account/&amp;#39;, include(&amp;#39;account.urls&amp;#39;)),
    path(&amp;#39;statistics/&amp;#39;, include(&amp;#39;statistics.urls&amp;#39;)),
]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;include()를 씀으로 로직이 있는 앱에 있는 url에 실제 주소가 저장 되어 있는 것을 가져다가 쓸 수 있다.&lt;/p&gt;
&lt;h3 id=&quot;path&quot;&gt;&lt;a href=&quot;#path&quot; aria-label=&quot;path permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;path()&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;django 2.0에서 새롭게 추가된 함수입니다.&lt;/li&gt;
&lt;li&gt;URL경로 상에서 예를 들어 &lt;username&gt;과 같은 꺽쇠괄호가 들어 있는 URL을 인식하여 뷰 함수에 키워드 인자로 전달합니다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;인자 컨버터로 제한하기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;이 번에는 키워드 인자로 전달받는 항목의 타입을 지정할 수 있습니다.&lt;/li&gt;
&lt;li&gt;&amp;#x3C;컨버터:전달할키워드인자명&gt; 이러한 형태로 입력하면 입력받는 데이터를 제한 할 수 있습니다.&lt;/li&gt;
&lt;li&gt;컨버터의 종류와 역할은 다음과 같습니다.&lt;/li&gt;
&lt;li&gt;str : 경로 구분자를 제외한 비어 있지 않은 문자열&lt;/li&gt;
&lt;li&gt;path: 경로 구분자를 포함한 비어 있지 않은 문자열&lt;/li&gt;
&lt;li&gt;int : 0 또는 임의의 양의 정수와 일치합니다.&lt;/li&gt;
&lt;li&gt;slug : 문자 또는 숫자와 하이픈 및 밑줄 문자로 구성된 슬러그 문자열과 일치합니다. 예를 들어, POWER&lt;em&gt;PEARL&lt;/em&gt;OP&lt;/li&gt;
&lt;li&gt;uuid : 형식화 된 UUID를 제공합니다. 여러 URL이 동일한 페이지에 매핑되지 않도록 랜덤 숫자&amp;#x26;문자를 제공한다.&lt;br&gt;
예를 들어 075194d3-6885-417e-a8a8-6c931e272f00과 같습니다. UUID 인스턴스를 반환합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;urlpatterns = [
    path(&amp;#39;&amp;lt;name&amp;gt;/&amp;lt;int:userId&amp;gt;&amp;#39;, SigninView.as_view()),
    path(&amp;#39;&amp;lt;slug:modify_detail&amp;gt;/&amp;lt;int:userId&amp;gt;/&amp;lt;int:year&amp;gt;/&amp;lt;int:month&amp;gt;&amp;#39;, Profile.as_view())
]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;querystring&quot;&gt;&lt;a href=&quot;#querystring&quot; aria-label=&quot;querystring permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Querystring&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;하나의 path(라우터) 에서 경우에 따라 다른 결과를 보여주기 위해서는 쿼리스트링이 사용된다.&lt;/li&gt;
&lt;li&gt;쿼리스트링은 어떤 애플리케이션에게 정보를 전달할 때 사용되는 URL에 약속되어 있는 국제적인 표준&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://wayhome25.github.io/assets/post-img/nodejs/querystring.png&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;url에서 ? 다음 부분&lt;/li&gt;
&lt;li&gt;변수=값&amp;#x26;변수=값&amp;#x26;변수=값 … 의 형식&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;예시&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://example.com/over/there?name=ferret&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://example.com/over/there?name=ferret&lt;/a&gt; —&gt; name=ferret&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://en.wikipedia.org/w/index.php?title=Main_page&amp;#x26;action=raw&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://en.wikipedia.org/w/index.php?title=Main_page&amp;#x26;action=raw&lt;/a&gt; —&gt; title=Main_page&amp;#x26;action=raw&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://example.com/rising/?page=123&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;http://example.com/rising/?page=123&lt;/a&gt; —&gt; pagination 123개 표현&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Django View part2]]></title><description><![CDATA[django QuerySet CRUD View logic]]></description><link>https://ctsictai.github.io//posts/django-part8/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/django-part8/</guid><pubDate>Tue, 03 Dec 2019 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;queryset이란&quot;&gt;&lt;a href=&quot;#queryset%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;queryset이란 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;QuerySet이란?&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;SQL을 생성해주는 인터페이스이다.&lt;/li&gt;
&lt;li&gt;Django ORM에 의해 queryset을 통해 별도로 SQL문을 작성할 필요없이 DB로 부터 데이터를 가져오고 추가, 수정, 삭제가 가능하다&lt;/li&gt;
&lt;li&gt;LAZY한 특성을 가지고 있다. 미리 db에 접근해서 값을 불러오는 게 아니라 출력 등과 같이 필요한 순간에 sql로 매핑되어서 db에 접근하는 방식이다.&lt;/li&gt;
&lt;li&gt;queryset으로 반환되는것은 values를 제외하고는 object로 반환된다&lt;/li&gt;
&lt;li&gt;여기서 object란 db의 table의 row라고 보면 된다.&lt;/li&gt;
&lt;li&gt;row란 pk(보통 장고에서 자동부여한다) 1행에 있는 모든 데이터들이 다 반환 된다. 이게 object의 실체 dict type이 아니기 때문에 반환이 필요함&lt;/li&gt;
&lt;li&gt;‘key’(입력한 필드명으로) : value(comment.필드명- 실제 레코드값이 반환됨)&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;for item in items:
	context = { key1 : value1
                key2 : value2
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;crud&quot;&gt;&lt;a href=&quot;#crud&quot; aria-label=&quot;crud permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CRUD&lt;/h1&gt;
&lt;p&gt;Create Read Update Delete의 약자로서 웹 서비스의 기본 기능이다. 가장 중요한 것은 create와 read이며 update는 create의 하위호환 delete는 왠만하면 안하는 것이 정석이다.&lt;/p&gt;
&lt;h1 id=&quot;read데이터-조회&quot;&gt;&lt;a href=&quot;#read%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A1%B0%ED%9A%8C&quot; aria-label=&quot;read데이터 조회 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;READ(데이터 조회)&lt;/h1&gt;
&lt;h2 id=&quot;modelsobjectsfilter&quot;&gt;&lt;a href=&quot;#modelsobjectsfilter&quot; aria-label=&quot;modelsobjectsfilter permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;models.objects.Filter()&lt;/h2&gt;
&lt;h2 id=&quot;and-조건&quot;&gt;&lt;a href=&quot;#and-%EC%A1%B0%EA%B1%B4&quot; aria-label=&quot;and 조건 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;And 조건&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;queryset = 모델클래스명.objects.all()
queryset = queryset.filter(조건필드1=조건값1, 조건필드2=조건값2)
queryset = queryset.filter(조건필드3=조건값3)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;for model_instance in queryset:
    print(model_instance)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;화면에 출력할 때 DB에 쿼리 (lazy)
필터는 queryset object가 list 형태로 다수가 나오므로 for문으로 하나씩 하나씩 list의 요소를 print하는 방식이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;filter And 조건 예시&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;queryset1 = User.objects.filter(phone_number__icontains=&amp;#39;1&amp;#39;, age__endswith=&amp;#39;3&amp;#39;)
queryset2 = User.objects.filter(phone_number__icontains=&amp;#39;1&amp;#39;).filter(age__endswith=&amp;#39;3&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;icontains는 대문자 무시하고 포함하는 문자를 뜻한다.
&lt;img src=&quot;https://wedizprofile.s3.ap-northeast-2.amazonaws.com/filter.png&quot; alt=&quot;filter 조건&quot;&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;exclude제외-조건&quot;&gt;&lt;a href=&quot;#exclude%EC%A0%9C%EC%99%B8-%EC%A1%B0%EA%B1%B4&quot; aria-label=&quot;exclude제외 조건 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;exclude(제외 조건)&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;User.objects.all().exclude(name__icontains=&amp;#39;cts&amp;#39;)
User.objects.filter(name__icontains=&amp;#39;we&amp;#39;).exclude(phone_number__endswith=&amp;#39;3&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;or-조건&quot;&gt;&lt;a href=&quot;#or-%EC%A1%B0%EA%B1%B4&quot; aria-label=&quot;or 조건 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Or 조건&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;쿼리셋 쿼리셋 두개 or 조건으로 할수도 있음&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;모델클래스명.objects.all().filter(first__startwith=”E”) | 모델클래스명.objects.all().filter(last__endwith=”t”)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Complex lookups with Q objects : or 조건을 사용하기 위해서는 Q 객체 import가 필요하다.&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;from django.db.models import Q

모델클래스명.objects.all().filter(Q(조건필드1=조건값1) | Q(조건필드2=조건값2)) # or 조건
모델클래스명.objects.all().filter(Q(조건필드1=조건값1) &amp;amp; Q(조건필드2=조건값2)) # and 조건&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;모델 클래스의 오브젝트 갯수확인&lt;br&gt;
&lt;code&gt;User.objects.all().count()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;filter를 통한 검색 구현 예시&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;HTTP GET Method
Stat_champions.objects.filter(date__lt=date.today()).exists():
               stat_list = [{
                   &amp;quot;id&amp;quot;                : stat[&amp;#39;id&amp;#39;],
                   &amp;quot;rank&amp;quot;              : stat[&amp;#39;rank&amp;#39;],
                   &amp;quot;winRate&amp;quot;           : stat[&amp;#39;win_rates&amp;#39;],
                   &amp;quot;playCount&amp;quot;         : stat[&amp;#39;player_numbers&amp;#39;],
                   &amp;quot;averageScore&amp;quot;      : stat[&amp;#39;kda&amp;#39;],
                   &amp;quot;csScore&amp;quot;           : stat[&amp;#39;cs_average&amp;#39;],
                   &amp;quot;goldScore&amp;quot;         : stat[&amp;#39;gold_average&amp;#39;],
                   &amp;quot;date&amp;quot;              : stat[&amp;#39;date&amp;#39;],
                   &amp;quot;championImgSrc&amp;quot;    : [{
                       &amp;quot;champion_img_src&amp;quot; : champions_id[&amp;#39;champion_img_src&amp;#39;]
                       } for champions_id in Champions.objects.filter(id=stat[&amp;#39;champions_id&amp;#39;]).values()],
                   &amp;quot;championName&amp;quot;      : [{
                       &amp;quot;champion_name&amp;quot; : champions_id[&amp;#39;champion_name&amp;#39;]
                       } for champions_id in Champions.objects.filter(id=stat[&amp;quot;champions_id&amp;quot;]).values()],
                   } for stat in Stat_champions.objects.filter(date=Stat_champions.objects.order_by(&amp;#39;date&amp;#39;).last().date).values()
                   ]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;list comprehension을 이용하였다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;date**lt=date.today() - date 필드의 **lt(less than) date.today()(오늘 날짜 datetime object)라는 뜻&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;date field의 날짜 &amp;#x3C; 오늘날짜인 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;id=stat[‘champions_id’] - id가 stat element의 champion_id와 일치하는 경우&lt;/li&gt;
&lt;li&gt;date=Stat&lt;em&gt;champions.objects.order&lt;/em&gt;by(‘date’).last().date - 날짜가 stat&lt;em&gt;champions에서 date로 order&lt;/em&gt;by 정렬하고 그 중에서 last는 가장 끝 row의 date인 경우를 뜻한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;ordering&quot;&gt;&lt;a href=&quot;#ordering&quot; aria-label=&quot;ordering permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ordering&lt;/h2&gt;
&lt;p&gt;queryset의 기본 정렬은 모델 클래스 내부의 Meta.ordering 설정을 따른다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class User(models.Model):
  ....
  class Meta:
    ordering = [&amp;#39;-id&amp;#39;]
    # id 필드 기준 내림차순 정렬, 미지정시 임의 정렬&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;모델 Meta.ordering 을 무시하고 직접 정렬조건 지정도 가능하다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;queryset = queryset.order_by(&amp;#39;field1&amp;#39;) # 지정 필드 오름차순 요청
queryset = queryset.order_by(&amp;#39;-field1&amp;#39;) # 지정 필드 내림차순 요청
queryset = queryset.order_by(&amp;#39;field2&amp;#39;, &amp;#39;field3&amp;#39;) # 1차기준, 2차기준&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;slicing범위-조건&quot;&gt;&lt;a href=&quot;#slicing%EB%B2%94%EC%9C%84-%EC%A1%B0%EA%B1%B4&quot; aria-label=&quot;slicing범위 조건 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;slicing(범위 조건)&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;queryset = queryset[:10] # 현재 queryset에서 처음10개만 가져오는 조건을 추가한 queryset
queryset = queryset[10:20] # 현재 queryset에서 처음10번째부터 20번째까지를 가져오는 조건을 추가한 queryset

# 리스트 슬라이싱과 거의 유사하나, 역순 슬라이싱은 지원하지 않음
queryset = queryset[-10:] # AssertionError 예외 발생

# 이때는 먼저 특정 필드 기준으로 내림차순 정렬을 먼저 수행한 뒤, 슬라이싱
queryset = queryset.order_by(&amp;#39;-id&amp;#39;)[:10]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;get&quot;&gt;&lt;a href=&quot;#get&quot; aria-label=&quot;get permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;GET&lt;/h2&gt;
&lt;p&gt;지정 조건에 맞는 DB data를 fetch하는 개념
해당 조건에 해당되는 데이터가 1개임을 기대&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;0개 : 모델클래스명.DoesNotExist 예외 발생&lt;/li&gt;
&lt;li&gt;1개 : 정상처리&lt;/li&gt;
&lt;li&gt;2개 : 모델클래스명.MultipleObjectsReturned 예외 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;model_instance = queryset.get(id=1)
model_instance = queryset.get(name=&amp;#39;winfor&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;first-last&quot;&gt;&lt;a href=&quot;#first-last&quot; aria-label=&quot;first last permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;first(), last()&lt;/h3&gt;
&lt;p&gt;위에서도 살짝 나왔지만&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;지정 조건 내에서 첫번째/마지막 데이터 Row를 Fetch한다.&lt;/li&gt;
&lt;li&gt;지정 조건에 맞는 데이터 Row가 없더라도, DoesNotExist 예외가 발생하지 않고, None을 반환하는 것이 특징이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;create&quot;&gt;&lt;a href=&quot;#create&quot; aria-label=&quot;create permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CREATE&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;추가시에 필수필드 (필드 정의 시에, blank=True, null=True 혹은 디폴트값이 지정되지 않은 필드) 를 모두 지정해야한다. &lt;strong&gt;IntegrityError&lt;/strong&gt; 발생&lt;/li&gt;
&lt;li&gt;python shell에서 해당 모델의 상세 필드옵션을 확인할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;create 예시&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class User(models.Model):
   email            = models.CharField(max_length=255, unique=True)
   user_name        = models.CharField(max_length=150, null=True, blank=True)
   password         = models.CharField(max_length=300, null=True, blank=True)
   social           = models.ForeignKey(SocialPlatform, on_delete=models.CASCADE, null=True, related_name=&amp;#39;user_social&amp;#39;, default=1)
   social_login_id  = models.CharField(max_length=100, null=True)
   profile_photo    = models.URLField(max_length=500, null=True, blank=True)
   company          = models.CharField(max_length=100, null=True, blank=True)
   company_position = models.CharField(max_length=50, null=True, blank=True)
   university       = models.CharField(max_length=50, null=True, blank=True)
   major            = models.CharField(max_length=50, null=True, blank=True)
   main_address     = models.CharField(max_length=50, null=True, blank=True)
   sub_address      = models.CharField(max_length=50, null=True, blank=True)
   introduction     = models.CharField(max_length=1200, null=True, blank=True)

   class Meta:
       db_table = &amp;#39;users&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol&gt;
&lt;li&gt;Model Instance의 save함수를 통해 저장&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def post(self, request):
    data = json.loads(request.body)
    login_user = User.object.get(id=data[&amp;#39;id&amp;#39;])

    login_user.company          = data[&amp;#39;company&amp;#39;]
    login_user.company_position = data[&amp;#39;company_position&amp;#39;]
    login_user.university       = data[&amp;#39;university&amp;#39;]
    login_user.major            = data[&amp;#39;major&amp;#39;]
    login_user.main_address     = data[&amp;#39;main_address&amp;#39;]
    login_user.sub_address      = data[&amp;#39;sub_address&amp;#39;]
    login_user.introduction     = data[&amp;#39;introduction&amp;#39;]
    login_user.save()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;Model manager의 create 함수를 통해 저장&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def post(self, request):
    data = json.loads(request.body)
    login_user = User.object.get(id=data[&amp;#39;id&amp;#39;])
    User.objects.create(
      login_user.company          = data[&amp;#39;company&amp;#39;],
      login_user.company_position = data[&amp;#39;company_position&amp;#39;],
      login_user.university       = data[&amp;#39;university&amp;#39;],
      login_user.major            = data[&amp;#39;major&amp;#39;],
      login_user.main_address     = data[&amp;#39;main_address&amp;#39;],
      login_user.sub_address      = data[&amp;#39;sub_address&amp;#39;],
      login_user.introduction     = data[&amp;#39;introduction&amp;#39;]
    )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;update수정&quot;&gt;&lt;a href=&quot;#update%EC%88%98%EC%A0%95&quot; aria-label=&quot;update수정 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;UPDATE(수정)&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;Model Instance 속성을 변경하고, save 함수를 통해 저장(create와 같으므로 위의 코드를 참고한다)&lt;/li&gt;
&lt;li&gt;update 함수에 업데이트할 속성값을 지정하여 일괄 수정&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;update_data = User.object.all()
update_data.update(introduction=&amp;#39;preview&amp;#39;) # 일괄 update&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;delete&quot;&gt;&lt;a href=&quot;#delete&quot; aria-label=&quot;delete permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Delete&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;주의 사항 : 데이터를 지우는 것은 언제나 신중해야 한다. 그래서 보통 data를 delete하기 보다는 data를 GET이나 POST를 하지 못하도록 정지 관리를 하게 된다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;Model Instance의 delete 함수를 호출하여 삭제
user&lt;em&gt;instance = User.object.get(id=23)
user&lt;/em&gt;instance.delete()&lt;/li&gt;
&lt;li&gt;QuerySet의 delete 함수를 호출하여, 관련 데이터를 삭제&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;user = User.object.all()
user.delete() # 일괄 data delete&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Django View]]></title><description><![CDATA[django controller views.py description]]></description><link>https://ctsictai.github.io//posts/django-part7/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/django-part7/</guid><pubDate>Sun, 01 Dec 2019 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;제너릭-뷰를-이용한-view-point-개발--cbvclass-based-view&quot;&gt;&lt;a href=&quot;#%EC%A0%9C%EB%84%88%EB%A6%AD-%EB%B7%B0%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-view-point-%EA%B0%9C%EB%B0%9C--cbvclass-based-view&quot; aria-label=&quot;제너릭 뷰를 이용한 view point 개발  cbvclass based view permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;제너릭 뷰를 이용한 view point 개발 – CBV(Class Based View)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;클래스형 뷰는 상속과 믹스인 기능을 이용하여 코드 재사용하고 뷰를 체계적으로 구성할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;장점&lt;/li&gt;
&lt;li&gt;GET, POST등의 HTTP 메소드에 따른 처리 기능을 코딩할 때 if함수를
사용하지 않고 메소드명으로 구분할 수 있으므로 코드의 구조가 깔끔해짐.&lt;/li&gt;
&lt;li&gt;다중 상속과 같은 객체 지향 기술이 가능하므로, 클래스형 제너릭 뷰 및 믹스인 클래스 등을 사용할 수 있고, 이는 코드 재사용성(오버라이딩)이나 개발 생산성을 획기적으로 높여줌&lt;/li&gt;
&lt;li&gt;As_view() 진입 메소드&lt;br&gt;
Urlconf(URLconfiguration) -장고에서 URL과 일치하는 뷰를 찾기 위한 패턴들의 집합 – urls하고 그걸 구현할 로직인 views하고 매개하는 것&lt;br&gt;
클래스 인스턴스를 생성하고, 그 인스턴스의 dispatch()메소드 호출 -&gt; dispatch 메소드는 요청을 검사해서 GET, POST등의 어떤 HTTP메소드로 요청 되었는지 알아내고, 인스턴스 내에서 해당 이름을 갖는 메소드로 요청을 중계함 (http header method 판별하는 메서드 중요하다!!) 해당 메서드가 정의되어 있지 않으면, HttpResponseNotAllowed 예외를 발생&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;fbvfunction-based-view&quot;&gt;&lt;a href=&quot;#fbvfunction-based-view&quot; aria-label=&quot;fbvfunction based view permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FBV(Function Based View)&lt;/h1&gt;
&lt;p&gt;뷰를 클래스가 아닌 함수 단위에서 정의하는 것을 뜻한다.
CBV에서 가장 큰 차이는 As_view()가 없기 때문에 직접 request.method를 통해서 요청을 처리해야 한다.&lt;/p&gt;
&lt;h1 id=&quot;jsonresponse&quot;&gt;&lt;a href=&quot;#jsonresponse&quot; aria-label=&quot;jsonresponse permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;JsonResponse&lt;/h1&gt;
&lt;p&gt;응답형식을 json data type으로 한다.
Jsonresponse는 import가 필요하다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;from django.http import JsonResponse&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;return JsonResponse({“wdw” : search_user_data}, safe=False, status=200)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;default content-type : application/json&lt;/li&gt;
&lt;li&gt;param data : data는 json type이여야 한다.(python의 dict type) - 실제로 response로 보낸다.&lt;/li&gt;
&lt;li&gt;param safe : dict type object가 serialized가 되는 조건을  
default 값은 True 세팅 = non-dict면 typeerror return&lt;/li&gt;
&lt;li&gt;status = http status상태 코드 지정 하는것&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;모델 만들고 views 만들고 urls 연결해주고 jsonresponse를 통해 무언가를 응답 리턴값을 주면 그걸 곧바로 서버에 띄워 볼 수 있다.&lt;/p&gt;
&lt;h1 id=&quot;httpie-서버테스트-할-수-있는-프로그램&quot;&gt;&lt;a href=&quot;#httpie-%EC%84%9C%EB%B2%84%ED%85%8C%EC%8A%A4%ED%8A%B8-%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8A%94-%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%A8&quot; aria-label=&quot;httpie 서버테스트 할 수 있는 프로그램 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HTTPIE (서버테스트 할 수 있는 프로그램)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Intergration test를 할 수 있는 프로그램.&lt;/li&gt;
&lt;li&gt;인스톨
&lt;code class=&quot;language-text&quot;&gt;python get-pip.py&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;http [flags][method] URL [ITEM [ITEM]]&lt;br&gt;
•   flags : 실행시 전달할 옵션으로 – 로 시작(Ex: —json)&lt;br&gt;
•   METHOD : HTTP 메소드로 생략시 GET.&lt;br&gt;
•   URL: 연결할 url&lt;br&gt;
http —help 를 실행하면 각 플래그별 상세한 설명을 볼 수 있음.&lt;/p&gt;
&lt;h1 id=&quot;실제-cbv-예시&quot;&gt;&lt;a href=&quot;#%EC%8B%A4%EC%A0%9C-cbv-%EC%98%88%EC%8B%9C&quot; aria-label=&quot;실제 cbv 예시 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;실제 CBV 예시&lt;/h1&gt;
&lt;p&gt;회원가입하는 뷰 로직이다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;class SignupView(View):
	def post(self, request):
		user_data =json.loads(request.body)

		try:
			validate_email(user_data[&amp;quot;email&amp;quot;])
			if User.objects.filter(email=user_data[&amp;quot;email&amp;quot;]).exists():
				return JsonResponse({&amp;quot;MESSAGE&amp;quot; : &amp;quot;THIS_IS_EMAIL_ALREADY_EXIST&amp;quot;}, status=400)
			else:
				byted_password  = bytes(user_data[&amp;quot;password&amp;quot;], encoding=&amp;#39;utf-8&amp;#39;)
				hashed_password = bcrypt.hashpw(byted_password, bcrypt.gensalt())
				decode_password = hashed_password.decode(&amp;#39;utf-8&amp;#39;)
				user = User.objects.create(
						email        = user_data[&amp;quot;email&amp;quot;],
						user_name    = user_data[&amp;quot;user_name&amp;quot;],
						password     = decode_password,
						is_agree     = user_data[&amp;quot;is_agree&amp;quot;],
						promotion    = user_data[&amp;quot;promotion&amp;quot;],
                        phone_number = user_data[&amp;#39;phone_number&amp;#39;],
						is_maker     = False
						)
				default_interest = ProfileInterest.objects.create(
					education_kids       = False,
					fashion_beauty_goods = False,
					home_design_item     = False,
					concert_culture      = False,
					sport_mobility       = False,
					publishing           = False,
					animal               = False,
					tech_home_appliance  = False
				)
				UserGetInterest.objects.create(user=user, profile_interest = default_interest)
				return JsonResponse({&amp;quot;MESSAGE&amp;quot; : &amp;quot;SIGNUP_SUCCESS&amp;quot;}, status=200)

		except ValidationError:
			return JsonResponse({&amp;quot;MESSAGE&amp;quot; : &amp;quot;NOT_EMAIL_FORM&amp;quot;}, status =400)
		except KeyError:
			return JsonResponse({&amp;quot;MESSAGE&amp;quot; : &amp;quot;INVALID_PUT&amp;quot;}, status=400)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;try - exception으로 예외 처리로 에러 처리에 대한 로직을 구현함&lt;/li&gt;
&lt;li&gt;bcrypt라는 암호화 알고리즘을 사용해 password를 보호하기 위한 보안 장치를 사용하였다.&lt;/li&gt;
&lt;li&gt;DB에 필요한 데이터를 받아 저장하였다.&lt;/li&gt;
&lt;li&gt;다 대 다 관계로 묶인 테이블의 default data 지정하고 Join table 생성한다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Django Apprenticeship Study Part.6]]></title><description><![CDATA[Django's handling image file ]]></description><link>https://ctsictai.github.io//posts/django-part6/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/django-part6/</guid><pubDate>Sun, 17 Nov 2019 21:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;django에서-aws_s3에-image-업로드-하는-방법&quot;&gt;&lt;a href=&quot;#django%EC%97%90%EC%84%9C-aws_s3%EC%97%90-image-%EC%97%85%EB%A1%9C%EB%93%9C-%ED%95%98%EB%8A%94-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;django에서 aws_s3에 image 업로드 하는 방법 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Django에서 AWS_S3에 Image 업로드 하는 방법&lt;/h1&gt;
&lt;h2 id=&quot;1aws-iam-user-셋업&quot;&gt;&lt;a href=&quot;#1aws-iam-user-%EC%85%8B%EC%97%85&quot; aria-label=&quot;1aws iam user 셋업 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1.AWS IAM user 셋업&lt;/h2&gt;
&lt;h2 id=&quot;2aws-s3-bucket-셋업&quot;&gt;&lt;a href=&quot;#2aws-s3-bucket-%EC%85%8B%EC%97%85&quot; aria-label=&quot;2aws s3 bucket 셋업 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2.AWS S3 bucket 셋업&lt;/h2&gt;
&lt;h2 id=&quot;3django에서-boto3를-사용하여-s3와-연결-및-파일-업로드&quot;&gt;&lt;a href=&quot;#3django%EC%97%90%EC%84%9C-boto3%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-s3%EC%99%80-%EC%97%B0%EA%B2%B0-%EB%B0%8F-%ED%8C%8C%EC%9D%BC-%EC%97%85%EB%A1%9C%EB%93%9C&quot; aria-label=&quot;3django에서 boto3를 사용하여 s3와 연결 및 파일 업로드 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3.Django에서 boto3를 사용하여 S3와 연결 및 파일 업로드&lt;/h2&gt;
&lt;h1 id=&quot;aws-iam-user-set-up&quot;&gt;&lt;a href=&quot;#aws-iam-user-set-up&quot; aria-label=&quot;aws iam user set up permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;AWS IAM user set up&lt;/h1&gt;
&lt;p&gt;AWS 당연히 회원만 이용할 수 있는 서비스입니다. AWS 회원가입과 로그인을 먼저 하신 후 과정을 하신 후의 프로세스입니다.&lt;/p&gt;
&lt;h2 id=&quot;1-aws에서-iam-페이지로-들어간다&quot;&gt;&lt;a href=&quot;#1-aws%EC%97%90%EC%84%9C-iam-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%A1%9C-%EB%93%A4%EC%96%B4%EA%B0%84%EB%8B%A4&quot; aria-label=&quot;1 aws에서 iam 페이지로 들어간다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. AWS에서 IAM 페이지로 들어간다&lt;/h2&gt;
&lt;p&gt;Find Service에서 IAM을 치고 들어가는 것이 좋다&lt;/p&gt;
&lt;h2 id=&quot;2-iam-resource에서-users-링크를-클릭한다&quot;&gt;&lt;a href=&quot;#2-iam-resource%EC%97%90%EC%84%9C-users-%EB%A7%81%ED%81%AC%EB%A5%BC-%ED%81%B4%EB%A6%AD%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;2 iam resource에서 users 링크를 클릭한다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. IAM resource에서 users 링크를 클릭한다&lt;/h2&gt;
&lt;h2 id=&quot;3-add-user-버튼을-클릭하여-add-user-페이지로-이동&quot;&gt;&lt;a href=&quot;#3-add-user-%EB%B2%84%ED%8A%BC%EC%9D%84-%ED%81%B4%EB%A6%AD%ED%95%98%EC%97%AC-add-user-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%A1%9C-%EC%9D%B4%EB%8F%99&quot; aria-label=&quot;3 add user 버튼을 클릭하여 add user 페이지로 이동 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. ADD user 버튼을 클릭하여 add user 페이지로 이동&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;유저 이름을 입력&lt;/li&gt;
&lt;li&gt;Programmatic Access 항목을 체크한다.&lt;/li&gt;
&lt;li&gt;“AWS management access console” 항목은 체크 하지 않도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-permission-설정-페이지에서-새로운-permission-policy을-추가-하도록-한다&quot;&gt;&lt;a href=&quot;#4-permission-%EC%84%A4%EC%A0%95-%ED%8E%98%EC%9D%B4%EC%A7%80%EC%97%90%EC%84%9C-%EC%83%88%EB%A1%9C%EC%9A%B4-permission-policy%EC%9D%84-%EC%B6%94%EA%B0%80-%ED%95%98%EB%8F%84%EB%A1%9D-%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;4 permission 설정 페이지에서 새로운 permission policy을 추가 하도록 한다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. Permission 설정 페이지에서 새로운 permission policy을 추가 하도록 한다&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;새로운 permission policy를 추가하는 페이지에서 JSON 탭으로 이동해서 다음의 JSON을 입력하도록 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
    &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
    &amp;quot;Statement&amp;quot;: [
        {
            &amp;quot;Sid&amp;quot;: &amp;quot;VisualEditor0&amp;quot;,
            &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
            &amp;quot;Action&amp;quot;: [
                &amp;quot;s3:PutObject&amp;quot;,
                &amp;quot;s3:GetObjectAcl&amp;quot;,
                &amp;quot;s3:GetObject&amp;quot;,
                &amp;quot;s3:ListBucket&amp;quot;,
                &amp;quot;s3:DeleteObject&amp;quot;,
                &amp;quot;s3:PutObjectAcl&amp;quot;
            ],
            &amp;quot;Resource&amp;quot;: [
                &amp;quot;arn:aws:s3:::example-bucket-name/*&amp;quot;,
                &amp;quot;arn:aws:s3:::example-bucket-name&amp;quot;
            ]
        }
    ]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Action에서 put, get, list, delete 항목은 CRUD를 제공하는 action을 명시한다&lt;/li&gt;
&lt;li&gt;example-bucket-name은 부분에서 내가 S3에서 생성할 버킷 이름으로 명시한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;5-permission-policy-페이지로-돌어가서-오른쪽-상단에-있는-refresh-버튼을-클릭하여-리스트를-refresh한-후-방금-만든-policy를-선택한후-next-버튼을-눌른다&quot;&gt;&lt;a href=&quot;#5-permission-policy-%ED%8E%98%EC%9D%B4%EC%A7%80%EB%A1%9C-%EB%8F%8C%EC%96%B4%EA%B0%80%EC%84%9C-%EC%98%A4%EB%A5%B8%EC%AA%BD-%EC%83%81%EB%8B%A8%EC%97%90-%EC%9E%88%EB%8A%94-refresh-%EB%B2%84%ED%8A%BC%EC%9D%84-%ED%81%B4%EB%A6%AD%ED%95%98%EC%97%AC-%EB%A6%AC%EC%8A%A4%ED%8A%B8%EB%A5%BC-refresh%ED%95%9C-%ED%9B%84-%EB%B0%A9%EA%B8%88-%EB%A7%8C%EB%93%A0-policy%EB%A5%BC-%EC%84%A0%ED%83%9D%ED%95%9C%ED%9B%84-next-%EB%B2%84%ED%8A%BC%EC%9D%84-%EB%88%8C%EB%A5%B8%EB%8B%A4&quot; aria-label=&quot;5 permission policy 페이지로 돌어가서 오른쪽 상단에 있는 refresh 버튼을 클릭하여 리스트를 refresh한 후 방금 만든 policy를 선택한후 next 버튼을 눌른다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;5. permission policy 페이지로 돌어가서 오른쪽 상단에 있는 refresh 버튼을 클릭하여 리스트를 refresh한 후 방금 만든 policy를 선택한후 next 버튼을 눌른다.&lt;/h2&gt;
&lt;h2 id=&quot;6-새로운-유저-생성이-완료되면-csv-버튼을-클릭한다&quot;&gt;&lt;a href=&quot;#6-%EC%83%88%EB%A1%9C%EC%9A%B4-%EC%9C%A0%EC%A0%80-%EC%83%9D%EC%84%B1%EC%9D%B4-%EC%99%84%EB%A3%8C%EB%90%98%EB%A9%B4-csv-%EB%B2%84%ED%8A%BC%EC%9D%84-%ED%81%B4%EB%A6%AD%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;6 새로운 유저 생성이 완료되면 csv 버튼을 클릭한다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;6. 새로운 유저 생성이 완료되면 csv 버튼을 클릭한다&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Access Key ID 와 Secret Access Key를 다운 받는다. 지금 다운 받지 않으면 다시 다운 받을 수 없으므로 꼭 다운 받도록 한다&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;aws-s3-bucket-셋업&quot;&gt;&lt;a href=&quot;#aws-s3-bucket-%EC%85%8B%EC%97%85&quot; aria-label=&quot;aws s3 bucket 셋업 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;AWS S3 bucket 셋업&lt;/h1&gt;
&lt;h2 id=&quot;1-aws-s3페이지에서-create-bucket버튼을-클릭-한후-버켓-이름과-region-선택&quot;&gt;&lt;a href=&quot;#1-aws-s3%ED%8E%98%EC%9D%B4%EC%A7%80%EC%97%90%EC%84%9C-create-bucket%EB%B2%84%ED%8A%BC%EC%9D%84-%ED%81%B4%EB%A6%AD-%ED%95%9C%ED%9B%84-%EB%B2%84%EC%BC%93-%EC%9D%B4%EB%A6%84%EA%B3%BC-region-%EC%84%A0%ED%83%9D&quot; aria-label=&quot;1 aws s3페이지에서 create bucket버튼을 클릭 한후 버켓 이름과 region 선택 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. AWS S3페이지에서 “Create bucket”버튼을 클릭 한후 버켓 이름과 region 선택&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;그 다음 페이지 넘어가도 무방하고&lt;/li&gt;
&lt;li&gt;그 다음 페이지(권한 설정)에서 block all public access를 uncheck를 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-버켓-생성-완료-후-설정-페이지에서-상단의-permission-탭에서-bucket-policy-탭을-클릭-후-json을-입력한다&quot;&gt;&lt;a href=&quot;#2-%EB%B2%84%EC%BC%93-%EC%83%9D%EC%84%B1-%EC%99%84%EB%A3%8C-%ED%9B%84-%EC%84%A4%EC%A0%95-%ED%8E%98%EC%9D%B4%EC%A7%80%EC%97%90%EC%84%9C-%EC%83%81%EB%8B%A8%EC%9D%98-permission-%ED%83%AD%EC%97%90%EC%84%9C-bucket-policy-%ED%83%AD%EC%9D%84-%ED%81%B4%EB%A6%AD-%ED%9B%84-json%EC%9D%84-%EC%9E%85%EB%A0%A5%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;2 버켓 생성 완료 후 설정 페이지에서 상단의 permission 탭에서 bucket policy 탭을 클릭 후 json을 입력한다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 버켓 생성 완료 후 설정 페이지에서 상단의 Permission 탭에서 Bucket Policy 탭을 클릭 후 JSON을 입력한다.&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;{
    &amp;quot;Version&amp;quot;: &amp;quot;2012-10-17&amp;quot;,
    &amp;quot;Statement&amp;quot;: [
        {
            &amp;quot;Sid&amp;quot;: &amp;quot;Stmt1507637373230&amp;quot;,
            &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
            &amp;quot;Principal&amp;quot;: {
                &amp;quot;AWS&amp;quot;: &amp;quot;user_arn&amp;quot;
            },
            &amp;quot;Action&amp;quot;: [
                &amp;quot;s3:GetObject&amp;quot;,
                &amp;quot;s3:PutObject&amp;quot;,
                &amp;quot;s3:DeleteObject&amp;quot;
            ],
            &amp;quot;Resource&amp;quot;: &amp;quot;arn:aws:s3:::bucket_name/*&amp;quot;
        },
        {
            &amp;quot;Sid&amp;quot;: &amp;quot;Stmt1507637391106&amp;quot;,
            &amp;quot;Effect&amp;quot;: &amp;quot;Allow&amp;quot;,
            &amp;quot;Principal&amp;quot;: &amp;quot;*&amp;quot;,
            &amp;quot;Action&amp;quot;: &amp;quot;s3:GetObject&amp;quot;,
            &amp;quot;Resource&amp;quot;: &amp;quot;arn:aws:s3:::bucket_name/*&amp;quot;
        }
    ]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;user_arn 설정
IAM user의 ARN을 입력해야한다.
&lt;img src=&quot;https://stackoverflow.com/c/wecode/images/s/5f658489-6b2e-4e64-ba73-9998b0bacb7e.png&quot; alt=&quot;ARN&quot;&gt;&lt;/li&gt;
&lt;li&gt;bucket_name은 각자 생성한 버켓의 이름이다.&lt;/li&gt;
&lt;li&gt;save버튼을 클릭하면 메세지 warning이 뜬다. 아까 버킷 생성이 public access를 줘서 보안 에러가 뜨는 것인데 지금은 무시해도 상관 없다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;3-cors-configurations-설정&quot;&gt;&lt;a href=&quot;#3-cors-configurations-%EC%84%A4%EC%A0%95&quot; aria-label=&quot;3 cors configurations 설정 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. CORS configurations 설정&lt;/h2&gt;
&lt;p&gt;버킷 정책 바로 옆의 버튼인 CORS 구성 버튼을 눌러서 CORS 설정을 해주도록 한다&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;CORSConfiguration xmlns=&amp;quot;http://s3.amazonaws.com/doc/2006-03-01/&amp;quot;&amp;gt;
&amp;lt;CORSRule&amp;gt;
    &amp;lt;AllowedOrigin&amp;gt;*&amp;lt;/AllowedOrigin&amp;gt;
    &amp;lt;AllowedMethod&amp;gt;GET&amp;lt;/AllowedMethod&amp;gt;
    &amp;lt;MaxAgeSeconds&amp;gt;3000&amp;lt;/MaxAgeSeconds&amp;gt;
    &amp;lt;ExposeHeader&amp;gt;ETag&amp;lt;/ExposeHeader&amp;gt;
    &amp;lt;AllowedHeader&amp;gt;*&amp;lt;/AllowedHeader&amp;gt;
&amp;lt;/CORSRule&amp;gt;
&amp;lt;/CORSConfiguration&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;opacity 먹은 글이 텍스트 편집기에 보이는데 그냥 무시하고 위의 내용 복사 붙여넣기 하면 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;django에서-boto3를-사용하여-s3와-연결-및-파일-업로드&quot;&gt;&lt;a href=&quot;#django%EC%97%90%EC%84%9C-boto3%EB%A5%BC-%EC%82%AC%EC%9A%A9%ED%95%98%EC%97%AC-s3%EC%99%80-%EC%97%B0%EA%B2%B0-%EB%B0%8F-%ED%8C%8C%EC%9D%BC-%EC%97%85%EB%A1%9C%EB%93%9C&quot; aria-label=&quot;django에서 boto3를 사용하여 s3와 연결 및 파일 업로드 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Django에서 boto3를 사용하여 S3와 연결 및 파일 업로드&lt;/h1&gt;
&lt;h2 id=&quot;1-boto3-설치&quot;&gt;&lt;a href=&quot;#1-boto3-%EC%84%A4%EC%B9%98&quot; aria-label=&quot;1 boto3 설치 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. boto3 설치&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;pip install boto3&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;AWS와 python과의 연결을 위한 라이브러리이다&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-boto3를-이용한-엔드포인트-만들기&quot;&gt;&lt;a href=&quot;#2-boto3%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-%EC%97%94%EB%93%9C%ED%8F%AC%EC%9D%B8%ED%8A%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;2 boto3를 이용한 엔드포인트 만들기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. boto3를 이용한 엔드포인트 만들기&lt;/h2&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import boto3

class FileView(View):

    s3_client = boto3.client(
        &amp;#39;s3&amp;#39;,
        aws_access_key_id=&amp;quot;AKIASTLUR2MMQHRRSS6M&amp;quot;,
        aws_secret_access_key=&amp;quot;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&amp;quot;
    )

    def post(self, request):
        file = request.FILES[&amp;#39;filename&amp;#39;]

        self.s3_client.upload_fileobj(
            file,
            &amp;quot;s3-test-wecode&amp;quot;,
            file.name,
            ExtraArgs={
                &amp;quot;ContentType&amp;quot;: file.content_type
            }
        )

        return HttpResponse(status= 200)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;aws&lt;em&gt;acces&lt;/em&gt;key&lt;em&gt;id와 aws&lt;/em&gt;secret&lt;em&gt;access&lt;/em&gt;key 값은 IAM user 생성 후 다운 받았던 csv 파일에 나와 있다.&lt;/li&gt;
&lt;li&gt;upload_fileobj 함수의 두번 째 인자는 파일을 업로드 하기 희망하는 버킷이름(내가 방금전에 생성한 버킷)&lt;/li&gt;
&lt;li&gt;장고에서는 전송된 파일이 request.FILES를 통해 전달된다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Data Structure & Algorithm]]></title><description><![CDATA[Data Structure & Algorithm]]></description><link>https://ctsictai.github.io//posts/datastructure/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/datastructure/</guid><pubDate>Sun, 17 Nov 2019 21:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;자료구조와-알고리즘&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%99%80-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98&quot; aria-label=&quot;자료구조와 알고리즘 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자료구조와 알고리즘&lt;/h1&gt;
&lt;p&gt;데이터를 저장하는 스트럭쳐
자료구조를 잘 선택해야 코드의 복잡성을 줄일 수 있다.&lt;/p&gt;
&lt;h1 id=&quot;배열&quot;&gt;&lt;a href=&quot;#%EB%B0%B0%EC%97%B4&quot; aria-label=&quot;배열 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;배열&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;순서가 있는 데이터를 저장할 때 유리&lt;/li&gt;
&lt;li&gt;물리적 주소가 순서대로 저장되는 구조&lt;/li&gt;
&lt;li&gt;메모리를 할당하기 위해 어느정도 빈 물리적 공간을 확보해야 한다.&lt;/li&gt;
&lt;li&gt;시간복잡도 O(N) - 배열의 길이 만큼 찾는 시간이 늘어나는 구조이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/992BD84F5B230A4425&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;자료-액세스-시-주소를-얻는-방식-&quot;&gt;&lt;a href=&quot;#%EC%9E%90%EB%A3%8C-%EC%95%A1%EC%84%B8%EC%8A%A4-%EC%8B%9C-%EC%A3%BC%EC%86%8C%EB%A5%BC-%EC%96%BB%EB%8A%94-%EB%B0%A9%EC%8B%9D-&quot; aria-label=&quot;자료 액세스 시 주소를 얻는 방식  permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;자료 액세스 시 주소를 얻는 방식 :&lt;/h3&gt;
&lt;p&gt;배열의 시작주소 + 자료형의크기×인덱스값의 주소를 액세스&lt;/p&gt;
&lt;p&gt;ex)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;sample[3]의 값을 액세스 하는 경우&lt;/li&gt;
&lt;li&gt;배열의시작주소(1000) + int의크기(4) × 인덱스값(3) = 1012&lt;/li&gt;
&lt;li&gt;1012의 주소에 있는 값 액세스 : 44&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;장점&quot;&gt;&lt;a href=&quot;#%EC%9E%A5%EC%A0%90&quot; aria-label=&quot;장점 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;장점&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;인덱스를 통해 모든 데이터에 직접 액세스하기 때문에 액세스 속도가 빠르다.&lt;/li&gt;
&lt;li&gt;포인터 등 부가적인 정보가 없어 기록 밀도가 1이다.(메타데이터가 없다. - ex) key)&lt;/li&gt;
&lt;li&gt;가장 간단하며 사용하기 쉽다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;단점&quot;&gt;&lt;a href=&quot;#%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;단점 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;단점&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;삽입, 삭제가 어렵다(삽입, 삭제가 어렵기 때문에 삽입삭제가 없는 경우에만 사용한다.)&lt;/li&gt;
&lt;li&gt;중간에 데이터를 삽입하거나 삭제할 경우
뒤의 데이터를 모두 한칸씩 당겨와야 하기 때문에 부하가 많이 걸린다.
(만약 삭제하지 않고 그냥 둔다면 인덱스를 이용한 주소값 계산을 할 수 없기 때문에 자료를 연속된 공간에 두기 위해 이동이 필요함)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;예를들어 위의 예제에서 sample[2]를 삭제하면 그 뒤의 값들을 한칸씩 당겨와야한다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/997BDF375B230ED928&quot;&gt;
&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99B8E5375B230EE732&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;메모리에 종속적이다
연속된 메모리에 저장 되므로 종속적일 수 밖에 없다.&lt;/li&gt;
&lt;li&gt;메모리 사이즈가 부족해진 경우에 큰 공수가 필요하다&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;re-sizing기법 사용&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;- 지금 있는 메모리를 copy한 후 더 큰 빈 메모리 공간을 확보하여 순서대로 자료를 저장하는 방법
- 공수가 매우 많이 필요한 작업이다.
- 이 것 때문에 배열구조를 만들기전에 미리 빈 메모리 공간을 예측하여 확보하는 것이 좋다&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;튜플python&quot;&gt;&lt;a href=&quot;#%ED%8A%9C%ED%94%8Cpython&quot; aria-label=&quot;튜플python permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;튜플(python)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;배열에서와는 다르게 변경이 불가능한 자료구조이다.&lt;/li&gt;
&lt;li&gt;그래서 변경이 없는 좌표 데이터를 나타내기 좋은 자료구조&lt;/li&gt;
&lt;li&gt;배열과 같이 인덱싱 사용 가능하다.&lt;/li&gt;
&lt;li&gt;튜플의 시간복잡도는 배열과 같게 O(N)이다.&lt;/li&gt;
&lt;li&gt;튜플이 없다면 클래스로 선언해서 클래스 호출로 가능(javascript)&lt;/li&gt;
&lt;li&gt;2개 ~ 5개 값을 리턴할 때 사용하기 적절하다.(너무 많으면 오히려 좋지 않다)&lt;/li&gt;
&lt;li&gt;named_tuple - 인덱스에 key값을 줄 수 있음&lt;/li&gt;
&lt;li&gt;test code에 튜플 사용할 수 있으면 좋다&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;set&quot;&gt;&lt;a href=&quot;#set&quot; aria-label=&quot;set permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;set&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;순서가 없다&lt;/li&gt;
&lt;li&gt;중복을 허용하지 않는다&lt;/li&gt;
&lt;li&gt;집합 자료를 표현하는데 적합하다&lt;/li&gt;
&lt;li&gt;시간복잡도 O (log N)&lt;/li&gt;
&lt;li&gt;set 중복을 어떤 로직으로 없앨까???&lt;/li&gt;
&lt;li&gt;값을 치환한다 왜 할까??&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;clss (1,1) == clss(1,1) 는 맞을까?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;클래스는 부모 객체 object가 있어서 아무것도 정해놓지 않으면 부모 클래스인 object를 상속받아서 default 값으로 주소값으로 비교한다.&lt;/li&gt;
&lt;li&gt;그래서 clss (1,1) == clss(1,1) 는 다르다 - 주소값이 다르기 때문에 그래서 문맥상 같다라는 것을 표현하기 위해 클래스의 함수를 정의하여 로직상으로 같게 한다.&lt;/li&gt;
&lt;li&gt;set에서는 특정 값에 대해서 hash 값으로 변환하여 hash값에 맞는 메모리 주소에 할당하기 때문에 특정 값이 중복으로 들어온다면 똑같은 hash 값을 가져서 새로운 값으로 값이 치환된다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Django Apprenticeship Study Part.5]]></title><description><![CDATA[Django basic concept & Database & django orm basic concept/SQL]]></description><link>https://ctsictai.github.io//posts/django-part5/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/django-part5/</guid><pubDate>Wed, 13 Nov 2019 21:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;백엔드의-기본-개념-다시-짚기&quot;&gt;&lt;a href=&quot;#%EB%B0%B1%EC%97%94%EB%93%9C%EC%9D%98-%EA%B8%B0%EB%B3%B8-%EA%B0%9C%EB%85%90-%EB%8B%A4%EC%8B%9C-%EC%A7%9A%EA%B8%B0&quot; aria-label=&quot;백엔드의 기본 개념 다시 짚기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;백엔드의 기본 개념 다시 짚기&lt;/h1&gt;
&lt;p&gt;백엔드 toy 프로젝트도 진행 한 번 해보면서 부족한 점을 많이 느꼈지만 의외로 내가 기초 개념들이 부족하다는 것을 다시 한번 느끼고 정리하고 가려고 한다.&lt;/p&gt;
&lt;h2 id=&quot;백엔드-개발시-주의점&quot;&gt;&lt;a href=&quot;#%EB%B0%B1%EC%97%94%EB%93%9C-%EA%B0%9C%EB%B0%9C%EC%8B%9C-%EC%A3%BC%EC%9D%98%EC%A0%90&quot; aria-label=&quot;백엔드 개발시 주의점 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;백엔드 개발시 주의점&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;프론트 웹페이지에 맞춰지는 개발은 되도록 지양한다. 왜 그럴까?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;프론트 웹 페이지는 유동성이 매우 크다&lt;/li&gt;
&lt;li&gt;당시 한 페이지에서만 기능이 구현되서 범용성이 매우 떨어진다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;백엔드는 데이터 중심이고 데이터를 저장하는 Database 조직하는 모델이 중심이 되어야 한다.&lt;/li&gt;
&lt;li&gt;데이터를 저장하는데 RDBMS을 사용한다면 DB 모델링이 매우 중요하다. 데이터가 어떻게 관계를 맺고 있으며 어떻게 저장해야 정합성있고 논리적인지 생각해야한다. 이걸 하기 위해서 정규화를 제대로 알아야 한다는 생각이 든다.&lt;/li&gt;
&lt;li&gt;데이터를 어떻게 가공하여 프론트앤드에 제공할 것인가? 주로 JSON 형태의 데이터 타입을 제공하지만 그 JSON 형태의 키값은? value의 형식은? - 데이터의 관계성에 따라서&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;장고의-앱은-무엇을-뜻하는가&quot;&gt;&lt;a href=&quot;#%EC%9E%A5%EA%B3%A0%EC%9D%98-%EC%95%B1%EC%9D%80-%EB%AC%B4%EC%97%87%EC%9D%84-%EB%9C%BB%ED%95%98%EB%8A%94%EA%B0%80&quot; aria-label=&quot;장고의 앱은 무엇을 뜻하는가 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;장고의 앱은 무엇을 뜻하는가?&lt;/h2&gt;
&lt;p&gt;하나의 독립적인 컴포넌트라고 보면 된다. 혹은 독립적인 모듈의 하나라고 봐도 된다.&lt;/p&gt;
&lt;h2 id=&quot;그러면-프로젝트란-무엇인가&quot;&gt;&lt;a href=&quot;#%EA%B7%B8%EB%9F%AC%EB%A9%B4-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80&quot; aria-label=&quot;그러면 프로젝트란 무엇인가 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;그러면 프로젝트란 무엇인가?&lt;/h2&gt;
&lt;p&gt;하나의 독립적인 어플리케이션이라고 보면 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로젝트에서 어플리케이션을 개발할 때 필요한 기능 단위인 앱(컴포넌트) 단위로 나누어서 개발하여 개발의 모듈화와 유지보수 관리가 편리하게 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;single-responsibility&quot;&gt;&lt;a href=&quot;#single-responsibility&quot; aria-label=&quot;single responsibility permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Single Responsibility&lt;/h2&gt;
&lt;p&gt;class 나 function을 module화여 최대한 한가지 기능만 구현하도록 코드를 짜는 것을 얘기한다.
그러나 기능이 2개이상인 불가피한 경우가 생기는데(그렇다고 따로 class나 function을 만들기도 애매한 상황) 그럴 때 쓰는 것이 데코레이터다&lt;/p&gt;
&lt;h2 id=&quot;elif는-최대한-피하자&quot;&gt;&lt;a href=&quot;#elif%EB%8A%94-%EC%B5%9C%EB%8C%80%ED%95%9C-%ED%94%BC%ED%95%98%EC%9E%90&quot; aria-label=&quot;elif는 최대한 피하자 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;elif는 최대한 피하자&lt;/h2&gt;
&lt;p&gt;조건문은 최대한 binary하게 나누는 것이 좋다&lt;/p&gt;
&lt;h1 id=&quot;queryset-in-django&quot;&gt;&lt;a href=&quot;#queryset-in-django&quot; aria-label=&quot;queryset in django permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Queryset in django&lt;/h1&gt;
&lt;p&gt;queryset은 database에서 데이터의 집합을 나타내는 것으로 하나의 객체(object)라고 보면 된다. 보통 객체 단위를 한 개의 row라고 보면 된다.&lt;/p&gt;
&lt;h2 id=&quot;selected_related&quot;&gt;&lt;a href=&quot;#selected_related&quot; aria-label=&quot;selected_related permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;selected_related()&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;ForeignKey, OneToOneField 관계에서 활용&lt;/li&gt;
&lt;li&gt;ForeignKey/OneToOneField 관계에서 Lazy하게 쿼리하지 않고, DB단에서 INNER JOIN 으로 쿼리할 수 있다.&lt;/li&gt;
&lt;li&gt;QuerySet 객체를 가져올 때 연관있는 model들을 같이 가져오게 해주는 메서드이다.&lt;/li&gt;
&lt;li&gt;selected_related(‘foreignkey 필드명’)으로 해당 쿼리셋 모델을 가져와 cache한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;prefetch_related&quot;&gt;&lt;a href=&quot;#prefetch_related&quot; aria-label=&quot;prefetch_related permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;prefetch_related()&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;ManyToManyField, ForeignKey의 reverse relation 에서 활용&lt;/li&gt;
&lt;li&gt;각 관계 별로 DB 쿼리를 수행하고, 파이썬 단에서 조인을 수행한다&lt;/li&gt;
&lt;li&gt;QuerySet 객체를 가져올 때 연관있는 model들을 같이 가져오게 해주는 메서드이다.&lt;/li&gt;
&lt;li&gt;prefetch_related(‘manytomany필드명’)으로 해당 쿼리셋 모델을 가져와서 cache&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;objectsbulk_create&quot;&gt;&lt;a href=&quot;#objectsbulk_create&quot; aria-label=&quot;objectsbulk_create permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;objects.bulk_create()&lt;/h2&gt;
&lt;p&gt;일정한 규칙을 가진 obj 다수를 database에 저장할 때 쓰는 구문이다.
bulk_create가 없다면 objects.get()으로 한 개의 row object를 받아와서 for문 돌려서 저장해야하는데 그것을 한 가지 query로 줄일 수 있다.&lt;/p&gt;
&lt;p&gt;일정한 규칙을 가진 다수의 obj(여러개의 row)를 저장할 때 유용하게 사용하자&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Django Apprenticeship Study Part.4]]></title><description><![CDATA[Django tutorial models.py]]></description><link>https://ctsictai.github.io//posts/django-part4/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/django-part4/</guid><pubDate>Sun, 10 Nov 2019 23:30:03 GMT</pubDate><content:encoded>&lt;h2 id=&quot;previously&quot;&gt;&lt;a href=&quot;#previously&quot; aria-label=&quot;previously permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;previously&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;django modeling &amp;#x26; data base&lt;/p&gt;
&lt;h2 id=&quot;커스텀-앱-디텍토리-생성&quot;&gt;&lt;a href=&quot;#%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%95%B1-%EB%94%94%ED%85%8D%ED%86%A0%EB%A6%AC-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;커스텀 앱 디텍토리 생성 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;커스텀 앱 디텍토리 생성&lt;/h2&gt;
&lt;p&gt;☞ python manage.py startapp books ☜ 치면 앱 만들 수 있음&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;단, 해당 프로젝트 디렉토리 안에서 명령어를 쳐야 정상적으로 만들어 진다&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;모델의-구성&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%8D%B8%EC%9D%98-%EA%B5%AC%EC%84%B1&quot; aria-label=&quot;모델의 구성 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모델의 구성&lt;/h1&gt;
&lt;p&gt;각 Field(=column) 인스턴스의 이름이 데이터베이스의 형식에 맞는 데이터베이스 필드의 이름이 된다.(컬럼명) 이 이름을  쿼리 및 탬플릿에서 이를 참조하는 데 쓰인다. 데이터베이스는 컬럼 이름으로 사용하게 됩니다 밑에서 my&lt;em&gt;field&lt;/em&gt;name은 내가 정한 임의의 네임이다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;My_field_name = model.CharField(max_length=20, help_text=&amp;#39;Enter field documentation&amp;#39;)&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;지원하는-모델-필드-타입&quot;&gt;&lt;a href=&quot;#%EC%A7%80%EC%9B%90%ED%95%98%EB%8A%94-%EB%AA%A8%EB%8D%B8-%ED%95%84%EB%93%9C-%ED%83%80%EC%9E%85&quot; aria-label=&quot;지원하는 모델 필드 타입 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;지원하는 모델 필드 타입&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Field type : AutoField, BooleanField, CharField, DateTimeField, FileField, IntegerField, ImageField,TextField&lt;/li&gt;
&lt;li&gt;Relation ship Types : ForeignKey, ManyToManyField, OneToOneField&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;field-optional-argument&quot;&gt;&lt;a href=&quot;#field-optional-argument&quot; aria-label=&quot;field optional argument permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;field optional argument&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;help_text: 위에서 다뤘던 것 처럼, HTML 양식(form)에 대해 텍스트 라벨을 제공합니다 (예시 : 관리자 사이트).&lt;/li&gt;
&lt;li&gt;verbose&lt;em&gt;name: 필드 라벨 안에서 사용되는 인간이 읽을 수 있는 필드 이름입니다. 지정되지 않았다면, 장고가 기본 verbose&lt;/em&gt;name을 필드 이름으로부터 유추합니다.&lt;/li&gt;
&lt;li&gt;default: 필드를 위한 기본값입니다. 이것은 값 또는 호출 가능한 객체일 수 있습니다. 이때 객체는 새로운 레코드가 생성될 때 마다 호출됩니다.&lt;/li&gt;
&lt;li&gt;null: 만약 True라면, 장고는 빈 NULL 값을 필드를 위한 데이터베이스에 저장할 것입니다( CharField 는 대신 빈 문자열을 저장할 것입니다). 기본값은 False입니다.&lt;/li&gt;
&lt;li&gt;blank: 만약 True라면, 필드는 양식(form) 안에서 비워두는 것이 허락됩니다. 기본값은 False이며, 이것은 장고의 양식(form) 검증이 값을 입력하도록 강제한다는 뜻입니다. 이것은 종종  null=True 와 함께 사용됩니다. blank 값을 허락할 때, 데이터베이스에서도 공백값을 적절하게 표시할 수 있어야 하기 때문입니다.&lt;/li&gt;
&lt;li&gt;choices: 필드를 위한 선택들의 모임입니다. 이 인수가 제공된다면, 대응하는 기본 양식(form) 위젯은 표준 텍스트 필드가 아닌 이 선택 항목을 가진 선택 상자입니다.&lt;/li&gt;
&lt;li&gt;primary_key: 만약 True라면, 현재 필드를 모델의 primary key로 설정합니다(primary key는 모든 다른 테이블 레코드들을 고유하게 확인하도록 지정된 특별한 데이터베이스 열입니다). primary key로 지정된 필드가 없다면 장고가 자동적으로 이 목적의 필드를 추가합니다.&lt;/li&gt;
&lt;li&gt;unique : True 인 경우이 필드는 테이블 전체에서 고유해야합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;모델-관리&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%8D%B8-%EA%B4%80%EB%A6%AC&quot; aria-label=&quot;모델 관리 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모델 관리&lt;/h1&gt;
&lt;p&gt;모델 클래스들을 정의한 이후엔 클래스들을 사용해서 레코드들을 생성, 업데이트, 또는 삭제할 수 있고, 모든 레코드 또는 레코드의 특정 하위 집합을 가져오기 위해 쿼리를 실행할 수 있습니다. 튜토리얼에서 뷰를 정의할 때 그 방법을 보여줄 것이지만, 아래에 간략한 요약이 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;레코드의-생성과-수정&quot;&gt;&lt;a href=&quot;#%EB%A0%88%EC%BD%94%EB%93%9C%EC%9D%98-%EC%83%9D%EC%84%B1%EA%B3%BC-%EC%88%98%EC%A0%95&quot; aria-label=&quot;레코드의 생성과 수정 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;레코드의 생성과 수정&lt;/h2&gt;
&lt;p&gt;레코드를 생성하려먼 모델의 인스턴스를 정의하고 save()를 호출할 수 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Create a new record using the model’s constructor.&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;record = MyModelName(my_field_name=&amp;quot;Instance #1&amp;quot;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Save the object into the database.&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;record.save()&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Note: 만약 당신이 어떤 필드도 primary&lt;em&gt;key를 선언하지 않았다면, 새로운 레코드는 자동적으로 id라는 필드 이름을 가진 primary&lt;/em&gt;key 가 주어지게 됩니다. 위의 레코드를 저장한 후 이 id 필드를 쿼리할 수 있는데, 1의 값을 가질 겁니다&lt;/li&gt;
&lt;li&gt;Change record by modifying the fields, then calling save().&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;record.my_field_name = &amp;#39;New Instance Name&amp;#39;
record.save()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;field-types&quot;&gt;&lt;a href=&quot;#field-types&quot; aria-label=&quot;field types permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Field Types&lt;/h1&gt;
&lt;h2 id=&quot;autofield&quot;&gt;&lt;a href=&quot;#autofield&quot; aria-label=&quot;autofield permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;AutoField&lt;/h2&gt;
&lt;p&gt;ID로 사용 가능한 자동으로 증가하는 IntegerField - 보통은 직접 사용할 필요가 없고 장고에서 기본키로 별도로지정하지 않는 다면 다종으로 추가된다.&lt;/p&gt;
&lt;h2 id=&quot;bigautofield&quot;&gt;&lt;a href=&quot;#bigautofield&quot; aria-label=&quot;bigautofield permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;BigAutoField&lt;/h2&gt;
&lt;p&gt;64비트 정수값을 가지는 AutoField이다.&lt;/p&gt;
&lt;h2 id=&quot;charfield&quot;&gt;&lt;a href=&quot;#charfield&quot; aria-label=&quot;charfield permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CharField&lt;/h2&gt;
&lt;p&gt;문자열 data를 저장할 수 있는 문자열 필드이다. option중 &lt;strong&gt;max_length=&lt;/strong&gt;를 지정하여 문자열의 길이를 제한할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;max_length를 통해 유효성 검증 로직을 구현할 수 있다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;게시판의 긴 글을 저장할 때는 TextField를 사용한다.&lt;/p&gt;
&lt;h2 id=&quot;textfield&quot;&gt;&lt;a href=&quot;#textfield&quot; aria-label=&quot;textfield permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;TextField&lt;/h2&gt;
&lt;p&gt;큰 텍스트 필드로서 CharField가 저장하기엔 긴 텍스트 data인 경우에 사용한다. 주로 post의 글을 저장할 때 사용한다.&lt;/p&gt;
&lt;h2 id=&quot;datefield&quot;&gt;&lt;a href=&quot;#datefield&quot; aria-label=&quot;datefield permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DateField&lt;/h2&gt;
&lt;p&gt;python에서 제공하는 날짜를 표현하는 datetime.date 인스턴스에 의해 표현되는 날짜다.&lt;/p&gt;
&lt;p&gt;필수적으로 지정해야하는 option에&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;auto_now : 객체가 저장될 때마다 매번 자동으로 필드를 현재시간이 설정한다. last-modified 타임스탬프로서 유용하다.&lt;br&gt;
model.save()일 때 수정되고 model.update() 때는 반응하지 않는다.&lt;/li&gt;
&lt;li&gt;auto&lt;em&gt;now&lt;/em&gt;add : 객체가 처음 생성 될 때 자동으로 현재시간이 설정된다. 생성의 타임스탬프로 유용함.&lt;br&gt;
기본값을 재정의가 불가능하다.
이 필드의 수정이 필요하다면 auto&lt;em&gt;now&lt;/em&gt;add=True 대신에 - default = today (datetime.date.today()) - default = timezone.now (django.utils.timezone.now())&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;datetimefield&quot;&gt;&lt;a href=&quot;#datetimefield&quot; aria-label=&quot;datetimefield permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DateTimeField&lt;/h2&gt;
&lt;p&gt;위의 DateField에서 datetime.datetime 인스턴스로 표햔되는 날짜와 시간. DateField와 동일한 추가 인수를 가지고 있음&lt;/p&gt;
&lt;h2 id=&quot;decimalfield&quot;&gt;&lt;a href=&quot;#decimalfield&quot; aria-label=&quot;decimalfield permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DecimalField&lt;/h2&gt;
&lt;p&gt;고정소수로 decimal 인스턴스로 나타난다. 두 개의 필수 option&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;max&lt;em&gt;digits : 숫자에 허용되는 최대 자리수. 이 숫자는 decimal&lt;/em&gt;places보다 크거나 같아야 한다.&lt;/li&gt;
&lt;li&gt;decimal_places : 숫자와 함께 저장될 소수 자릿 수.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;이 필드의 기본 폼은 localize 설정이 false면 NumberInput True면 TextInput이다.&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;filefield&quot;&gt;&lt;a href=&quot;#filefield&quot; aria-label=&quot;filefield permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;FileField&lt;/h2&gt;
&lt;p&gt;파일 업로드 필드
primary_key 인수를 지원하지 않고 사용하면 에러 발생&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;upload_to : 업로드 디렉터리와 파일 이름을 설정하는 방법을 제공하고 두 가지 방법을 사용할 수 있다.
문자열 값을 지정하면 strftime() 형식을 포함 할 수 있다. 주어진 디렉터리에 포맷 형식을 업로드 일시로 변경 후 파일이 업로드 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;integerfield&quot;&gt;&lt;a href=&quot;#integerfield&quot; aria-label=&quot;integerfield permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;IntegerField&lt;/h2&gt;
&lt;p&gt;정수 입력 필드. ddjango가 지원하는 모든 데이터베이스에서 -217483648 ~ 214783647 사이의 값은 저장 가능하다&lt;/p&gt;
&lt;h2 id=&quot;bigintegerfield&quot;&gt;&lt;a href=&quot;#bigintegerfield&quot; aria-label=&quot;bigintegerfield permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;BigIntegerField&lt;/h2&gt;
&lt;p&gt;정수 입력 필드이나 IntegerField에서 입력하지 못한 그 밖의 큰 수를 입력해야 할 때 쓰는 필드이다.&lt;/p&gt;
&lt;h2 id=&quot;urlfield&quot;&gt;&lt;a href=&quot;#urlfield&quot; aria-label=&quot;urlfield permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;URLField&lt;/h2&gt;
&lt;p&gt;URL을 위한 CharField이다. default max_length = 200이다.&lt;/p&gt;
&lt;h2 id=&quot;uuidfield&quot;&gt;&lt;a href=&quot;#uuidfield&quot; aria-label=&quot;uuidfield permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;UUIDField&lt;/h2&gt;
&lt;p&gt;Universally Unique Identifiers를 저장하기 위한 필드이다. python UUID클래스를 사용한다.&lt;br&gt;
UUID는 기본키(PK)를 위한 AutoField를 대신하는 좋은 방법이다. 데이터베이스는 UUID를 생성하지 않으므로 기본값 사용을 추천한다.&lt;/p&gt;
&lt;h2 id=&quot;foreignkey&quot;&gt;&lt;a href=&quot;#foreignkey&quot; aria-label=&quot;foreignkey permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;ForeignKey&lt;/h2&gt;
&lt;p&gt;1:N 관계를 정의하는 필드로 참조하려는 주체의 필드에 지정한다.&lt;br&gt;
데이터베이스 인덱스는 자동으로 생성된다. db_index를 false로 설정하여 비활성화시킬 수 있다. 조인보다 일관성을 위한 외래키를 만들거나 부분 또는 다중 컬럼 인덱스 같은 대체인덱스를 만든다면 오버헤드를 피할 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;on_delete&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;models.CASCADE : foreignkeyfield가 바라보는값이 삭제되면 이 모델 인스턴스도 삭제되는 구조&lt;/li&gt;
&lt;li&gt;models.PROTECT : foreignkeyfield가 바라보는값이 삭제되면 이 모델 인스턴스는 삭제가 안되는 구조&lt;/li&gt;
&lt;li&gt;models.NULL : foreignkeyfield가 바라보는값이 삭제되면 이 모델 인스턴스는 NULL로 변환( NULL=True일때만 가능함)&lt;/li&gt;
&lt;li&gt;models.SET_DEFAULT : foreignkeyfield가 바라보는값이 삭제되면 이 모델 인스턴스는 default로 만든다. (default값이 있을 때문 가능)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;related_name&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;관련된 객체에서 이 객체로 돌아올 관계에 사용될 이름이다. 대상모델의 역필터이름에 사용될 이름을 정의하는 것이다.&lt;br&gt;
추상 모델 관계를 정의할 때는 related&lt;em&gt;name을 반드시 설정해야 한다.&lt;br&gt;
django가 뒤에서 관계를 생성하는 것을 원하지 않는 경우 related&lt;/em&gt;name을 ’+‘또는 ’+‘로 끝나도록 설정한다. 역방향 관계를 갖지 않도록 보장한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;to_field&lt;/strong&gt;
관계가 있는 관련 객체의 필드, 기본적으로 django는 관련 객체의 기본키를 사용한다. 다른 필드를 참조하고 싶다면 그 필드는 unique=True여야 한다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;db_constraint&lt;/strong&gt;
제약조건에 대한 제어여부 설정. 기본값은 True이고 대부분 기본값 사용한다. False는 데이터 무결성에 매우 좋지 않지만 다음 경우는 사용한다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;유효하지 않는 기존 데이터가 있다.&lt;/li&gt;
&lt;li&gt;데이터베이스가 샤딩되어있다.&lt;/li&gt;
&lt;li&gt;False 설정한다면 존재하지 않는 관련된 객체에 접근할 때 DoesNotExist 예외가 발생한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Django Apprenticeship Study Part.3]]></title><description><![CDATA[Database & django orm basic concept]]></description><link>https://ctsictai.github.io//posts/django-part3/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/django-part3/</guid><pubDate>Sun, 10 Nov 2019 21:30:03 GMT</pubDate><content:encoded>&lt;h2 id=&quot;previously&quot;&gt;&lt;a href=&quot;#previously&quot; aria-label=&quot;previously permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;previously&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;django project create and foundation settings&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;커스텀-앱-디텍토리-생성&quot;&gt;&lt;a href=&quot;#%EC%BB%A4%EC%8A%A4%ED%85%80-%EC%95%B1-%EB%94%94%ED%85%8D%ED%86%A0%EB%A6%AC-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;커스텀 앱 디텍토리 생성 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;커스텀 앱 디텍토리 생성&lt;/h1&gt;
&lt;p&gt;☞ python manage.py startapp books ☜ 치면 앱 만들 수 있음&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;단, 해당 프로젝트 디렉토리 안에서 명령어를 쳐야 정상적으로 만들어 진다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;기본적인 백엔드 기능을 구현하는 곳으로서 전체적인 아키텍쳐에 따라 달라지지만 기본적으로 구현하고자 하는 기능별/Database table별로 구분하여 앱 디렉토리를 만들어서 구별하는 협업 개발을 할 때 좋다&lt;/p&gt;
&lt;h1 id=&quot;앱-디텍토리-process&quot;&gt;&lt;a href=&quot;#%EC%95%B1-%EB%94%94%ED%85%8D%ED%86%A0%EB%A6%AC-process&quot; aria-label=&quot;앱 디텍토리 process permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;앱 디텍토리 process&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;models.py에서 db모델링 및 설계&lt;/li&gt;
&lt;li&gt;views.py에서 엔드 포인트 로직 설계&lt;/li&gt;
&lt;li&gt;urls.py에서 엔드 포인트 마지막 주소 설계해서 웹과 연결&lt;/li&gt;
&lt;li&gt;views.py에서 필요한 데코레이터나 클래스 혹은 함수를 지정하는 별도의 파일 생성&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;1-modelspy-설계&quot;&gt;&lt;a href=&quot;#1-modelspy-%EC%84%A4%EA%B3%84&quot; aria-label=&quot;1 modelspy 설계 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. Models.py 설계&lt;/h1&gt;
&lt;p&gt;클래스를 생성하여 DB 테이블 객체를 구성을 정의하는 곳
장고는 many-to-one, many-to-many, and one-to-one과 같은 모든 일반 데이터베이스 관계를 지원합니다.&lt;/p&gt;
&lt;h2 id=&quot;모델의-정의make-model&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%8D%B8%EC%9D%98-%EC%A0%95%EC%9D%98make-model&quot; aria-label=&quot;모델의 정의make model permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모델의 정의(make model)&lt;/h2&gt;
&lt;p&gt;장고 안의 모델은 객체의 특별한 종류입니다. 이 모델을 저장하면 그 내용이 데이터베이스에 저장되는 것이 특징이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;데이터베이스(DATABASE)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;데이터의 집합입니다. 데이터들이 모여 있는 저장 공간이다. 이곳에 웹에서 작성한 사용자에 대한 정보나 상품 정보 등의 정보가 저장되어 있습니다. 데이터베이스는 여러 종류가 있습니다. mysql, mariaDB, oracle, postgreSQL,sqlite등이 있습니다. 장고는 이 모든 DB를 지원합니다. ORM이라는 개념으로 DB에 종속적이지 않게 지원을 해줍니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;객체(object)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;객체란 속성과 행동을 모아놓은 것이라 할 수 있다. 객체가 중요한 이유는 객체 지향 프로그래밍 개발 방법 때문이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;객체 지향 프로그래밍(object oriented programming)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이 개발 방법은 프로그램이 어떻게 작동해야 하는지 모든 것을 하나하나 지시하는 것 대신, 모델을 만들어 그 모델이 어떤 역할을 가지고 어떻게 행동해야 하는지 정의하여 서로 알아서 상호작용할 수 있도록 만드는 것을 말한다.
기본적으로 객체지향설계 개념은 현실에 존재하는 것을 속성과 행위로 나타내는 것입니다. 여기서 속성은 객체 속성(properties), 행위는 메서드(methods)로 구현됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ORM(object relational mapping)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;객체(Object)와 관계형 데이터베이스(Relational Database)의 데이터를 매핑(Mapping)해주는 것을 의미한다.&lt;/li&gt;
&lt;li&gt;객체 간의 관계를 바탕으로 SQL을 자동을 생성해서 sql 쿼리문 없이도 데이터베이스의 데이터들을 다룰 수 있다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-장점&quot;&gt;&lt;a href=&quot;#1-%EC%9E%A5%EC%A0%90&quot; aria-label=&quot;1 장점 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 장점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;객체 지향적인 코드로 인해 더 직관적이고 비즈니스 로직에 더 집중할 수 있게 도와준다.&lt;/li&gt;
&lt;li&gt;선언문, 할당, 종료 같은 부수적인 코드가 없거나 급격히 줄어든다.&lt;/li&gt;
&lt;li&gt;각종 객체에 대한 코드를 별도로 작성하기 때문에 코드의 가독성을 올려준다.&lt;/li&gt;
&lt;li&gt;SQL의 절차적이고 순차적인 접근이 아닌 객체 지향적인 접근으로 인해 생산성이 증가한다.&lt;/li&gt;
&lt;li&gt;재사용 및 유지보수의 편리성이 증가한다.&lt;/li&gt;
&lt;li&gt;ORM은 독립적으로 작성되어있고, 해당 객체들을 재활용 할 수 있다. 때문에 모델에서 가공된 데이터를 컨트롤러에 의해 뷰와 합쳐지는 형태로 디자인 패턴을 견고하게 다지는데 유리하다.&lt;/li&gt;
&lt;li&gt;매핑정보가 명확하여, ERD를 보는 것에 대한 의존도를 낮출 수 있다.&lt;/li&gt;
&lt;li&gt;DBMS에 대한 종속성이 줄어든다.&lt;/li&gt;
&lt;li&gt;대부분 ORM 솔루션은 DB에 종속적이지 않다.&lt;/li&gt;
&lt;li&gt;종속적이지 않다는것은 구현 방법 뿐만아니라 많은 솔루션에서 자료형 타입까지 유효하다.&lt;/li&gt;
&lt;li&gt;프로그래머는 Object에 집중함으로 극단적으로 DBMS를 교체하는 거대한 작업에도 비교적 적은 리스크와 시간이 소요된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2단점&quot;&gt;&lt;a href=&quot;#2%EB%8B%A8%EC%A0%90&quot; aria-label=&quot;2단점 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2.단점&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;완벽한 ORM 으로만 서비스를 구현하기가 어렵다.&lt;/li&gt;
&lt;li&gt;사용하기는 편하지만 설계는 매우 신중하게 해야한다.&lt;/li&gt;
&lt;li&gt;프로젝트의 복잡성이 커질경우 난이도 또한 올라갈 수 있다.&lt;/li&gt;
&lt;li&gt;잘못 구현된 경우에 속도 저하 및 심각할 경우 일관성이 무너지는 문제점이 생길 수 있다.&lt;/li&gt;
&lt;li&gt;일부 자주 사용되는 대형 쿼리는 속도를 위해 SP를 쓰는등 별도의 튜닝이 필요한 경우가 있다.&lt;/li&gt;
&lt;li&gt;DBMS의 고유 기능을 이용하기 어렵다. (하지만 이건 단점으로만 볼 수 없다 : 특정 DBMS의 고유기능을 이용하면 이식성이 저하된다.)&lt;/li&gt;
&lt;li&gt;프로시저가 많은 시스템에선 ORM의 객체 지향적인 장점을 활용하기 어렵다.&lt;/li&gt;
&lt;li&gt;이미 프로시저가 많은 시스템에선 다시 객체로 바꿔야하며, 그 과정에서 생산성 저하나 리스크가 많이 발생할 수 있다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;모델링이란&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%8D%B8%EB%A7%81%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;모델링이란 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모델링이란?&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;정의
사람이 살아가면서 나타날 수 있는 다양한 현상은 사람, 사물, 개념 등에 의해 발생된다고 할 수 있으며 모델링은 이것을 표기법에 의해 규칙을 가지고 표기하는 것 자체를 의미한다.&lt;/li&gt;
&lt;li&gt;업무에서 필요로 하는 데이터를 시스템 구축 방법론에 의해 분석하고 설계하여 정보시스템을 구축하는 과정으로 정의할 수 있다&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특징&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;추상화(모형화, 가설적)는 현실세계를 일정한 형식에 맞추어 표현을 한다는 의미로 정리할 수 있다. 즉, 다양한 현상을 일정한 양식인 표기법에 의해 표현한다는 것이다.&lt;/li&gt;
&lt;li&gt;단순화는 복잡한 현실세계를 약속된 규약에 의해 제한된 표기법이나 언어로 표현하여 쉽게 이해할 수 있도록 하는 개념을 의미한다.&lt;/li&gt;
&lt;li&gt;명확화는 누구나 이해하기 쉽게 하기 위해 대상에 대한 애매모호함을 제거하고 정확(正確)하게 현상을 기술하는 것을 의미한다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;관점&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;데이터관점 : 업무가 어떤 데이터와 관련이 있는지 또는 데이터간의 관계는 무엇인지에 대해서 모델링하는 방법(What, Data)&lt;/li&gt;
&lt;li&gt;프로세스관점 : 업무가 실제하고 있는 일은 무엇인지 또는 무엇을 해야 하는지를 모델링하는 방법(How, Process)&lt;/li&gt;
&lt;li&gt;데이터와 프로세스의 상관관점 : 업무가 처리하는 일의 방법에 따라 데이터는 어떻게 영향을 받고 있는지 모델링하는 방법(Interaction)으로 설명될 수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;데이터 모델링의 3단계&lt;/p&gt;
&lt;p&gt;그 중에서 장고 모델링과 연관이 되어 있는 &lt;strong&gt;논리적 데이터 모델링&lt;/strong&gt;만을 얘기해본다.&lt;/p&gt;
&lt;p&gt;논리 데이터 모델링은 데이터베이스 설계 프로세스의 Input으로써 비즈니스 정보의 논리적인 구조와 규칙을 명확하게 표현하는 기법 또는 과정이라 할 수 있다.&lt;/p&gt;
&lt;p&gt;논리 데이터 모델링의 결과로 얻어지는 논리 데이터 모델은 데이터 모델링이 최적화된 스키마 설계를 하기 전에 액세스하고, 누가 데이터에 액세스하며, 그러한 액세스의 전산화와는 독립적으로 다시 말해서 누가(Who), 어떻게(How: Process) 그리고 전산화와는 별개로 비즈니스 데이터에 존재하는 사실들을 인식하여 &lt;strong&gt;기록&lt;/strong&gt;하는 것이다.&lt;/p&gt;
&lt;p&gt;데이터 모델링 과정에서 가장 핵심이 되는 부분이 논리 데이터 모델링이라고 할 수 있다. 데이터 모델링이란 모델링 과정이 아닌 별도의 과정을 통해서 조사하고 결정한 사실을 단지 ERD라는 그림으로 그려내는 과정을 말하는 것이 아니다. 시스템 구축을 위해서 가장 먼저 시작할 &lt;strong&gt;기초적인 업무조사&lt;/strong&gt;를 하는 초기단계에서부터 인간이 결정해야 할 대부분의 사항을 모두 정의하는 시스템 설계의 전 과정을 지원하는 &lt;strong&gt;과정의 도구&lt;/strong&gt;라고 해야 할 것이다.&lt;/p&gt;
&lt;p&gt;이 단계에서 수행하는 또 한가지 중요한 활동은 &lt;strong&gt;정규화&lt;/strong&gt;이다.&lt;br&gt;
정규화는 논리 데이터 모델 상세화 과정의 대표적인 활동으로, 논리 데이터 모델의 일관성을 확보하고 중복을 제거하여 속성들이 가장 적절한 엔터티에 배치되도록 함으로써 보다 신뢰성있는 데이터구조를 얻는데 목적이 있다.&lt;/p&gt;
&lt;p&gt;논리 데이터 모델의 &lt;strong&gt;상세화&lt;/strong&gt;는 _&lt;em&gt;식별자 확정, 정규화, M:M 관계 해소, 참조 무결성 규칙 정의&lt;/em&gt; 등을 들 수 있으며, 추가적으로 이력 관리에 대한 전략을 정의하여 이를 논리 데이터 모델에 반영함으로써 데이터 모델링을 완료하게 된다.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;좋은 데이터 모델링이란?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;완전성(Completeness)&lt;/li&gt;
&lt;li&gt;중복배제(Non-Redundancy)&lt;/li&gt;
&lt;li&gt;업무규칙(Business Rules)&lt;/li&gt;
&lt;li&gt;데이터 재사용(Data Reusability)&lt;/li&gt;
&lt;li&gt;의사소통(Communication)&lt;/li&gt;
&lt;li&gt;통합성(Integration)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;database-table-relationship&quot;&gt;&lt;a href=&quot;#database-table-relationship&quot; aria-label=&quot;database table relationship permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Database Table Relationship&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;일대일 ( 1:1 )&lt;/li&gt;
&lt;li&gt;일대다 ( 1:N )&lt;/li&gt;
&lt;li&gt;다대다 ( N:M )&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-one-to-one-11&quot;&gt;&lt;a href=&quot;#1-one-to-one-11&quot; aria-label=&quot;1 one to one 11 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. One To One (1:1)&lt;/h2&gt;
&lt;p&gt;어느 엔티티 쪽에서 상대 엔티티를 보더라도 반드시 단 하나씩 관계를 가지는 것을 말합니다.&lt;/p&gt;
&lt;p&gt;예를 들면, 학번과 학생간의 관계를 들 수 있습니다. 학생은 한 개의 학번만을 가질 수 있고 학번 또한 하나의 학생만을 가질 수 있는 관계라고 할 수 있습니다.&lt;/p&gt;
&lt;p&gt;이러한 관계를 1:1 관계라고 합니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://fmhelp.filemaker.com/help/18/fmp/en/FMP_Help/images/one-to-one.png&quot; alt=&quot;1:1&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-one-to-many-1n&quot;&gt;&lt;a href=&quot;#2-one-to-many-1n&quot; aria-label=&quot;2 one to many 1n permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. One To Many (1:N)&lt;/h2&gt;
&lt;p&gt;한 쪽 엔티티가 관계를 맺은 엔티티 쪽의 여러 객체를 가질 수 있는 것을 의미합니다.&lt;/p&gt;
&lt;p&gt;이 관계는 매우 흔한 방식이며, 실제 DB를 설계할 때 자주 쓰이는 방식입니다.&lt;/p&gt;
&lt;p&gt;예를 들면, 부모와 자식 관계라고 생각하시면 됩니다.&lt;br&gt;
계층적인 구조로 이해할 수도 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://fmhelp.filemaker.com/help/18/fmp/en/FMP_Help/images/one-to-many.png&quot; alt=&quot;1:N&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;3-many-to-many-nn&quot;&gt;&lt;a href=&quot;#3-many-to-many-nn&quot; aria-label=&quot;3 many to many nn permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. Many To Many (N:N)&lt;/h2&gt;
&lt;p&gt;양쪽 엔티티 모두에서 1 : M 관계가 존재할 때 나타나는 모습입니다.
즉, 서로가 서로를 1:N 관계로 보고 있는 것입니다.&lt;/p&gt;
&lt;p&gt;예를 들면, 쇼핑몰에서 회원과 상품이 관계를 맺을 수 있습니다.
한 회원은 쇼핑몰의 여러 상품들을 가질 수 있습니다.
청바지, 모자, 티셔츠, 남방 등… 다 제가 가질 수 있죠.
반대로 한 티셔츠도 여러 회원들을 가질 수 있습니다.
하나의 티셔츠를 나도 친구도 부모님도 가질 수 있습니다.&lt;/p&gt;
&lt;p&gt;관계형 데이터베이스 시스템에서는 일반적으로 두 테이블간에 직접적인 다 대다 관계를 구현할 수 없습니다.
N:N 관계를 깰 수 1:N 관계 A는 전화, 세 번째 테이블을 사용하여 테이블을 만들어야 한다 그 것을&lt;strong&gt;조인&lt;/strong&gt;테이블이라고 한다. 결합 테이블의 각 레코드는 결합 하는 두 테이블 의 기본 키 값을 포함하는 일치 필드를 포함 합니다. 조인 테이블에서 이러한 일치 필드는 외래 키 입니다. 이러한 외래 키 필드는 조인 테이블의 레코드가 조인하는 테이블에서 생성 될 때 데이터로 채워집니다.&lt;/p&gt;
&lt;p&gt;N : N 관계의 전형적인 예는 학생과 수업 사이의 관계입니다. 학생은 많은 수업에 등록 할 수 있으며 수업에는 많은 학생이 포함될 수 있습니다.&lt;/p&gt;
&lt;p&gt;다음 예제에는 각 학생의 레코드가 포함 된 Students 테이블과 각 클래스의 레코드가 포함 된 Classes 테이블이 포함됩니다. 조인 테이블 인 Enrollments는 두 테이블 사이에 하나씩 일대 다 관계를 만듭니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://fmhelp.filemaker.com/help/18/fmp/en/FMP_Help/images/relational.07.06.1.png&quot; alt=&quot;N:N&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;nn-관계에-대한-결합-테이블을-설정하려면-다음을-수행해야-한다&quot;&gt;&lt;a href=&quot;#nn-%EA%B4%80%EA%B3%84%EC%97%90-%EB%8C%80%ED%95%9C-%EA%B2%B0%ED%95%A9-%ED%85%8C%EC%9D%B4%EB%B8%94%EC%9D%84-%EC%84%A4%EC%A0%95%ED%95%98%EB%A0%A4%EB%A9%B4-%EB%8B%A4%EC%9D%8C%EC%9D%84-%EC%88%98%ED%96%89%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;nn 관계에 대한 결합 테이블을 설정하려면 다음을 수행해야 한다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;N:N 관계에 대한 결합 테이블을 설정하려면 다음을 수행해야 한다&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;1. 위 예를 사용하여 Enrollments라는 테이블을 만듭니다.
조인테이블이됩니다.

2. 등록 테이블에서 학생 ID 필드와 클래스 ID 필드를 만듭니다.

결합 테이블은 일반적으로 다른 테이블에 포함되지 않는 필드를 보유합니다. 수업을 시작한 날짜를 추적하는 날짜 필드와 수업을 수강하기 위해 학생이 지불 한 비용을 추적하는 비용 필드와 같은 필드를 등록 테이블에 추가 할 수 있습니다.

3. 테이블에서 두 학생 ID 필드 사이의 관계를 만듭니다. 그런 다음 테이블에서 두 클래스 ID 필드 사이의 관계를 작성하십시오.

이 디자인을 사용하여 학생이 3 개의 수업에 등록하는 경우 해당 학생은 학생 테이블에 1 개의 레코드와 등록 테이블에 3 개의 레코드 (학생이 등록한 각 클래스에 대해 하나씩)를 갖게됩니다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&quot;기본-키primary-key&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%EB%B3%B8-%ED%82%A4primary-key&quot; aria-label=&quot;기본 키primary key permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기본 키(Primary Key)&lt;/h2&gt;
&lt;p&gt;설계자가 여러 후보키 중 하나를 선택하여 정의한 식별자 (유일성, 최소성)&lt;/p&gt;
&lt;p&gt;기본키의 모든 필드의 값은 null 이 없다.&lt;/p&gt;
&lt;h2 id=&quot;외래-키foreignkey&quot;&gt;&lt;a href=&quot;#%EC%99%B8%EB%9E%98-%ED%82%A4foreignkey&quot; aria-label=&quot;외래 키foreignkey permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;외래 키(ForeignKey)&lt;/h2&gt;
&lt;p&gt;어떤 릴레이션에 소속된 속성 또는 속성 집합이 다른 릴레이션의 기본키가 되는 키다.&lt;br&gt;
다시 말해 다른 릴레이션의 기본키를 그대로 참조하는 속성의 집합이 외래키다. 외래키는 릴레이션들 사이의 관계를 올바르게 표현하기 위해 필요하다.&lt;br&gt;
외래키는 반드시 다른 릴레이션의 기본키를 참조해야 하며 외래키의 도메인은 참조되는 기본키와 같게 정의되어야 한다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Django Apprenticeship Study Part.2]]></title><description><![CDATA[Django tutorial]]></description><link>https://ctsictai.github.io//posts/django-part2/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/django-part2/</guid><pubDate>Mon, 04 Nov 2019 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;장고-프로젝트-생성&quot;&gt;&lt;a href=&quot;#%EC%9E%A5%EA%B3%A0-%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;장고 프로젝트 생성 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;장고 프로젝트 생성&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;django-admin startproject ‘프로젝트명’&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Setting.py(관리 설정)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;⬧ BASE_DIR = 파이썬 및 장고 설치 경로를 찾을 수 있도록 하는 기본 경로를 설정해줌&lt;/p&gt;
&lt;p&gt;⬧ Debug – 디버그 모드 설정 true면 디버그 하고 false 면 디버깅 안함 – 주로 테스팅/ 개발단계에서 true하고 지속적인 확인을 하고 false는 실제 서비스 배포할 때는 안함&lt;/p&gt;
&lt;p&gt;⬧ ALLOWED_HOSTS – 장고 백엔드에 접근 할 수 있는 서버설정 보통 ‘*’ 설정하여 누구나 접근하도록 허용함&lt;/p&gt;
&lt;p&gt;⬧ Installed&lt;em&gt;apps – pip 설치한 앱 또는 본인이 만든 app 추가(일종의 장고에 경로를 설정하는 개념이다.)
프로젝트명\settings.py 에서 INSTALLED&lt;/em&gt;APPS에 앱명인 ‘*’를 추가해야&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;주석 처리  runserver에 영향 줌&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;#django.contrib.admin&amp;amp;#39;,(어드민 사이트 사용)
#django.contrib.auth&amp;amp;#39;, (auth 장고 인증 로직 사용)
#django.middleware.csrf.CsrfViewMiddleware&amp;amp;#39 (토큰)
#django.contrib.auth.middleware.#AuthenticationMiddleware&amp;amp;#3(로그인 권한설정)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;주석 처리하는 것이 좋다 runserver에 영향을 줌!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;⬧ Templates – template 설정, 실제 뷰(html, 변수) - 3세대에서는 안 쓴다. 프론트엔드적인 부분으로 직접 웹브라우저에 구현하는 기능&lt;/p&gt;
&lt;p&gt;⬧ Databases – 데이터베이스 엔진의 연결 설정(다양한 db 선택 가능)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;default -sqlite 쓰는 경우 default 값 그대로 써도 된다.&lt;/li&gt;
&lt;li&gt;mysql(RDBMS)을 쓰는 경우 default 값을 변화 시켜야 한다&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;DATABASES = {
   &amp;#39;default&amp;#39;: {
       &amp;#39;ENGINE&amp;#39;: &amp;#39;django.db.backends.mysql&amp;#39;,
       &amp;#39;NAME&amp;#39;: &amp;#39;name&amp;#39;,
       &amp;#39;USER&amp;#39;: &amp;#39;user&amp;#39;,
       &amp;#39;PASSWORD&amp;#39;: &amp;#39;password&amp;#39;
   }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;혹은 위의 코드를 다른 *.py를 만들어 따로 관리하고 import해서 사용하기도 한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;user_settings.py 에 위의 코드를 입력하고 settings.py 에서는 import 하여 사용하는 방법&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;import user_settings.py
DATABASES = user_settings.DATABASES&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;⬧ Time_Zone = Asia/Seoul로 설정 첫 대문자 주의!!&lt;/p&gt;
&lt;p&gt;⬧ Static_ucal – 정적 파일의 URL(css, js, image, ect)&lt;/p&gt;
&lt;h1 id=&quot;corscross-origin-resource-sharing&quot;&gt;&lt;a href=&quot;#corscross-origin-resource-sharing&quot; aria-label=&quot;corscross origin resource sharing permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;CORS(Cross-Origin Resource Sharing)&lt;/h1&gt;
&lt;p&gt;웹 브라우저에서 외부 도메인 서버와 통신하기 위한 방식을 표준화한 스펙이다.&lt;br&gt;
서버와 클라이언트가 정해진 해더를 통해 서로 요청이나 응답에 반응할지 결정하는 방식으로 교차 출처 자원 공유(cross-
origin resource sharing)라는 이름으로 표준화가 되었다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;CORS 인스톨 → pip install Django-cors-headers&lt;/li&gt;
&lt;li&gt;settings의 installed_apps에 corsheaders, 추가&lt;/li&gt;
&lt;li&gt;middleware에 corsheaders.middleware.CorsMiddleware , 추가&lt;/li&gt;
&lt;li&gt;settings.py 제일 밑에 추가 세팅&lt;/li&gt;
&lt;li&gt;CORS 설치후 settings 에 수동으로 적용(default settings)&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;##CORS
CORS_ORIGIN_ALLOW_ALL=True
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOW_METHODS = (
   &amp;amp;#39;DELETE&amp;amp;#39;,
   &amp;amp;#39;GET&amp;amp;#39;,
   &amp;amp;#39;OPTIONS&amp;amp;#39;,
   &amp;amp;#39;PATCH&amp;amp;#39;,
   &amp;amp;#39;POST&amp;amp;#39;,
   &amp;amp;#39;PUT&amp;amp;#39;,

)
CORS_ALLOW_HEADERS = (
   &amp;amp;#39;accept&amp;amp;#39;,
   &amp;amp;#39;accept-encoding&amp;amp;#39;,
   &amp;amp;#39;authorization&amp;amp;#39;,
   &amp;amp;#39;content-type&amp;amp;#39;,
   &amp;amp;#39;dnt&amp;amp;#39;,
   &amp;amp;#39;origin&amp;amp;#39;,
   &amp;amp;#39;user-agent&amp;amp;#39;,
   &amp;amp;#39;x-csrftoken&amp;amp;#39;,
   &amp;amp;#39;x-requested-with&amp;amp;#39;,
)
ORM(Object-relational&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content:encoded></item><item><title><![CDATA[Python Apprenticeship Study Part.9]]></title><description><![CDATA[List Comprehension]]></description><link>https://ctsictai.github.io//posts/python-part10/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/python-part10/</guid><pubDate>Sat, 02 Nov 2019 23:50:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;list-comprehension&quot;&gt;&lt;a href=&quot;#list-comprehension&quot; aria-label=&quot;list comprehension permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;List Comprehension&lt;/h1&gt;
&lt;h2 id=&quot;기본-형식&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%EB%B3%B8-%ED%98%95%EC%8B%9D&quot; aria-label=&quot;기본 형식 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기본 형식&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;new&lt;em&gt;list = [expression(i) for i in old&lt;/em&gt;list if filter(i)]&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;exp - 표현식(만들려는 형태) 여기서 선언되는 변수가 for문 / if문에서 사용되야 의미가 있다.&lt;/li&gt;
&lt;li&gt;for문 - 표현식에 있는 변수명을 반복문을 돌림&lt;/li&gt;
&lt;li&gt;if문 - 안들어가도 됨 - 다만 표현식 반복문에 조건이 필요한경우&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;소위 브라켓이라고 하는 빈 리스트값 매겨 놓고 리스트안에서 포문 즉 반복문이 돌아간다. 그런데 newlist를 oldlist를 근거로 만드려는데 똑같이 만들려면 의미가 없고 여기에 filtering을 하여 newlist를 만든다.&lt;/p&gt;
&lt;p&gt;이 때 filter에 따라 수많은 newlist가 생성 된다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;[x.lower() for x in [&amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;]]
[&amp;#39;a&amp;#39;, &amp;#39;b&amp;#39;, &amp;#39;c&amp;#39;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;코드 해석&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x.lower() - x 라는 영문자열을 소문자로 바꿔라&lt;/li&gt;
&lt;li&gt;for x in [‘A’, ‘B’, ‘C’] - x를 [] list 요소 숫자만큼 돌려라&lt;/li&gt;
&lt;li&gt;즉, 합치면 리스트 [‘A’, ‘B’, ‘C’]내의 요소x를 lower 소문자로 모두 바꿔라&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;=================================================&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;string = &amp;quot;Hello 12345 World&amp;quot;
numbers = [x for x in string if x.isdigit()]
print(numbers)
 [&amp;#39;1&amp;#39;, &amp;#39;2&amp;#39;, &amp;#39;3&amp;#39;, &amp;#39;4&amp;#39;, &amp;#39;5&amp;#39;]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;코드해석&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;x는 표현식으로 의미는 없고&lt;/li&gt;
&lt;li&gt;for x in string - 여기서의 x가 표현식의 x와 같아야 한다. 안그러면 표현식 x는 undefined 된 에러변수가 된다.&lt;/li&gt;
&lt;li&gt;if x.isdigit() - 여기서 조건문이 들어가 isdigit 숫자만 출력한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;list-comprehension-이걸-언제-쓸까&quot;&gt;&lt;a href=&quot;#list-comprehension-%EC%9D%B4%EA%B1%B8-%EC%96%B8%EC%A0%9C-%EC%93%B8%EA%B9%8C&quot; aria-label=&quot;list comprehension 이걸 언제 쓸까 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;List comprehension 이걸 언제 쓸까??&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;다중 list나 다중 dict 등등 - 다중 배열(시퀀스 자료형) 구조일 경우 요소 접근에 대한 고민이 필요할 때(matrix 구조에 적용 가능)&lt;/li&gt;
&lt;li&gt;nested for문을 쓸 경우에 - 그게 보통 위의 경우가 많다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;ex1-3중-배열-요소-값-접근&quot;&gt;&lt;a href=&quot;#ex1-3%EC%A4%91-%EB%B0%B0%EC%97%B4-%EC%9A%94%EC%86%8C-%EA%B0%92-%EC%A0%91%EA%B7%BC&quot; aria-label=&quot;ex1 3중 배열 요소 값 접근 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;EX1) 3중 배열 요소 값 접근&lt;/h3&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;matrix = [[[1,2,3], [4,5,6], [7,8,9]], [[&amp;#39;q&amp;#39;,&amp;#39;w&amp;#39;,&amp;#39;e&amp;#39;], [&amp;#39;r&amp;#39;, &amp;#39;t&amp;#39;, &amp;#39;y&amp;#39;]]]

# 괄호 1번 벗기기
inner_matrix = [row for row in matrix]
print(&amp;quot;inner_matrix :&amp;quot;, inner_matrix)

# 괄호 2번 벗기기
inner_matrix_list = [row_element for row in matrix for row_element in row]
print(&amp;quot;inner_matrix_list : &amp;quot;, inner_matrix_list)

# 괄호 3번 벗기기
inner_matrix_list_element = [element for inner_matrix in matrix
                                   for inner_matrix_list in inner_matrix
                                   for element in inner_matrix_list]

print(&amp;quot;inner_matrix_list_element : &amp;quot;, inner_matrix_list_element)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;matrix = [ [ [1,2,3], [4,5,6], [7,8,9]], [ [‘q’,‘w’,‘e’], [‘r’, ‘t’, ‘y’]]]&lt;br&gt;
matrix 내에 또 다른 매트릭스(inner&lt;em&gt;matrix)가 2개 있는 걸로 이해할 수 있다.&lt;br&gt;
즉, inner&lt;/em&gt;matrix&lt;em&gt;1 = [[1,2,3], [4,5,6], [7,8,9]]&lt;br&gt;
inner&lt;/em&gt;matrix_2 = [[‘q’,‘w’,‘e’], [‘r’,‘t’,‘y’]] 가 있는 형태이다.&lt;/p&gt;
&lt;p&gt;inner&lt;em&gt;matrix&lt;/em&gt;1과 inner&lt;em&gt;matrix&lt;/em&gt;2의 괄호를 또 한번 벗기면&lt;br&gt;
inner&lt;em&gt;matrix&lt;/em&gt;list&lt;em&gt;1 = [1,2,3], [4,5,6], [7,8,9]&lt;br&gt;
inner&lt;/em&gt;matrix&lt;em&gt;list&lt;/em&gt;2 = [‘q’,‘w’,‘e’], [‘r’, ‘t’, ‘y’] 를 만나게 된다.&lt;/p&gt;
&lt;p&gt;inner&lt;em&gt;matrix&lt;/em&gt;list&lt;em&gt;1과 inner&lt;/em&gt;matrix&lt;em&gt;list&lt;/em&gt;2의 괄호를 또 한번 벗기게 되면 드디어 리스트를 구성하는 원소(element)를 만날 수 있다.&lt;br&gt;
inner&lt;em&gt;matrix&lt;/em&gt;list&lt;em&gt;element&lt;/em&gt;1 = 1,2,3,4,5,6,7,8,9&lt;br&gt;
inner&lt;em&gt;matrix&lt;/em&gt;list&lt;em&gt;element&lt;/em&gt;2 = ‘q’, ‘w’, ‘e’, ‘r’, ‘t’, ‘y’&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Django Apprenticeship Study Part.1]]></title><description><![CDATA[Django tutorial]]></description><link>https://ctsictai.github.io//posts/django-part1/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/django-part1/</guid><pubDate>Fri, 01 Nov 2019 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;django-framework&quot;&gt;&lt;a href=&quot;#django-framework&quot; aria-label=&quot;django framework permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Django Framework&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Framework란? : 만들고자 하는 목적에 따라 필요한 공통적인 기능을 모아놓은 것 -들어가서 추가하는 개념&lt;/li&gt;
&lt;li&gt;Library란? : 정리정돈된 소프트웨어(재사용성이 좋은) – 이걸 땡겨서 쓰는 개념&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;❖ MVC &amp;#x26; MTV(Django)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Model – 안전하게 데이터 저장&lt;/li&gt;
&lt;li&gt;View – 데이터를 적절하게 유저에게 보여주기 위한 각종 처리에 관한 로직&lt;/li&gt;
&lt;li&gt;Control, Template(Django) – 사용자의 입력과 이벤트에 반응하여 Model과 View를 업데이트하여 직접적으로 보여주는 역할&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;다양한 코드가 한 파일안에 들어가 있는 모양 –&gt; 하나만 바꾸기가 힘들다 다 연관되어서 바뀌는 경우가 많다
분리하자 –&gt; MVC로 나누어서 하자 –&gt; 계층적 구조&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://1.bp.blogspot.com/-hR9pW45Ezcw/UL4xAu--G2I/AAAAAAAAAGU/C1Oe5xRQq-I/s400/mvc_decoupling_4.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;특정 영역을 분리하는 게 핵심 모듈적으로 협업을 좀 더 원활히하는 것&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Template는 3세대 백엔드 개발자에겐 해당 사항이 없다&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://www.stechstar.com/user/zbxe/files/attach/images/3263/162/051/3b71346c7532be7fe7630bdc36b29f30.png&quot; alt=&quot;장고 구조도&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;웹-브라우저크롬에서-작동하는-django&quot;&gt;&lt;a href=&quot;#%EC%9B%B9-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80%ED%81%AC%EB%A1%AC%EC%97%90%EC%84%9C-%EC%9E%91%EB%8F%99%ED%95%98%EB%8A%94-django&quot; aria-label=&quot;웹 브라우저크롬에서 작동하는 django permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;웹 브라우저(크롬)에서 작동하는 django&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/993FB83359869E051C&quot; alt=&quot;웹과장고&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;용어와-개념-장고의-구조에-대해서-반복을-통해-숙지해야-한다&quot;&gt;&lt;a href=&quot;#%EC%9A%A9%EC%96%B4%EC%99%80-%EA%B0%9C%EB%85%90-%EC%9E%A5%EA%B3%A0%EC%9D%98-%EA%B5%AC%EC%A1%B0%EC%97%90-%EB%8C%80%ED%95%B4%EC%84%9C-%EB%B0%98%EB%B3%B5%EC%9D%84-%ED%86%B5%ED%95%B4-%EC%88%99%EC%A7%80%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;용어와 개념 장고의 구조에 대해서 반복을 통해 숙지해야 한다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;용어와 개념 장고의 구조에 대해서 반복을 통해 숙지해야 한다&lt;/h3&gt;
&lt;h4 id=&quot;장고-튜토리얼-공식-사이트이다-꼭-반복-숙달-한다&quot;&gt;&lt;a href=&quot;#%EC%9E%A5%EA%B3%A0-%ED%8A%9C%ED%86%A0%EB%A6%AC%EC%96%BC-%EA%B3%B5%EC%8B%9D-%EC%82%AC%EC%9D%B4%ED%8A%B8%EC%9D%B4%EB%8B%A4-%EA%BC%AD-%EB%B0%98%EB%B3%B5-%EC%88%99%EB%8B%AC-%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;장고 튜토리얼 공식 사이트이다 꼭 반복 숙달 한다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;장고 튜토리얼 공식 사이트이다. 꼭 반복 숙달 한다!&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://docs.djangoproject.com/ko/2.2/intro/tutorial01/&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://docs.djangoproject.com/ko/2.2/intro/tutorial01/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;장고-시작하기&quot;&gt;&lt;a href=&quot;#%EC%9E%A5%EA%B3%A0-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0&quot; aria-label=&quot;장고 시작하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;장고 시작하기&lt;/h2&gt;
&lt;h3 id=&quot;djangos-install&quot;&gt;&lt;a href=&quot;#djangos-install&quot; aria-label=&quot;djangos install permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Django’s install&lt;/h3&gt;
&lt;h4 id=&quot;by-window&quot;&gt;&lt;a href=&quot;#by-window&quot; aria-label=&quot;by window permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;By Window&lt;/h4&gt;
&lt;p&gt;파이선은 기본적으로 설치가 되어 있는 상태이여야 한다.&lt;/p&gt;
&lt;p&gt;편집기 on - cmd에서&lt;br&gt;
☞ pip install virtualenvwrapper-win ☜
이러면 가상환경깔고 거기에 python만 최신버전으로 install 됨&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Mkvirtualenv ‘name’ - create 명령어 – 프젝별 가상환경 만들기 – 맨 처음에만&lt;/li&gt;
&lt;li&gt;Workon ‘name’ - 만든 가상환경 실행 / 전환 – 일반적인 시작점&lt;/li&gt;
&lt;li&gt;pip freeze - 가상환경에 설치된 패키지들을 보고 싶다&lt;/li&gt;
&lt;li&gt;pip install Django 및 필요한 프레임워크, 라이브러리 설치 하기&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;☞ (가상환경 명)C:\프젝폴더명&gt; 이러면 가상환경에 있다는 얘기 ☜&lt;/p&gt;
&lt;h4 id=&quot;by-ubuntu-linux&quot;&gt;&lt;a href=&quot;#by-ubuntu-linux&quot; aria-label=&quot;by ubuntu linux permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;By Ubuntu Linux&lt;/h4&gt;
&lt;p&gt;미니콘다 설치 후 가상환경 설치 및 환경 설정&lt;/p&gt;
&lt;p&gt;미니콘다 인스톨러
$ wget &lt;a href=&quot;https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;b ash Miniconda3-latest-Linux-x86_64.sh&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Zsh path settings – add this to your .zshrc (zsh 쓰는 경우 설정)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;export PATH=“/home/username/miniconda/bin:$PATH”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h4 id=&quot;conda-가상환경-목록을-보는-명령어&quot;&gt;&lt;a href=&quot;#conda-%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-%EB%AA%A9%EB%A1%9D%EC%9D%84-%EB%B3%B4%EB%8A%94-%EB%AA%85%EB%A0%B9%EC%96%B4&quot; aria-label=&quot;conda 가상환경 목록을 보는 명령어 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;conda 가상환경 목록을 보는 명령어&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;conda env list&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;conda-가상환경-만들기&quot;&gt;&lt;a href=&quot;#conda-%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;conda 가상환경 만들기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;conda 가상환경 만들기&lt;/h4&gt;
&lt;p&gt;파이썬3 버전의 환경만들기&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;conda create -n “가상환경이름” python=3.7(버전 명시 꼭!!)&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;가상환경-활성화&quot;&gt;&lt;a href=&quot;#%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-%ED%99%9C%EC%84%B1%ED%99%94&quot; aria-label=&quot;가상환경 활성화 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;가상환경 활성화&lt;/h4&gt;
&lt;p&gt;설치되어 있는 가상환경으로 접속한다. ( 엄밀히 이야기하면 내부적으로 현재 터미널의 PATH 와 같은 환경변수를 가상환경으로 설정해주는 과정이 포함된다 )&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;conda activate YOUR&lt;em&gt;ENV&lt;/em&gt;NAME&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;가상환경-비활성화&quot;&gt;&lt;a href=&quot;#%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-%EB%B9%84%ED%99%9C%EC%84%B1%ED%99%94&quot; aria-label=&quot;가상환경 비활성화 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;가상환경 비활성화&lt;/h4&gt;
&lt;p&gt;접속되어 있는 가상환경으로부터 빠져나온다.
conda deactivate&lt;/p&gt;
&lt;h4 id=&quot;가상환경-목록-확인&quot;&gt;&lt;a href=&quot;#%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-%EB%AA%A9%EB%A1%9D-%ED%99%95%EC%9D%B8&quot; aria-label=&quot;가상환경 목록 확인 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;가상환경 목록 확인&lt;/h4&gt;
&lt;p&gt;현재 서버에 설치되어 있는 가상환경 목록을 출력한다. 아래는 AWS P Type Instance 에서의 명령어 실행 결과이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;conda env list&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;가상환경-삭제&quot;&gt;&lt;a href=&quot;#%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD-%EC%82%AD%EC%A0%9C&quot; aria-label=&quot;가상환경 삭제 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;가상환경 삭제&lt;/h4&gt;
&lt;p&gt;사용하지 않는 가상환경을 정리할 때 사용한다. 현재 접속되어 있는 가상환경은 삭제 할 수 없으니 참고하도록 하자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;conda remove —name YOUR&lt;em&gt;ENV&lt;/em&gt;NAME —all\&lt;/li&gt;
&lt;li&gt;conda env remove —name YOUR&lt;em&gt;ENV&lt;/em&gt;NAME&lt;/li&gt;
&lt;li&gt;conda remove -n YOUR&lt;em&gt;ENV&lt;/em&gt;NAME&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;★-가상환경에-필요한-pip는-관리해서-문서화-해야-한다&quot;&gt;&lt;a href=&quot;#%E2%98%85-%EA%B0%80%EC%83%81%ED%99%98%EA%B2%BD%EC%97%90-%ED%95%84%EC%9A%94%ED%95%9C-pip%EB%8A%94-%EA%B4%80%EB%A6%AC%ED%95%B4%EC%84%9C-%EB%AC%B8%EC%84%9C%ED%99%94-%ED%95%B4%EC%95%BC-%ED%95%9C%EB%8B%A4&quot; aria-label=&quot;★ 가상환경에 필요한 pip는 관리해서 문서화 해야 한다 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;★ 가상환경에 필요한 pip는 관리해서 문서화 해야 한다.&lt;/h3&gt;
&lt;p&gt;Requirements.txt에 작성해야 한다.&lt;br&gt;
Pip freeze를 통해 나오는 pip(package/library etc on)들을 requirements.txt에 반영&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pip freeze &gt; requirements.txt
이러면 자동 반영되면서 만들어짐&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;다른 사람의 장고 코드를 구현하고 싶다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;pip install -r requirements.txt&lt;br&gt;
requirements에 명시해 놓은 패키지 모듈 all 설치&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;가상환경에 장고 설치 및 필요한 pip 설치하기 – pip version python version 확인 후
Pip or pip3 install Django (ver python3.7)로 설치하면 됨&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Python Apprenticeship Study Part.6]]></title><description><![CDATA[Class]]></description><link>https://ctsictai.github.io//posts/python-part6/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/python-part6/</guid><pubDate>Tue, 22 Oct 2019 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;클래스&quot;&gt;&lt;a href=&quot;#%ED%81%B4%EB%9E%98%EC%8A%A4&quot; aria-label=&quot;클래스 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;클래스&lt;/h1&gt;
&lt;h2 id=&quot;개요&quot;&gt;&lt;a href=&quot;#%EA%B0%9C%EC%9A%94&quot; aria-label=&quot;개요 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;개요&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;클래스는 객체의 구조와 행동을 정의합니다.&lt;/li&gt;
&lt;li&gt;객체의 클래스는 초기화를 통해 제어합니다.&lt;/li&gt;
&lt;li&gt;클래스는 복잡한 문제를 다루기 쉽도록 만듭니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;객체와-인스턴스-차이&quot;&gt;&lt;a href=&quot;#%EA%B0%9D%EC%B2%B4%EC%99%80-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%B0%A8%EC%9D%B4&quot; aria-label=&quot;객체와 인스턴스 차이 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;객체와 인스턴스 차이&lt;/h3&gt;
&lt;p&gt;클래스로 만든 객체를 인스턴스라고도 한다.&lt;br&gt;
인스턴스라는 말은 특정 객체가 어떤 클래스의 객체인지를 관계 위주로 설명할 때 사용한다.&lt;/p&gt;
&lt;h2 id=&quot;클래스-변수속성&quot;&gt;&lt;a href=&quot;#%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%B3%80%EC%88%98%EC%86%8D%EC%84%B1&quot; aria-label=&quot;클래스 변수속성 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;클래스 변수(속성)&lt;/h2&gt;
&lt;p&gt;클래스 정의에서 메서드 밖에 존재하는 변수를 클래스 변수(class variable)라 하는데, 이는 해당 &lt;strong&gt;클래스를 사용하는 모두에게 공용&lt;/strong&gt;으로 사용되는 변수이다. 클래스 변수는 클래스 내외부에서 &lt;strong&gt;“클래스명.변수명”&lt;/strong&gt; 으로 엑세스 할 수 있다.&lt;/p&gt;
&lt;h2 id=&quot;인스턴스-변수속성&quot;&gt;&lt;a href=&quot;#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%B3%80%EC%88%98%EC%86%8D%EC%84%B1&quot; aria-label=&quot;인스턴스 변수속성 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;인스턴스 변수(속성)&lt;/h2&gt;
&lt;p&gt;하나의 클래스로부터 여러 객체 인스턴스를 생성해서 사용할 수 있다. 클래스 변수가 하나의 클래스에 하나만 존재하는 반면, 인스턴스 변수는 각 객체 인스턴스마다 별도로 존재한다.&lt;/p&gt;
&lt;p&gt;클래스 정의에서 메서드 안에서 사용되면서 &lt;strong&gt;“self.변수명”&lt;/strong&gt;처럼 사용되는 변수를 인스턴스 변수(instance variable)라 하는데, 이는 각 객체별로 서로 다른 값을 갖는 변수이다.&lt;/p&gt;
&lt;p&gt;인스턴스 변수는 클래스 내부에서는 self.width 과 같이 “self.” 을 사용하여 엑세스하고, 클래스 밖에서는 &lt;strong&gt;“객체변수.인스턴스변수”&lt;/strong&gt;와 같이 엑세스 한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;만약 특정 변수명이나 메서드를 private으로 만들어야 한다면 두개의 밑줄(__)을 이름 앞에 붙이면 된다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;파이썬의-attribute-찾는-과정&quot;&gt;&lt;a href=&quot;#%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%98-attribute-%EC%B0%BE%EB%8A%94-%EA%B3%BC%EC%A0%95&quot; aria-label=&quot;파이썬의 attribute 찾는 과정 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;파이썬의 attribute 찾는 과정&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;파이썬에서 한 객체의 attribute를 읽을 경우에는 먼저 그 객체에서 attribute를 찾아보고,&lt;/li&gt;
&lt;li&gt;없으면 그 객체의 소속 클래스에서 찾고,&lt;/li&gt;
&lt;li&gt;다시 없으며 상위 Base 클래스에서 찾고,&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;그래도 없으면 에러를 발생시킨다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;클래스 변수를 엑세스할 때는 클래스명을 사용하는 것이 좋다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;메서드method&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EC%84%9C%EB%93%9Cmethod&quot; aria-label=&quot;메서드method permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메서드(Method)&lt;/h2&gt;
&lt;p&gt;클래스 내에 생성된 함수들을 말한다.&lt;/p&gt;
&lt;p&gt;Class Col:&lt;/p&gt;
&lt;p&gt; def col_mtd(*kwargs):
수행할 문장 …&lt;/p&gt;
&lt;p&gt;a = Col()&lt;br&gt;
a.setdata(4,2) 인스턴스를 실행하면&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://wikidocs.net/images/page/12392/setdata.png&quot; alt=&quot;메서드와 매개변수&quot;&gt;&lt;/p&gt;
&lt;p&gt;인스턴스 메서드(instance method), 클래스 메서드(class method), 정적 메서드(static method)가 있다.&lt;/p&gt;
&lt;p&gt;가장 흔히 쓰이는 인스턴스 메서드는 인스턴스 변수에 엑세스할 수 있도록 메서드의 첫번째 파라미터에 항상 객체 자신을 의미하는 “self”라는 파라미터를 갖는다.&lt;/p&gt;
&lt;p&gt;인스턴스 메서드는 여러 파라미터를 가질 수 있지만, 첫번째 파라미터는 항상 self 를 갖는다.&lt;/p&gt;
&lt;h3 id=&quot;initializer-초기자&quot;&gt;&lt;a href=&quot;#initializer-%EC%B4%88%EA%B8%B0%EC%9E%90&quot; aria-label=&quot;initializer 초기자 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Initializer (초기자)&lt;/h3&gt;
&lt;p&gt;클래스로부터 새 객체를 생성할 때마다 실행되는 특별한 메서드로 &lt;strong&gt;init&lt;/strong&gt;() 이라는 메서드가 있는데, 이를 흔히 클래스 Initializer 라 부른다&lt;/p&gt;
&lt;p&gt;Initializer는 클래스로부터 객체를 만들 때, 인스턴스 변수를 초기화하거나 객체의 초기상태를 만들기 위한 문장들을 실행하는 곳이다&lt;/p&gt;
&lt;p&gt;입력 파라미터들을 각각 &lt;em&gt;self.param1&lt;/em&gt;와 &lt;em&gt;self.param2&lt;/em&gt;라는 인스턴스변수에 할당하여 객체 내에서 계속 사용할 수 있도록 준비한다.&lt;/p&gt;
&lt;p&gt;self는 어떠한 실체를 가르키는 단어입니다.&lt;/p&gt;
&lt;p&gt;ex) Car class에서 “self” 는 Car class의 객체인 hyundai나 bmw를 가르키는 것이다.&lt;/p&gt;
&lt;p&gt;self는 class의 실체(instance)인 객체(object)를 가르킵니다&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;그리고 클래스를 실체화 할때 파이썬이 해당 객체(self)를 자동으로 &lt;strong&gt;init&lt;/strong&gt; 함수에 넘겨줍니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;init&lt;/strong&gt; 메소드는 클래스가 실체화 될때 자동으로 호출이 된다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;init&lt;/strong&gt; 메소드의 self 파라미터는 클래스가 실체화된 객체를 넘겨주어야 하며, 파이썬이 자동으로 넘겨준다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;init&lt;/strong&gt; 메소드의 self 파라미터는 항상 정의되어야 있어야 하며 맨 처음 파라미터로 정의 되어야 한다 (그래야 파이썬이 알아서 넘겨줄 수 있으므로)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;☞ Class Method - @classmethod&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;클래스에서 &lt;strong&gt;init&lt;/strong&gt; 말고도 다른 메소드를 원하는 대로 추가할 수 있습니다.&lt;/p&gt;
&lt;p&gt;메서드 안에서 클래스 인스턴스 만들 수도 있습니다.
Method와 attribute(속성)의 차이는 명사와 동사의 차이라고 생각하시면 됩니다.&lt;/p&gt;
&lt;p&gt;속성은 해당 객체의 이름 등의 정해진 성질인 반면에 메소드는 move, eat 등 객체가 행할 수 있는 어떠한 action같은 느낌이라고 생각할 수 있습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;☞ static Method - @staticmethod&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;정적메소드라 함은 클래스에서 직접 접근할 수 있는 메소드입니다.&lt;/p&gt;
&lt;p&gt;staticmethod는 특별히 추가되는 인자가 없습니다 (self)
부모클래스의 클래스속성 값을 가져오고 class instance 속성은 가져오지 않습니다.&lt;/p&gt;
&lt;p&gt;그래서 보통 정적 메서드는 인스턴스 속성, 인스턴스 메서드가 필요 없을 때 사용합니다.&lt;/p&gt;
&lt;p&gt;정적 메서드는 인스턴스의 상태를 변화시키지 않는 메서드를 만들 때 사용합니다.&lt;/p&gt;
&lt;h2 id=&quot;상속이란&quot;&gt;&lt;a href=&quot;#%EC%83%81%EC%86%8D%EC%9D%B4%EB%9E%80&quot; aria-label=&quot;상속이란 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;상속이란?&lt;/h2&gt;
&lt;p&gt;클래스에서 상속이란, 물려주는 클래스(Parent Class, Super class)의 내용(속성과 메소드)을 물려받는 클래스(Child class, sub class)가 가지게 되는 것입니다.&lt;/p&gt;
&lt;h3 id=&quot;메서드-오버라이딩&quot;&gt;&lt;a href=&quot;#%EB%A9%94%EC%84%9C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9&quot; aria-label=&quot;메서드 오버라이딩 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;메서드 오버라이딩&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;일반적인 메소드 오버라이딩
메소드 오버라이딩은 부모 클래스의 메소드를 자식 클래스에서 재정의 하는 것입니다.&lt;/li&gt;
&lt;li&gt;부모 메소드 호출하기
부모클래스의 메소드도 수행하고, 자식클래스의 메소드의 내용도 함께 출력하기를 원할 수 있습니다.&lt;br&gt;
그럴때는 super() 라는 키워드를 사용하면 자식클래스 내에서 코드에서도 부모클래스를 호출할 수 있습니다.&lt;/li&gt;
&lt;li&gt;다중상속
파이썬은 C++과 같이 다중상속이 가능합니다. 두 개 이상의 부모 클래스로부터 상속이 가능하다는 것.&lt;/li&gt;
&lt;li&gt;. mro() 메소드&lt;br&gt;
mro() - 클래스를 작성하면 상속 관계를 확인할 수 있는 메소드&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&amp;#x3C;객체&gt;.&amp;#x3C;메소드&gt; - 이를 dot notation 이라고 합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;클래스-상속-사용하기&quot;&gt;&lt;a href=&quot;#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%83%81%EC%86%8D-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;클래스 상속 사용하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;클래스 상속 사용하기&lt;/h3&gt;
&lt;p&gt;여기서 기능을 물려주는 클래스를 기반 클래스(base class), 상속을 받아 새롭게 만드는 클래스를 파생 클래스(derived class)라고 합니다.&lt;/p&gt;
&lt;p&gt;보통 기반 클래스는 부모 클래스(parent class), 슈퍼 클래스(superclass)라고 부르고, 파생 클래스는 자식 클래스(child class), 서브 클래스(subclass)라고도 부릅니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dojang.io/pluginfile.php/13905/mod_page/content/2/036001.png&quot; alt=&quot;기반-파생 클래스&quot;&gt;&lt;/p&gt;
&lt;p&gt;클래스 상속은 다음과 같이 클래스를 만들 때 ( )(괄호)를 붙이고 안에 기반 클래스 이름을 넣습니다.&lt;/p&gt;
&lt;p&gt;class 기반클래스이름:  &lt;/p&gt;
&lt;p&gt; 실행할 코드&lt;/p&gt;
&lt;p&gt;class 파생클래스이름(기반클래스이름):&lt;/p&gt;
&lt;p&gt; 실행할 코드&lt;/p&gt;
&lt;p&gt;ex) 기반 클래스 - 파생클래스 예제&lt;/p&gt;
&lt;p&gt;class Person:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def greeting(self):
    print(&amp;#39;안녕하세요.&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;class Student(Person):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def study(self):
    print(&amp;#39;공부하기&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;james = Student()&lt;/li&gt;
&lt;li&gt;james.greeting() # 안녕하세요.: 기반 클래스 Person의 메서드 호출&lt;/li&gt;
&lt;li&gt;james.study() # 공부하기: 파생 클래스 Student에 추가한 study 메서드&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Student 클래스를 만들 때 class Student(Person):과 같이 ( )(괄호) 안에 기반 클래스인 Person 클래스를 넣었습니다. 이렇게 하면 Person 클래스의 기능을 물려받은 Student 클래스가 됩니다.&lt;/p&gt;
&lt;p&gt;Student 클래스에는 greeting 메서드가 없지만 Person 클래스를 상속받았으므로 greeting 메서드를 호출할 수 있습니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dojang.io/pluginfile.php/13905/mod_page/content/2/036003.png&quot; alt=&quot;클래스상속&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;상속-관계-확인하기&quot;&gt;&lt;a href=&quot;#%EC%83%81%EC%86%8D-%EA%B4%80%EA%B3%84-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0&quot; aria-label=&quot;상속 관계 확인하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;상속 관계 확인하기&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;issubclass(파생클래스, 기반클래스)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;기반 클래스의 파생 클래스가 맞으면 True, 아니면 False를 반환합니다.&lt;/p&gt;
&lt;h3 id=&quot;기반-클래스의-속성-사용하기&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%EB%B0%98-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EC%86%8D%EC%84%B1-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;기반 클래스의 속성 사용하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기반 클래스의 속성 사용하기&lt;/h3&gt;
&lt;p&gt;기반 클래스에 들어있는 인스턴스 속성을 사용해보겠습니다.&lt;/p&gt;
&lt;p&gt;다음과 같이 Person 클래스에 hello 속성이 있고, Person 클래스를 상속받아 Student 클래스를 만듭니다. 그다음에 Student로 인스턴스를 만들고 hello 속성에 접근해봅니다.&lt;/p&gt;
&lt;p&gt;class Person:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def __init__(self):
    print(&amp;#39;Person __init__&amp;#39;)
    self.hello = &amp;#39;안녕하세요.&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;class Student(Person):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def __init__(self):
    print(&amp;#39;Student __init__&amp;#39;)
    self.school = &amp;#39;파이썬 코딩 도장&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;james = Student()&lt;/li&gt;
&lt;li&gt;print(james.school)&lt;/li&gt;
&lt;li&gt;print(james.hello) # 기반 클래스의 속성을 출력하려고 하면 에러가 발생함&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;super로-기반-클래스-초기화-하기&quot;&gt;&lt;a href=&quot;#super%EB%A1%9C-%EA%B8%B0%EB%B0%98-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%B4%88%EA%B8%B0%ED%99%94-%ED%95%98%EA%B8%B0&quot; aria-label=&quot;super로 기반 클래스 초기화 하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;super()로 기반 클래스 초기화 하기&lt;/h3&gt;
&lt;p&gt;이때는 super()를 사용해서 기반 클래스의 &lt;strong&gt;init&lt;/strong&gt; 메서드를 호출해줍니다. 다음과 같이 super() 뒤에 .(점)을 붙여서 메서드를 호출하는 방식입니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;super().메서드()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;class Person:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def __init__(self):
    print(&amp;#39;Person __init__&amp;#39;)
    self.hello = &amp;#39;안녕하세요.&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;class Student(Person):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;def __init__(self):
    print(&amp;#39;Student __init__&amp;#39;)
    super().__init__()
    # super()로 기반 클래스의 __init__ 메서드 호출
    self.school = &amp;#39;파이썬 코딩 도장&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;james = Student()&lt;/li&gt;
&lt;li&gt;print(james.school)&lt;/li&gt;
&lt;li&gt;print(james.hello)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;실행을 해보면 기반 클래스 Person의 속성인 hello가 잘 출력됩니다.&lt;/p&gt;
&lt;p&gt;super().&lt;strong&gt;init&lt;/strong&gt;()와 같이 기반 클래스 Person의 &lt;strong&gt;init&lt;/strong&gt; 메서드를 호출해주면 기반 클래스가 초기화되어서 속성이 만들어집니다. 실행 결과를 보면 ‘Student &lt;strong&gt;init&lt;/strong&gt;‘과 ‘Person &lt;strong&gt;init&lt;/strong&gt;‘이 모두 출력되었습니다.&lt;/p&gt;
&lt;p&gt;기반 클래스 Person의 속성 hello를 찾는 과정을 그림으로 나타내면 다음과 같은 모양이 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://dojang.io/pluginfile.php/13907/mod_page/content/3/036004.png&quot; alt=&quot;기반클래스 속성찾기 로직&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;기반-클래스를-초기화하지-않아도-되는-경우&quot;&gt;&lt;a href=&quot;#%EA%B8%B0%EB%B0%98-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EC%B4%88%EA%B8%B0%ED%99%94%ED%95%98%EC%A7%80-%EC%95%8A%EC%95%84%EB%8F%84-%EB%90%98%EB%8A%94-%EA%B2%BD%EC%9A%B0&quot; aria-label=&quot;기반 클래스를 초기화하지 않아도 되는 경우 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;기반 클래스를 초기화하지 않아도 되는 경우&lt;/h3&gt;
&lt;p&gt;만약 파생 클래스에서 &lt;strong&gt;init&lt;/strong&gt; 메서드를 생략한다면 기반 클래스의 &lt;strong&gt;init&lt;/strong&gt;이 자동으로 호출되므로 super()는 사용하지 않아도 됩니다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Python Apprenticeship Study Part.8]]></title><description><![CDATA[예외처리]]></description><link>https://ctsictai.github.io//posts/python-part8/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/python-part8/</guid><pubDate>Tue, 22 Oct 2019 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;예외처리&quot;&gt;&lt;a href=&quot;#%EC%98%88%EC%99%B8%EC%B2%98%EB%A6%AC&quot; aria-label=&quot;예외처리 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;예외처리&lt;/h1&gt;
&lt;h1 id=&quot;1-try---exception&quot;&gt;&lt;a href=&quot;#1-try---exception&quot; aria-label=&quot;1 try   exception permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. TRY - EXCEPTION&lt;/h1&gt;
&lt;p&gt;try에 실행할 코드를 넣고 except에 예외가 발생했을 때 처리하는 코드를 넣습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;try:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;실행할 코드&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;except:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;예외가 발생했을 때 처리하는 코드&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;20을 정수값을 가진 x 로 나누는 코드를 예를 들면&lt;/p&gt;
&lt;p&gt;다른 숫자는 상관없지만 x가 0인 경우는 연산이 되지 않는다.&lt;/p&gt;
&lt;p&gt;이 때 처리를 어떻게 할 것인가&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;try:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;x = int(input(‘나눌 숫자를 입력하세요: ‘))&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;y = 20 / x
print(y)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;except: # 예외가 발생했을 때 실행됨&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;print(‘예외가 발생했습니다.‘)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;x가 0인 경우에는 예외로 간주하여 except에 코딩된 print가 처리 된다.&lt;/p&gt;
&lt;h2 id=&quot;그러면-특정-예외만-처리하고-싶은-경우에는-어떻게-해야-할까&quot;&gt;&lt;a href=&quot;#%EA%B7%B8%EB%9F%AC%EB%A9%B4-%ED%8A%B9%EC%A0%95-%EC%98%88%EC%99%B8%EB%A7%8C-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B3%A0-%EC%8B%B6%EC%9D%80-%EA%B2%BD%EC%9A%B0%EC%97%90%EB%8A%94-%EC%96%B4%EB%96%BB%EA%B2%8C-%ED%95%B4%EC%95%BC-%ED%95%A0%EA%B9%8C&quot; aria-label=&quot;그러면 특정 예외만 처리하고 싶은 경우에는 어떻게 해야 할까 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;그러면 특정 예외만 처리하고 싶은 경우에는 어떻게 해야 할까?&lt;/h2&gt;
&lt;p&gt;다음과 같이 정수 두 개를 입력받아서 하나는 리스트의 인덱스로 사용하고, 하나는 나누는 값으로 사용합니다.&lt;br&gt;
그리고 except를 두 개 사용하고 각각 ZeroDivisionError와 IndexError를 지정합니다.&lt;/p&gt;
&lt;p&gt;y = [10, 20, 30]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;try:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;index, x = map(int, input(‘인덱스와 나눌 숫자를 입력하세요: ‘).split())&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;print(y[index] / x)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;except ZeroDivisionError: # 숫자를 0으로 나눠서 에러가 발생했을 때 실행됨&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;print(‘숫자를 0으로 나눌 수 없습니다.‘)  0으로 나눌 경우&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;except IndexError: # 범위를 벗어난 인덱스에 접근하여 에러가 발생했을 때 실행됨&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;print(‘잘못된 인덱스입니다.‘)  실수 넣었을 때&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;주석에 쓰여져 있는 대로 숫자를 0으로 나누는 경우와 인덱스 범위를 넣었을 경우 두 가지 경우를 특정하여 예외처리를 할 수 있다.&lt;/p&gt;
&lt;h2 id=&quot;예외의-에러-메시지-받아오기&quot;&gt;&lt;a href=&quot;#%EC%98%88%EC%99%B8%EC%9D%98-%EC%97%90%EB%9F%AC-%EB%A9%94%EC%8B%9C%EC%A7%80-%EB%B0%9B%EC%95%84%EC%98%A4%EA%B8%B0&quot; aria-label=&quot;예외의 에러 메시지 받아오기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;예외의 에러 메시지 받아오기&lt;/h2&gt;
&lt;p&gt;except에서 as 뒤에 변수를 지정하면 발생한 예외의 에러 메시지를 받아올 수 있습니다.&lt;/p&gt;
&lt;p&gt;앞에서 만든 코드의 except에 as e를 넣습니다. 보통 예외( exception)의 e를 따서 변수 이름을 e로 짓습니다&lt;/p&gt;
&lt;p&gt;y = [10, 20, 30]&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;try:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;index, x = map(int, input(‘인덱스와 나눌 숫자를 입력하세요: ‘).split())&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;print(y[index] / x)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;except ZeroDivisionError as e:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;print(‘숫자를 0으로 나눌 수 없습니다.’, e)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;except IndexError as e:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;print(‘잘못된 인덱스입니다.’, e)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;as e&lt;/strong&gt; 를 넣어서 달라지는 점은 무엇일까?&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;0으로 나누는 경우인 ZeroDivisionError를 발생해보면&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;인덱스와 나눌 숫자를 입력하세요: 2 0 (입력)
숫자를 0으로 나눌 수 없습니다. (division by zero) --&amp;gt; ()내용이 **as e**로 지정해서 나온 것이다&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;정수가 아닌 실수를 입력하여 IndexError를 발생시키면?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;인덱스와 나눌 숫자를 입력하세요: 3.1 5 (입력)
잘못된 인덱스입니다. (list index out of range) --&amp;gt; 이게 e로 지정한 것&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h1 id=&quot;else와-finally&quot;&gt;&lt;a href=&quot;#else%EC%99%80-finally&quot; aria-label=&quot;else와 finally permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Else와 Finally&lt;/h1&gt;
&lt;p&gt;이번에는 예외가 발생하지 않았을 때 코드를 실행하는 else를 사용해보겠습니다. 다음과 같이 else는 except 바로 다음에 와야 하며 except를 생략할 수 없습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;try:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;실행할 코드&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;except:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;예외가 발생했을 때 처리하는 코드&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;else:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;예외가 발생하지 않았을 때 실행할 코드&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;예외와는-상관없이-항상-코드-실행하기finally&quot;&gt;&lt;a href=&quot;#%EC%98%88%EC%99%B8%EC%99%80%EB%8A%94-%EC%83%81%EA%B4%80%EC%97%86%EC%9D%B4-%ED%95%AD%EC%83%81-%EC%BD%94%EB%93%9C-%EC%8B%A4%ED%96%89%ED%95%98%EA%B8%B0finally&quot; aria-label=&quot;예외와는 상관없이 항상 코드 실행하기finally permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;예외와는 상관없이 항상 코드 실행하기(finally)&lt;/h2&gt;
&lt;p&gt;이번에는 예외 발생 여부와 상관없이 항상 코드를 실행하는 finally를 사용해보겠습니다.&lt;br&gt;
특히 finally는 except와 else를 생략할 수 있습니다. Finally는 코드가 끝나면 무조건 마지막에 실행되는 코드를 말한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;try:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;실행할 코드&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;except:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;예외가 발생했을 때 처리하는 코드&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;else:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;예외가 발생하지 않았을 때 실행할 코드&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;finally:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;예외 발생여부가 상관없이 무조건 마지막에 실행되는 코드&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/99611C4C5D4AE03E28&quot; alt=&quot;try-except-else-finally&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;예외-발생시키기&quot;&gt;&lt;a href=&quot;#%EC%98%88%EC%99%B8-%EB%B0%9C%EC%83%9D%EC%8B%9C%ED%82%A4%EA%B8%B0&quot; aria-label=&quot;예외 발생시키기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;예외 발생시키기&lt;/h2&gt;
&lt;p&gt;예외를 발생시킬 때는 raise에 예외를 지정하고 에러 메시지를 넣습니다(에러 메시지는 생략 할 수 있음).&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;raise 예외(‘에러메시지’)&lt;/li&gt;
&lt;li&gt;raise의 처리 과정&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;def three_multiple():&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;x = int(input(‘3의 배수를 입력하세요: ‘))&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;if x % 3 != 0:                            # x가 3의 배수가 아니면
    raise Exception(&amp;#39;3의 배수가 아닙니다.&amp;#39;)    # 예외를 발생시킴
print(x)                             # 현재 함수 안에는   except가 없으므로

        # 예외를 상위 코드 블록으로 넘김&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;try:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;three_multiple()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;except Exception as e: # 하위 코드 블록에서 예외가 발생해도 실행됨&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;print(‘예외가 발생했습니다.’, e)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;이 코드를 x에 3의 배수가 아닌 수를 넣고 실행을 해보면 결과가&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;예외가 발생했습니다. 3의 배수가 아닙니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;이렇게 발생합니다. except가 출력되고 Exception에서 준 내용이 출력되는 형식입니다.&lt;/p&gt;
&lt;p&gt;three_multiple 함수는 안에 try except가 없는 상태에서 raise로 예외를 발생시켰습니다.&lt;br&gt;
이렇게 되면 함수 바깥에 있는 except에서 예외가 처리됩니다. 즉, 예외가 발생하더라도 현재 코드 블록에서 처리해줄 except가 없다면 except가 나올 때까지 계속 상위 코드 블록으로 올라갑니다.&lt;/p&gt;
&lt;p&gt;함수안의 local scope와 바깥의 global scope 구분을 잘해야 합니다.&lt;/p&gt;
&lt;h2 id=&quot;예외-다시-발생-시키기&quot;&gt;&lt;a href=&quot;#%EC%98%88%EC%99%B8-%EB%8B%A4%EC%8B%9C-%EB%B0%9C%EC%83%9D-%EC%8B%9C%ED%82%A4%EA%B8%B0&quot; aria-label=&quot;예외 다시 발생 시키기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;예외 다시 발생 시키기&lt;/h2&gt;
&lt;p&gt;이번에는 try except에서 처리한 예외를 다시 발생시키는 방법입니다.&lt;br&gt;
except 안에서 raise를 사용하면 현재 예외를 다시 발생시킵니다(re-raise).&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;except:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;raise ~~~&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;assert로-예외-발생시키기추가-내용&quot;&gt;&lt;a href=&quot;#assert%EB%A1%9C-%EC%98%88%EC%99%B8-%EB%B0%9C%EC%83%9D%EC%8B%9C%ED%82%A4%EA%B8%B0%EC%B6%94%EA%B0%80-%EB%82%B4%EC%9A%A9&quot; aria-label=&quot;assert로 예외 발생시키기추가 내용 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;assert로 예외 발생시키기(추가 내용)&lt;/h3&gt;
&lt;p&gt;예외를 발생시키는 방법 중에는 assert를 사용하는 방법도 있습니다.&lt;br&gt;
assert는 지정된 조건식이 거짓일 때 AssertionError 예외를 발생시키며 조건식이 참이면 그냥 넘어갑니다. 보통 assert는 나와서는 안 되는 조건을 검사할 때 사용합니다.&lt;/p&gt;
&lt;p&gt;x = int(input(‘3의 배수를 입력하세요: ‘))&lt;br&gt;
assert x % 3 == 0, ‘3의 배수가 아닙니다.’ # 3의 배수가 아니면 예외 발생, 3의 배수이면 그냥 넘어감&lt;br&gt;
print(x)&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Python Apprenticeship Study Part.7]]></title><description><![CDATA[Scope]]></description><link>https://ctsictai.github.io//posts/python-part7/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/python-part7/</guid><pubDate>Tue, 22 Oct 2019 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;scope&quot;&gt;&lt;a href=&quot;#scope&quot; aria-label=&quot;scope permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SCOPE&lt;/h1&gt;
&lt;p&gt;프로그래밍 언어에서 Scope는 어떠한 객체가 유효한 범위를 뜻한다.
해당 범위를 벗어난다면 객체는 사용할 수 없다.&lt;/p&gt;
&lt;p&gt;Python에서 scope은 항상 객체가 선언된 지점에서 위로는 상위 객체 까지, 아래로는 모든 하위 객체들과 그 안에까지가 범위 입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://wellsr.com/python/assets/images/2018-09-07-scopes-diagram.png&quot; alt=&quot;SCOPE&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;local-scope&quot;&gt;&lt;a href=&quot;#local-scope&quot; aria-label=&quot;local scope permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Local Scope&lt;/h2&gt;
&lt;p&gt;Local scope을 가지고 있는 변수나 함수 혹은 객체는 이름 그대로 특정 범위에서만 유효합니다.&lt;br&gt;
주로 함수 안에서 선언된 변수나 함수가 local scope을 가지고 있습니다. 그리고 이러한 변수들은 해당 함수 안에서만 유효합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;def func():&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a = 4&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;print(a) --&amp;gt; local scope --&amp;gt; 정상 출력&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;print(a) —&gt; 함수를 벗어남(유효범위 밖) —&gt; 에러 메세지 출력&lt;/p&gt;
&lt;h2 id=&quot;enclosing-scope&quot;&gt;&lt;a href=&quot;#enclosing-scope&quot; aria-label=&quot;enclosing scope permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Enclosing Scope&lt;/h2&gt;
&lt;p&gt;Nested function가 있을 때 적용되는 scope.&lt;br&gt;
부모 함수에서 선언된 변수는 중첩함수 안에서도 유효한 범위를 가지고 있습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;def func():&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a = 4&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;print(a) --&amp;gt; local scope --&amp;gt; 정상 출력&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;def inner():&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;b = 1&lt;br&gt;
print(a+b) —&gt; a는 enclosing b는 local scope —&gt; 정상 출력
print(b) —&gt; b는 inner함수에서만 작동하므로 —&gt; 에러&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;global-scope&quot;&gt;&lt;a href=&quot;#global-scope&quot; aria-label=&quot;global scope permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Global Scope&lt;/h2&gt;
&lt;p&gt;Global scope은 함수 안에서 선언된것이 아닌 함수 밖에서 선언된 변수나 함수를 이야기 합니다.&lt;br&gt;
변수나 함수는 선언된 지점과 동일한 level의 지역, 그리고 더 안쪽의 지역들까지 범위가 유효합니다.&lt;/p&gt;
&lt;p&gt;그리고 global scope을 가지고 있는 변수와 함수들은 선언된 지점이 해당 파일에서 가장 바깥쪽에서 선언되므로 해당 파일에서 선언된 지점 아래로는 다 유효한 범위를 가지고 있습니다. 그래서 “Global” scope 이라고 하는 것입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://t1.daumcdn.net/cfile/tistory/9990474B5B4607D014&quot; alt=&quot;global vs local&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;built-in-scope&quot;&gt;&lt;a href=&quot;#built-in-scope&quot; aria-label=&quot;built in scope permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Built-in Scope&lt;/h2&gt;
&lt;p&gt;Built-in scope은 scope중 가장 광범위한 scope입니다.&lt;br&gt;
파이썬안에 내장되어 있는, 파이썬이 제공하는 함수 또는 속성들이 built-in scope를 가지고 있습니다.&lt;/p&gt;
&lt;p&gt;그리고 built-in scope는 따로 선언이 없이도 모든 파이썬 파일에서 유효한 범위를 가지고 있습니다.&lt;br&gt;
예를 들어, list등과 같은 자료구조의 element 총 개수를 리턴하는 len 함수가 바로 built-in scope를 가지고 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;shadowing&quot;&gt;&lt;a href=&quot;#shadowing&quot; aria-label=&quot;shadowing permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Shadowing&lt;/h2&gt;
&lt;p&gt;파이썬은 변수나 함수의 정의를 찾을때 다음 순서의 scope들 안에서 찾습니다.&lt;br&gt;
Local =&gt; Enclosing =&gt; Global =&gt; Built-in&lt;/p&gt;
&lt;p&gt;그러므로 만일 동일한 이름의 변수들이 서로 다른 scope에서 선언이 되면 더 좁은 범위에 있는 변수(혹은 함수)가 더 넓은 범위에 있는 변수를 가리는 (shadowing)효과가 나타납니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;변수 이름 중복이 안되도록 네이밍에 신경써야 한다.&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[Python Apprenticeship Study Part.9]]></title><description><![CDATA[Decorator]]></description><link>https://ctsictai.github.io//posts/python-part9/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/python-part9/</guid><pubDate>Tue, 22 Oct 2019 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;decorator&quot;&gt;&lt;a href=&quot;#decorator&quot; aria-label=&quot;decorator permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Decorator&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;@decorator명&lt;/strong&gt; —&gt; 데코레이터 선언&lt;/p&gt;
&lt;p&gt;함수 앞뒤에 기능을 추가해서 손쉽게 함수를 활용할 수 있는 기법&lt;br&gt;
여러 함수에 동일한 기능을 @데코레이터 하나로 간편하게 추가할 수 있다.&lt;br&gt;
중첩 함수를 만드는 데 있어서 좀 더 편리한 기능이다.&lt;br&gt;
중첩 함수를 만드는데 있어서 그 중첩 함수를 글로벌하게 데코레이터로써 쓸 수 있다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;대표적인 데코레이터&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;@staticmethod / @classmethod 등 class에서 메소드에 선언할 때 많이 씀&lt;/li&gt;
&lt;li&gt;@auth 웹 페이지 상에서 signin 된 상태를 증명하기 위한 인가 증명에서 많이 쓰인다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;데코레이터-작성하기&quot;&gt;&lt;a href=&quot;#%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0-%EC%9E%91%EC%84%B1%ED%95%98%EA%B8%B0&quot; aria-label=&quot;데코레이터 작성하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;데코레이터 작성하기&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;def datetime&lt;em&gt;decorator(func): # &amp;#x3C;--- datetime&lt;/em&gt;decorator 는 데코레이터 이름, func 가 이 함수 안에 넣을 함수가 됨&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;def wrapper(): # &amp;#x3C;--- 호출할 함수를 감싸는 함수&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;print (‘time ’ + str(datetime.datetime.now())) # &amp;#x3C;--- 함수 앞에서 실행할 내용&lt;br&gt;
func() # &amp;#x3C;--- 함수(데코레이터 적용시킬)&lt;br&gt;
print (datetime.datetime.now()) # &amp;#x3C;--- 함수 뒤에서 실행할 내용
return wrapper # &amp;#x3C;--- closure 함수로 만든다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;기본 구조는 함수를 인자로 불러와서 그 함수를 함수안에서 사용한다는 개념이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;print (‘time ’ + str(datetime.datetime.now())) 부분은
데코레이터 적용할 함수 전에 실행할 로직이 들어가는 부분&lt;/li&gt;
&lt;li&gt;print (datetime.datetime.now()) 부분은 데코레이터 적용할 함수의 로직이 끝난 뒤 실행할 로직이 들어가는 부분&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;실행할 함수 앞 뒤로 감싼 로직을 실행한다는 의미에서 wrapper라고 통상적으로 함수명을 많이 짓는다.&lt;/p&gt;
&lt;h2 id=&quot;매개변수와-반환값이-있는-데코레이터&quot;&gt;&lt;a href=&quot;#%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EC%99%80-%EB%B0%98%ED%99%98%EA%B0%92%EC%9D%B4-%EC%9E%88%EB%8A%94-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0&quot; aria-label=&quot;매개변수와 반환값이 있는 데코레이터 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;매개변수와 반환값이 있는 데코레이터&lt;/h2&gt;
&lt;p&gt;def trace(func): # 호출할 함수를 매개변수로 받음&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;def wrapper(a, b): # 호출할 함수 add(a, b)의 매개변수와 똑같이 지정&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;r = func(a, b) # func에 매개변수 a, b를 넣어서 호출하고 반환값을 변수에 저장&lt;br&gt;
print(‘{0}(a={1}, b={2}) -&gt; {3}‘.format(func.&lt;strong&gt;name&lt;/strong&gt;, a, b, r)) # 매개변수와 반환값 출력&lt;br&gt;
return r # func의 반환값을 반환&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;return wrapper        # wrapper 함수 반환&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;@trace # @데코레이터&lt;br&gt;
def add(a, b): # 매개변수는 두 개&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;return a + b # 매개변수 두 개를 더해서 반환&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;print(add(10, 20))&lt;/p&gt;
&lt;p&gt;이렇게 되면 결과값은&lt;/p&gt;
&lt;p&gt;add(a=10, b=20) -&gt; 30&lt;br&gt;
30&lt;/p&gt;
&lt;p&gt;이 데코레이터와 함수에서는 데코레이터 함수 내에서 함수를 호출해 변수에 저장 후에 변수를 return하는 방식으로 로직이 구성되었다.&lt;br&gt;
그렇기 때문에 print가 먼저 실행되고 add 함수의 return이 나중에 실행된 것이다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;순서와 함수 호출 여부를 잘 봐야 한다&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;가변인자-매개변수와-반환값이-있는-데코레이터&quot;&gt;&lt;a href=&quot;#%EA%B0%80%EB%B3%80%EC%9D%B8%EC%9E%90-%EB%A7%A4%EA%B0%9C%EB%B3%80%EC%88%98%EC%99%80-%EB%B0%98%ED%99%98%EA%B0%92%EC%9D%B4-%EC%9E%88%EB%8A%94-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0&quot; aria-label=&quot;가변인자 매개변수와 반환값이 있는 데코레이터 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;가변인자 매개변수와 반환값이 있는 데코레이터&lt;/h2&gt;
&lt;p&gt;위의 과정은 매개변수가 고정되어 있는 함수이다.&lt;br&gt;
매개변수(인수)가 고정되지 않은 함수는 어떻게 처리할까요? 이때는 wrapper 함수를 가변 인수 함수로 만들면 됩니다.&lt;/p&gt;
&lt;p&gt;def trace(func): # 호출할 함수를 매개변수로 받음&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;def wrapper(*args, **kwargs): # 가변 인수 함수로 만듦&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;r = func(*args, **kwargs) # func에 args, kwargs를 언패킹하여 넣어줌&lt;br&gt;
print(‘{0}(args={1}, kwargs={2}) -&gt; {3}‘.format(func.&lt;strong&gt;name&lt;/strong&gt;, args, kwargs, r)) # 매개변수와 반환값 출력&lt;br&gt;
return r # func의 반환값을 반환&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;return wrapper # wrapper 함수 반환&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;@trace # @데코레이터&lt;br&gt;
def get_max(*args): # 위치 인수를 사용하는 가변 인수 함수&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;return max(args)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;@trace # @데코레이터&lt;br&gt;
def get_min(**kwargs): # 키워드 인수를 사용하는 가변 인수 함수&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;return min(kwargs.values())&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;결과값&lt;br&gt;
print(get&lt;em&gt;max(10, 20))&lt;br&gt;
print(get&lt;/em&gt;min(x=10, y=20, z=30))&lt;/p&gt;
&lt;p&gt;get&lt;em&gt;max(args=(10, 20), kwargs={}) -&gt; 20&lt;br&gt;
20&lt;br&gt;
get&lt;/em&gt;min(args=(), kwargs={‘x’: 10, ‘y’: 20, ‘z’: 30}) -&gt; 10&lt;br&gt;
10&lt;/p&gt;
&lt;p&gt;고정 인자 함수와의 차이점은 wrapper 함수의 인자가 가변인자로 바뀐다는 점이다.&lt;/p&gt;
&lt;h2 id=&quot;method-decorator&quot;&gt;&lt;a href=&quot;#method-decorator&quot; aria-label=&quot;method decorator permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Method Decorator&lt;/h2&gt;
&lt;p&gt;클래스메서드나 정적메서드 데코레이터 사용하듯이 클래스의 메소드에 사용되어지는 데코레이터&lt;/p&gt;
&lt;p&gt;def h1_tag(function):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;def func_wrapper(self, *args, **kwargs): # &amp;#x3C;--- self 를 무조건 첫 파라미터로 넣어야 메서드에 적용가능(클래스에 적용하기 위한)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;return “{0}“.format(function(self, *args, **kwargs)) # &amp;#x3C;--- function 함수에도 self 를 넣어야 함&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;return func_wrapper&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;클래스-선언시-메서드에-데코레이터-적용하기&quot;&gt;&lt;a href=&quot;#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%84%A0%EC%96%B8%EC%8B%9C-%EB%A9%94%EC%84%9C%EB%93%9C%EC%97%90-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0-%EC%A0%81%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;클래스 선언시 메서드에 데코레이터 적용하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;클래스 선언시 메서드에 데코레이터 적용하기&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;@staticmethod / @classmethod와 비슷&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;class Person:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;def &lt;strong&gt;init&lt;/strong&gt;(self, first&lt;em&gt;name, last&lt;/em&gt;name):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;self.first&lt;em&gt;name = first&lt;/em&gt;name&lt;br&gt;
self.last&lt;em&gt;name = last&lt;/em&gt;name&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;@h1&lt;em&gt;tag&lt;br&gt;
def get&lt;/em&gt;name(self):&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;return self.first&lt;em&gt;name + ’ ’ + self.last&lt;/em&gt;name – 리턴값 1개!- 위에서 첫번째 인자 {0}으로 인식되어서 들어감&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;데코레이터 적용 확인해보기&lt;br&gt;
davelee = Person(‘Lee’, ‘Dave’)&lt;br&gt;
print(davelee.get_name())&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Lee Dave&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;파라미터를-가지고-있는-데코레이터&quot;&gt;&lt;a href=&quot;#%ED%8C%8C%EB%9D%BC%EB%AF%B8%ED%84%B0%EB%A5%BC-%EA%B0%80%EC%A7%80%EA%B3%A0-%EC%9E%88%EB%8A%94-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0&quot; aria-label=&quot;파라미터를 가지고 있는 데코레이터 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;파라미터를 가지고 있는 데코레이터&lt;/h2&gt;
&lt;p&gt;def name&lt;em&gt;decorator(char): - #char는 name&lt;/em&gt;decorator에 적용될 파라미터 -파라미터 적용을 위한 함수&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;def real_deco(func): - #실제 데코레이터 함수 적용 (func) 적용할 함수 인자로 불러&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;def wrapper(): - # 감쌀꺼 func이 greetings() – none param —&gt; wrapper no param # 혹 적용할 함수에 인자가 있으면 같이 적용해주자&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;return func() + char # func에 데코에서 받은 인자 char를 더해줌(둘 다 str type)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;return wrapper - 리턴 (wrapper 함수 자체를)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;return real_deco – 최종 리턴 – 이래야 함수 실행됨 (함수자체를 리턴해버리니까)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;@name_decorator(“정우성”) – 데코에 파라미터 char가 적용된 모습
def greeting():&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;return “Hello, ”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;결과값&lt;br&gt;
print(greeting())&lt;br&gt;
Hello, 정우성&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Python Apprenticeship Study Part.5]]></title><description><![CDATA[While/Function/Module&Package/Closure/Reduce]]></description><link>https://ctsictai.github.io//posts/python-part5/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/python-part5/</guid><pubDate>Mon, 21 Oct 2019 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;while문&quot;&gt;&lt;a href=&quot;#while%EB%AC%B8&quot; aria-label=&quot;while문 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;While문&lt;/h1&gt;
&lt;p&gt;while 구문은 특정 조건문이 True 일동안 코드블록을 반복 실행 합니다.&lt;/p&gt;
&lt;h2 id=&quot;while-else&quot;&gt;&lt;a href=&quot;#while-else&quot; aria-label=&quot;while else permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;While Else&lt;/h2&gt;
&lt;p&gt;파이썬의 while문은 else 문이 추가 될 수 있습니다.&lt;br&gt;
if 문의 else 문과 유사합니다. If 문의 else 문은 if 문의 조건문이 False이면 실행됩니다.&lt;br&gt;
While문의 else 문도 while의 조건문이 False 이면 실행됩니다.&lt;br&gt;
즉 while문이 종료되면 else 문이 실행된다는 뜻입니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://qph.fs.quoracdn.net/main-qimg-e45ba5aa18aeafb2de3789317bf8e662&quot; alt=&quot;while-else&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;함수function&quot;&gt;&lt;a href=&quot;#%ED%95%A8%EC%88%98function&quot; aria-label=&quot;함수function permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;함수(Function)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;함수의 개념&lt;/li&gt;
&lt;li&gt;Input을 받아서&lt;/li&gt;
&lt;li&gt;어떠한 계산 혹은 로직을 실행하고&lt;/li&gt;
&lt;li&gt;Output을 생성하는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;파이썬 함수에서 Input을 parameter라고 하고 Output을 Return이라 한다&lt;/p&gt;
&lt;p&gt;def 함수명(매개변수):&lt;/p&gt;
&lt;p&gt;&amp;#x3C;수행할 문장1&gt;&lt;br&gt;
&amp;#x3C;수행할 문장2&gt;&lt;br&gt;
return 리턴할 값(optional)&lt;/p&gt;
&lt;h2 id=&quot;parameter-vs-argument&quot;&gt;&lt;a href=&quot;#parameter-vs-argument&quot; aria-label=&quot;parameter vs argument permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Parameter vs Argument&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Parameter&lt;/th&gt;
&lt;th&gt;Argument&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;함수에 입력으로 전달된 값을 받는 변수&lt;/td&gt;
&lt;td&gt;함수를 호출할 때 전달되는 입력 값&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;def add(a, b): # &lt;strong&gt;a, b는 매개변수&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;return a+b&lt;/p&gt;
&lt;p&gt;print(add(3, 4)) # &lt;strong&gt;3, 4는 인수&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&quot;input과-output-형태에-따른-함수의-형태&quot;&gt;&lt;a href=&quot;#input%EA%B3%BC-output-%ED%98%95%ED%83%9C%EC%97%90-%EB%94%B0%EB%A5%B8-%ED%95%A8%EC%88%98%EC%9D%98-%ED%98%95%ED%83%9C&quot; aria-label=&quot;input과 output 형태에 따른 함수의 형태 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Input과 output 형태에 따른 함수의 형태&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;일반적인 함수&lt;/li&gt;
&lt;li&gt;입력값 – 파라미터든 인자든 여기서는 파라미터 (a, b)가 있다&lt;/li&gt;
&lt;li&gt;출력값 – return result 가 존재함&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;def add(a, b):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;result = a + b
return result&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;입력값이 없는 함수&lt;/li&gt;
&lt;li&gt;입력값 – () 이게 지정이 안되어 있는 함수!&lt;/li&gt;
&lt;li&gt;출력값 – return ‘Hi’ 로 지정은 되어 있음&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;def say():&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;    return &amp;#39;Hi&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;em&gt;함수 호출하여 출력값 보이게 하려면?&lt;/em&gt;&lt;br&gt;
A = say() # 입력값을 안넣어야 – 앞에서 함수 정의 했던것과 동일하게&lt;br&gt;
Print(a) =&gt; Hi&lt;/p&gt;
&lt;ol start=&quot;3&quot;&gt;
&lt;li&gt;출력값이 없는 함수&lt;/li&gt;
&lt;li&gt;입력값 – a, b 파라미터&lt;/li&gt;
&lt;li&gt;출력값 – return 이 없음&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;def add(a, b):&lt;/p&gt;
&lt;p&gt;print(“%d, %d의 합은 %d입니다.” % (a, b, a+b))&lt;/p&gt;
&lt;h3 id=&quot;주의&quot;&gt;&lt;a href=&quot;#%EC%A3%BC%EC%9D%98&quot; aria-label=&quot;주의 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;&lt;strong&gt;주의&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;print는 리턴값이 아니고 상태를 출력해서 보여주는 명령어에 불과함 리턴값이 아님! 위의 함수를 리턴값을 찾으면 None 출력&lt;/li&gt;
&lt;li&gt;리턴값이 없다는 얘기&lt;/li&gt;
&lt;li&gt;입, 출력값이 없는 함수&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;def say():&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; print(&amp;#39;Hi&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;★ 함수를 사용할 단 한가지 방법 – 입출력값이 모두 없기 때문에&lt;/p&gt;
&lt;p&gt;say() – 이렇게 하는 수 밖에! —&gt; 함수이름()&lt;/p&gt;
&lt;p&gt;Hi&lt;/p&gt;
&lt;h2 id=&quot;입력값이-몇-개인지-정확히-모른다면&quot;&gt;&lt;a href=&quot;#%EC%9E%85%EB%A0%A5%EA%B0%92%EC%9D%B4-%EB%AA%87-%EA%B0%9C%EC%9D%B8%EC%A7%80-%EC%A0%95%ED%99%95%ED%9E%88-%EB%AA%A8%EB%A5%B8%EB%8B%A4%EB%A9%B4&quot; aria-label=&quot;입력값이 몇 개인지 정확히 모른다면 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;입력값이 몇 개인지 정확히 모른다면?&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Non-keyworded variable length of arguments&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;def add_many(&lt;em&gt;args): &amp;#x3C;— *args – 입력값이 여러 개인 것을 알려주는 명령어 \&lt;/em&gt;이것만인데 args도 세트로 같이 쓴다.&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; result = 0
 for i in args:
 result = result + i
 return result&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;호출 시&lt;/p&gt;
&lt;p&gt;Add&lt;em&gt;many(1, 2, 3, 4) or Add&lt;/em&gt;many(1, 2, 3, 4, 5 …..) or Add_many()&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;모두 가능(list형태로 들어가서 순서가 매우 중요)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Keyworded variable length of arguments&lt;/li&gt;
&lt;li&gt;Argument 수를 0부터 N까지 유동적으로 넘겨줄 수 있습니다.&lt;/li&gt;
&lt;li&gt;Keyword가 미리 정해져 있지 않기때문에 원하는 keyword를 유동적으로 사용할 수 있습니다.&lt;/li&gt;
&lt;li&gt;Keyworded variable length of arguments는 dictionary 형태로 지정됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;def buy&lt;em&gt;A&lt;/em&gt;car(**kwargs):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;print(f&amp;quot;다음 사양의 자동차를 구입하십니다:&amp;quot;)

for option in kwargs:
    print(f&amp;quot;{option} : {kwargs[option]}&amp;quot;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;호출 시&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;buy_A_car(seat=&amp;quot;가죽&amp;quot;, blackbox=&amp;quot;최신&amp;quot;, tint=&amp;quot;yes&amp;quot;)&lt;/code&gt; - dict type 형태로 들어감 순서가 중요하지 않음&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;mixing args and kwargs&lt;br&gt;
둘 다 쓰면 parameter에 있어서 굉장히 유동적인 함수가 가능함&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;def do_something(*args, **kwargs):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; ## some code here...
 ....&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;호출 시&lt;/p&gt;
&lt;p&gt;do&lt;em&gt;something(1, 2, 3, name=“정우성”, age=45)&lt;br&gt;
do&lt;/em&gt;something(1, 2, 3, 4, 5, “hello”, {“주소” : “서울”, “국가” : “한국”})&lt;br&gt;
do&lt;em&gt;something(name=“정우성”, gender=“남”, height=“187”)&lt;br&gt;
do&lt;/em&gt;something(1)&lt;br&gt;
do_something()&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;modules--package&quot;&gt;&lt;a href=&quot;#modules--package&quot; aria-label=&quot;modules  package permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Modules &amp;#x26; package&lt;/h1&gt;
&lt;p&gt;변수나 함수 or 클래스 등을 모아 놓은 파일&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;하는 이유는 ?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;다른 파일에서 재사용이 가능&lt;/li&gt;
&lt;li&gt;코드를 나누어서 정리하고 유지보수가 좋게 하기 위해서&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;모듈패키지-불러오기&quot;&gt;&lt;a href=&quot;#%EB%AA%A8%EB%93%88%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0&quot; aria-label=&quot;모듈패키지 불러오기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;모듈&amp;#x26;패키지 불러오기&lt;/h1&gt;
&lt;p&gt;From 모듈 이름 import 함수/변수/ 클래스, …… as 닉네임&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;닉네임 : 이 파일 안에서 모듈을 사용하기위한 임시이름&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;클로져closure&quot;&gt;&lt;a href=&quot;#%ED%81%B4%EB%A1%9C%EC%A0%B8closure&quot; aria-label=&quot;클로져closure permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;클로져(closure)&lt;/h1&gt;
&lt;ol&gt;
&lt;li&gt;중첩 함수가 부모 함수의 변수나 정보를 중첩 함수 내에서 사용한다&lt;/li&gt;
&lt;li&gt;부모 함수는 리턴값으로 중첩 함수를 리턴한다.&lt;/li&gt;
&lt;li&gt;부모 함수에서 리턴 했으므로 부모 함수의 변수는 직접적인 접근이 불가능 하지만 부모 함수가 리턴한 중첩 함수를 통해서 사용될수 있다.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;그렇다면 closure는 언제 사용하는 것일까요?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; 어떠한 정보를 기반으로 연산을 실행하고 싶지만 기반이 되는 정보는 접근을 제한하여 노출이 되거나 수정이 되지 못하게 하고 싶을때 사용합니다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;주로 factory 패턴을 구현할때 사용되는데요, factory는 공장이란 뜻이죠.
즉 뭔가를 생성해내는 패턴입니다. 주로 함수나 오브젝트를 생성해내는데 사용됩니다.&lt;br&gt;
Factory에서 뭔가를 생성해 내기 위해서는 설정값이 필요할것입니다.
그 설정값을 노출하지 않아서 수정이 불가능하게 하면서 해당 설정값을 기반으로한 연산을 할 수 있는 함수를 만들때 closure를 사용할 수 있습니다.&lt;/p&gt;
&lt;p&gt;def generate&lt;em&gt;power(base&lt;/em&gt;number):
def nth&lt;em&gt;power(power):
return base&lt;/em&gt;number ** power&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;return nth_power&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;blockquote&gt;
&lt;p&gt;호출 시&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;calculate&lt;em&gt;power&lt;/em&gt;of&lt;em&gt;two = generate&lt;/em&gt;power(2) – 부모 함수의 base_number 지정&lt;/p&gt;
&lt;p&gt;calculate&lt;em&gt;power&lt;/em&gt;of&lt;em&gt;two(7) - 부모함수의 base&lt;/em&gt;number 2는 이미 지정 되어 있고&lt;/p&gt;
&lt;p&gt;power parameter만 설정하여 대입하여 2 ** 7이 되었음&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;128&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;reduce-메서드-in-javascript&quot;&gt;&lt;a href=&quot;#reduce-%EB%A9%94%EC%84%9C%EB%93%9C-in-javascript&quot; aria-label=&quot;reduce 메서드 in javascript permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Reduce 메서드 in Javascript&lt;/h1&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;reduce()&lt;/code&gt; 메서드는 배열의 각 요소에 대해 주어진 리듀서(reducer) 함수를 실행하고, 하나의 결과값을 반환합니다.&lt;/p&gt;
&lt;p&gt;리듀서 함수는 네 개의 인자를 가집니다.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;누산기accumulator (acc)&lt;/li&gt;
&lt;li&gt;현재 값 (cur)&lt;/li&gt;
&lt;li&gt;현재 인덱스 (idx)&lt;/li&gt;
&lt;li&gt;원본 배열 (src)&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;리듀서 함수의 반환 값은 누산기에 할당되고, 누산기는 순회 중 유지되므로 결국 최종 결과는 하나의 값이 됩니다.&lt;/p&gt;
&lt;h2 id=&quot;구문&quot;&gt;&lt;a href=&quot;#%EA%B5%AC%EB%AC%B8&quot; aria-label=&quot;구문 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;구문&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;arr.reduce(callback[, initialValue])&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;parameter&quot;&gt;&lt;a href=&quot;#parameter&quot; aria-label=&quot;parameter permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;parameter&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;callback&lt;br&gt;
배열의 각 요소에 대해 실행할 함수. 다음 네 가지 인수를 받습니다. - accumulator&lt;br&gt;
누산기accmulator는 콜백의 반환값을 누적합니다. 콜백의 이전 반환값 또는, 콜백의 첫 번째 호출이면서 initialValue를 제공한 경우에는 initialValue의 값입니다. - currentValue&lt;br&gt;
처리할 현재 요소. - currentIndex Optional&lt;br&gt;
처리할 현재 요소의 인덱스. initialValue를 제공한 경우 0, 아니면 1부터 시작합니다. - array Optional&lt;br&gt;
reduce()를 호출한 배열.&lt;/li&gt;
&lt;li&gt;initialValue Optional&lt;br&gt;
callback의 최초 호출에서 첫 번째 인수에 제공하는 값. 초기값을 제공하지 않으면 배열의 첫 번째 요소를 사용합니다. 빈 배열에서 초기값 없이 reduce()를 호출하면 오류가 발생합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;콜백의 최초 호출 때 accumulator와 currentValue는 다음 두 가지 값 중 하나를 가질 수 있습니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;만약 reduce() 함수 호출에서 initialValue를 제공한 경우, accumulator는 initialValue와 같고 currentValue는 배열의 첫 번째 값과 같습니다.&lt;/li&gt;
&lt;li&gt;initialValue를 제공하지 않았다면, accumulator는 배열의 첫 번째 값과 같고 currentValue는 두 번째와 같습니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;배열이 비어있는데 initialValue도 제공하지 않으면 TypeError가 발생합니다.&lt;br&gt;
그래서 보통 initialValue를 주는 것이 안전합니다.&lt;/p&gt;
&lt;h3 id=&quot;reduce-작동방식&quot;&gt;&lt;a href=&quot;#reduce-%EC%9E%91%EB%8F%99%EB%B0%A9%EC%8B%9D&quot; aria-label=&quot;reduce 작동방식 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;reduce 작동방식&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;[0, 1, 2, 3, 4].reduce(function(accumulator, currentValue, currentIndex, array) {return accumulator + currentValue;});&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;callback&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;accumulator&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;currentValue&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;currentIndex&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;array&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;반환 값&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;1번째 호출&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;[0, 1, 2, 3, 4]&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;2번째 호출&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;[0, 1, 2, 3, 4]&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;3&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;3번째 호출&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;3&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;3&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;3&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;[0, 1, 2, 3, 4]&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;4번째 호출&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;6&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;4&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;4&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;[0, 1, 2, 3, 4]&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;reduce()가 반환하는 값으로는 마지막 콜백 호출의 반환값(10)을 사용합니다.&lt;/p&gt;
&lt;p&gt;완전한 함수 대신에 화살표 함수를 제공할 수도 있습니다. 아래 코드는 위의 코드와 같은 결과를 반환합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0, 1, 2, 3, 4].reduce( (prev, curr) =&gt; prev + curr );&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;reduce()의 두 번째 인수로 초기값을 제공하는 경우, 결과는 다음과 같습니다:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;[0, 1, 2, 3, 4].reduce(function(accumulator, currentValue, currentIndex, array)&lt;br&gt;
{
return accumulator + currentValue;
}, 10);&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;callback&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;accumulator&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;currentValue&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;currentIndex&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;array&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;반환 값&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;1번째 호출&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;0&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;[0, 1, 2, 3, 4]&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;2번째 호출&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;10&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;1&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;[0, 1, 2, 3, 4]&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;11&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;3번째 호출&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;11&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;2&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;[0, 1, 2, 3, 4]&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;4번째 호출&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;13&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;3&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;3&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;[0, 1, 2, 3, 4]&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;left&quot;&gt;5번째 호출&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;16&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;4&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;4&lt;/td&gt;
&lt;td align=&quot;left&quot;&gt;[0, 1, 2, 3, 4]&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;자세한 내용은 여기서 확인하세요&lt;/a&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Python Apprenticeship Study Part.4]]></title><description><![CDATA[if문 part2/for문/iterator]]></description><link>https://ctsictai.github.io//posts/python-part4/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/python-part4/</guid><pubDate>Sun, 20 Oct 2019 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;if문-조건&quot;&gt;&lt;a href=&quot;#if%EB%AC%B8-%EC%A1%B0%EA%B1%B4&quot; aria-label=&quot;if문 조건 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;If문 조건&lt;/h1&gt;
&lt;p&gt;if문에 정수, bool값, 문자열, 실수 다 들어감&lt;/p&gt;
&lt;h2 id=&quot;조건문에서-false로-취급되는-것들&quot;&gt;&lt;a href=&quot;#%EC%A1%B0%EA%B1%B4%EB%AC%B8%EC%97%90%EC%84%9C-false%EB%A1%9C-%EC%B7%A8%EA%B8%89%EB%90%98%EB%8A%94-%EA%B2%83%EB%93%A4&quot; aria-label=&quot;조건문에서 false로 취급되는 것들 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;조건문에서 False로 취급되는 것들&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;None&lt;/li&gt;
&lt;li&gt;False&lt;/li&gt;
&lt;li&gt;0인 숫자들 : 0, 0.0, 0j&lt;/li&gt;
&lt;li&gt;비어 있는 문자열, 리스트, 튜플. 딕셔너리, 세트 : &quot;&quot;, [], (), {}, set()&lt;/li&gt;
&lt;li&gt;클래스 인스턴스의 &lt;code class=&quot;language-text&quot;&gt;__bool__()&lt;/code&gt;, &lt;code class=&quot;language-text&quot;&gt;__len__()&lt;/code&gt;메서드가 0또는 False를 반환할 때&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;위에서 나열한 것들을 제외한 모든 요소들은 True로 취급한다.&lt;/p&gt;
&lt;h2 id=&quot;조건식을-여러개-지정하기&quot;&gt;&lt;a href=&quot;#%EC%A1%B0%EA%B1%B4%EC%8B%9D%EC%9D%84-%EC%97%AC%EB%9F%AC%EA%B0%9C-%EC%A7%80%EC%A0%95%ED%95%98%EA%B8%B0&quot; aria-label=&quot;조건식을 여러개 지정하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;조건식을 여러개 지정하기&lt;/h2&gt;
&lt;p&gt;조건식이 여러 개일 때는 논리 연산자(==, &amp;#x3C;, &gt;, &amp;#x3C; &amp;#x3C;, ….)를 활용한다는 점도 기억하자.&lt;/p&gt;
&lt;p&gt;조건식에 조건을 여러 개 붙이려면 조건에 따라 and나 or를 붙인다.&lt;/p&gt;
&lt;h1 id=&quot;nest-if문&quot;&gt;&lt;a href=&quot;#nest-if%EB%AC%B8&quot; aria-label=&quot;nest if문 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Nest If문&lt;/h1&gt;
&lt;p&gt;파이썬의 특징인 indentation으로 구분 되는 if문으로써 if문 안에 if문이 실행되는 이중 if문이다.&lt;/p&gt;
&lt;p&gt;간격이 더 들어 갈수록 중첩이 더 된 것이다.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Nest if문에서 root에 있는 if문의 return이 최종 def의 return값이 된다.&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;for문&quot;&gt;&lt;a href=&quot;#for%EB%AC%B8&quot; aria-label=&quot;for문 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;for문&lt;/h1&gt;
&lt;p&gt;List의 요소를 한번에 한개씩 가지고 for 구문 안에 있는 코드를 실행하게 됩니다.&lt;/p&gt;
&lt;p&gt;for element in list:&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; do_something_with_element&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For 문은 list 뿐만이 아니라 tuple, set 등 다른 자료구조와도 사용할 수 있습니다.&lt;/p&gt;
&lt;h2 id=&quot;range함수와-함께-사용하는-for문&quot;&gt;&lt;a href=&quot;#range%ED%95%A8%EC%88%98%EC%99%80-%ED%95%A8%EA%BB%98-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-for%EB%AC%B8&quot; aria-label=&quot;range함수와 함께 사용하는 for문 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;range함수와 함께 사용하는 for문&lt;/h2&gt;
&lt;p&gt;for 변수 in range(횟수):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; 반복할 코드&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&quot;시작하는-숫자와-끝나는-숫자-지정하기&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%EC%88%AB%EC%9E%90%EC%99%80-%EB%81%9D%EB%82%98%EB%8A%94-%EC%88%AB%EC%9E%90-%EC%A7%80%EC%A0%95%ED%95%98%EA%B8%B0&quot; aria-label=&quot;시작하는 숫자와 끝나는 숫자 지정하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시작하는 숫자와 끝나는 숫자 지정하기&lt;/h3&gt;
&lt;p&gt;range에 횟수만 지정하면 숫자가 0부터 시작하지만, 다음과 같이 시작하는 숫자와 끝나는 숫자를 지정해서 반복할 수도 있습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for 변수 in range(시작, 끝):&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;증가폭-사용하기&quot;&gt;&lt;a href=&quot;#%EC%A6%9D%EA%B0%80%ED%8F%AD-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;증가폭 사용하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;증가폭 사용하기&lt;/h3&gt;
&lt;p&gt;range는 증가폭을 지정해서 해당 값만큼 숫자를 증가시킬 수 있죠? 이번에는 0부터 9까지의 숫자 중에서 짝수만 출력해보겠습니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;for 변수 in range(시작, 끝, 증가폭):&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;숫자를-감소시키기&quot;&gt;&lt;a href=&quot;#%EC%88%AB%EC%9E%90%EB%A5%BC-%EA%B0%90%EC%86%8C%EC%8B%9C%ED%82%A4%EA%B8%B0&quot; aria-label=&quot;숫자를 감소시키기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;숫자를 감소시키기&lt;/h3&gt;
&lt;p&gt;for와 range는 숫자가 증가하면서 반복했습니다. 그럼 숫자를 감소시킬 수는 없을까요?&lt;/p&gt;
&lt;p&gt;for i in range(10, 0): # range(10, 0)은 동작하지 않음&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;print(&amp;#39;Hello, world!&amp;#39;, i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;range(10, 0)과 같이 시작하는 숫자를 큰 숫자로 지정하고 끝나는 숫자를 작은 숫자로 지정하면 숫자가 감소할 것 같은데, 실행을 해보면 아무것도 출력되지 않습니다. 왜냐하면 range는 숫자가 증가하는 기본 값이 양수 1이기 때문입니다.&lt;/p&gt;
&lt;p&gt;증가폭을 음수로 지정해서 반복해봅니다.
증가폭을 음수로 지정하는 방법 말고도 reversed를 사용하면 숫자의 순서를 반대로 뒤집을 수 있습니다.&lt;/p&gt;
&lt;h3 id=&quot;입력한-횟수대로-반복하기&quot;&gt;&lt;a href=&quot;#%EC%9E%85%EB%A0%A5%ED%95%9C-%ED%9A%9F%EC%88%98%EB%8C%80%EB%A1%9C-%EB%B0%98%EB%B3%B5%ED%95%98%EA%B8%B0&quot; aria-label=&quot;입력한 횟수대로 반복하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;입력한 횟수대로 반복하기&lt;/h3&gt;
&lt;p&gt;이번에는 입력한 횟수대로 반복을 해보겠습니다. 다음 내용을 IDLE의 소스 코드 편집 창에 입력하세요.&lt;/p&gt;
&lt;p&gt;for&lt;em&gt;range&lt;/em&gt;input.py&lt;/p&gt;
&lt;p&gt;count = int(input(‘반복할 횟수를 입력하세요: ‘))&lt;/p&gt;
&lt;p&gt;for i in range(count):&lt;/p&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; print(&amp;#39;Hello, world!&amp;#39;, i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;소스 코드를 실행하면 ‘반복할 횟수를 입력하세요: ‘가 출력됩니다. 여기서 3을 입력하고 엔터 키를 누르세요.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;실행 결과&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;반복할 횟수를 입력하세요: 3 (입력)&lt;br&gt;
Hello, world! 0&lt;br&gt;
Hello, world! 1&lt;br&gt;
Hello, world! 2&lt;br&gt;
3을 입력했으므로 ‘Hello, world!’가 3번 출력됩니다&lt;/p&gt;
&lt;h3 id=&quot;시퀀스-이용한-for문&quot;&gt;&lt;a href=&quot;#%EC%8B%9C%ED%80%80%EC%8A%A4-%EC%9D%B4%EC%9A%A9%ED%95%9C-for%EB%AC%B8&quot; aria-label=&quot;시퀀스 이용한 for문 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;시퀀스 이용한 for문&lt;/h3&gt;
&lt;p&gt;먼저 input으로 입력 값을 받아서 count 변수에 저장합니다(이때 반드시 int를 사용하여 input에서 나온 문자열을 정수로 변환해줍니다).&lt;br&gt;
그리고 반복문에서는 for i in range(count):와 같이 range에 count를 넣어주면 입력받은 숫자만큼 반복됩니다.&lt;/p&gt;
&lt;p&gt;다음과 같이 for에 range 대신 리스트를 넣으면 리스트의 요소를 꺼내면서 반복합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;a = [10, 20, 30, 40, 50]&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;for i in a:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;  print(i)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;10
20
30
40
50&lt;br&gt;
물론 튜플도 마찬가지로 튜플의 요소를 꺼내면서 반복합니다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;문자열도 시퀀스 객체라고 했죠?&lt;br&gt;
for에 문자열을 지정하면 문자를 하나씩 꺼내면서 반복합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;for letter in ‘Python’:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt; print(letter, end=&amp;#39; &amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;P y t h o n&lt;/p&gt;
&lt;p&gt;문자열 ‘Python’의 문자가 하나씩 분리되어 출력되었습니다. 여기서는 print에 end=’ ‘을 지정했으므로 줄바꿈이 되지 않고, 각 문자가 공백으로 띄워져서 출력됩니다.&lt;/p&gt;
&lt;p&gt;그럼 문자열 ‘Python’을 뒤집어서 문자를 출력할 수는 없을까요? 이때는 앞에서 배운 reversed를 활용하면 됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;reversed(시퀀스객체)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;for letter in reversed(‘Python’):&lt;/p&gt;
&lt;p&gt;print(letter, end=’ ‘)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;n o h t y P&lt;/p&gt;
&lt;p&gt;문자열 ‘Python’에서 문자 n부터 P까지 출력되었습니다. reversed는 시퀀스 객체를 넣으면 시퀀스 객체를 뒤집어 줍니다(원본 객체 자체는 바뀌지 않으며 뒤집어서 꺼내줌).&lt;/p&gt;
&lt;h1 id=&quot;iterator--break-for--while-가능&quot;&gt;&lt;a href=&quot;#iterator--break-for--while-%EA%B0%80%EB%8A%A5&quot; aria-label=&quot;iterator  break for  while 가능 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Iterator -break (for / while 가능)&lt;/h1&gt;
&lt;p&gt;앞서 보았듯이 for 구문에서는 &lt;em&gt;리스트가 가지고 있는 요소의 수 만큼 for 구문에 속해있는 코드를 실행&lt;/em&gt;합니다.
이걸 &lt;strong&gt;iteration&lt;/strong&gt; 이라고 합니다.&lt;br&gt;
만일 리스트가 5개의 요소를 가지고 있으면 5 iterations 이라고 합니다.
즉 5번 반복한다는 뜻이죠.&lt;br&gt;
그래서 for loops를 한국어로 for 반복구문 이라고 하기도 합니다.&lt;/p&gt;
&lt;p&gt;그런데 가끔은 중간에 도중하차(?) 하고 싶을때가 있습니다. 굳이 끝까지 for 구문을 진행할 필요 없이 중간에서 멈추고 싶을때는 &lt;strong&gt;break&lt;/strong&gt; 문을 사용하면 됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;break - (for /while 가능)
For 구문에서 break 문이 실행되면 다음 iteration으로 넘어가지 않고 for 구문에서 빠져 나오게 됩니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Continue - (for / while 가능)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;만일 break처럼 for 구문에서 완전히 빠져 나오고 싶지는 않지만 다음 요소, 즉 다음 interation으로 넘어가고 싶을때는 continue 문을 사용하면 됩니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://snscrawler.files.wordpress.com/2017/06/131.png&quot; alt=&quot;break-continue&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Python Apprenticeship Study Part.3]]></title><description><![CDATA[Dictionary]]></description><link>https://ctsictai.github.io//posts/python-part3/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/python-part3/</guid><pubDate>Fri, 18 Oct 2019 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;딕셔너리-만들기&quot;&gt;&lt;a href=&quot;#%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;딕셔너리 만들기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;딕셔너리 만들기&lt;/h1&gt;
&lt;p&gt;딕셔너리는 { }(중괄호) 안에 키: 값 형식으로 저장하며 각 키와 값은 ,(콤마)로 구분해줍니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;딕셔너리 = {키1: 값1, 키2: 값2}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;SyntaxError: invalid syntax: 1&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;{ }의 짝이 맞지 않을 때&lt;/li&gt;
&lt;li&gt;키:값 형식에 맞지 않을 때&lt;/li&gt;
&lt;li&gt;키 문자열의 ’ ’ 짝이 맞지 않을 때&lt;/li&gt;
&lt;li&gt;각 키:값을 구분할 때 ,를 넣지 않아서 발생하는 구문 에러입니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;딕셔너리는 키를 먼저 지정하고 :(콜론)을 붙여서 값을 표현합니다. 특히 키에는 값을 하나만 지정할 수 있으며 이런 특성을 따서 키-값 쌍(key-value pair)이라 부릅니다(키-값은 1:1 대응)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;키-이름이-중복되면&quot;&gt;&lt;a href=&quot;#%ED%82%A4-%EC%9D%B4%EB%A6%84%EC%9D%B4-%EC%A4%91%EB%B3%B5%EB%90%98%EB%A9%B4&quot; aria-label=&quot;키 이름이 중복되면 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;키 이름이 중복되면?&lt;/h1&gt;
&lt;p&gt;그럼 딕셔너리를 만들 때 키 이름이 중복되면 어떻게 될까요?&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;lux = {&amp;#39;health&amp;#39;: 490, &amp;#39;health&amp;#39;: 800, &amp;#39;mana&amp;#39;: 334, &amp;#39;melee&amp;#39;: 550, &amp;#39;armor&amp;#39;: 18.72}&lt;/code&gt;&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;lux[&amp;#39;health&amp;#39;]&lt;/code&gt; - &lt;strong&gt;키가 중복되면 가장 뒤에 있는 값만 사용함&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;800&lt;/li&gt;
&lt;li&gt;lux - &lt;strong&gt;중복되는 키는 저장되지 않음&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;딕셔너리-키의-자료형&quot;&gt;&lt;a href=&quot;#%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC-%ED%82%A4%EC%9D%98-%EC%9E%90%EB%A3%8C%ED%98%95&quot; aria-label=&quot;딕셔너리 키의 자료형 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;딕셔너리 키의 자료형&lt;/h1&gt;
&lt;p&gt;딕셔너리의 키는 문자열뿐만 아니라 정수, 실수, 불도 사용할 수 있으며 자료형을 섞어서 사용해도 됩니다. 그리고 값에는 리스트, 딕셔너리 등을 포함하여 모든 자료형을 사용할 수 있습니다.&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;x = {100: &amp;#39;hundred&amp;#39;, False: 0, 3.5: [3.5, 3.5]}&lt;/code&gt;&lt;br&gt;
x =&gt;
&lt;code class=&quot;language-text&quot;&gt;{100: &amp;#39;hundred&amp;#39;, False: 0, 3.5: [3.5, 3.5]}&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;단, 키에는 리스트와 딕셔너리를 사용할 수 없습니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;빈-딕셔너리-만들기&quot;&gt;&lt;a href=&quot;#%EB%B9%88-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;빈 딕셔너리 만들기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;빈 딕셔너리 만들기&lt;/h1&gt;
&lt;p&gt;빈 딕셔너리를 만들 때는 { }만 지정하거나 dict를 사용하면 됩니다. 보통은 { }를 주로 사용합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;딕셔너리 = {}&lt;/li&gt;
&lt;li&gt;딕셔너리 = dict()&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;dict로-딕셔너리-만들기&quot;&gt;&lt;a href=&quot;#dict%EB%A1%9C-%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC-%EB%A7%8C%EB%93%A4%EA%B8%B0&quot; aria-label=&quot;dict로 딕셔너리 만들기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;dict로 딕셔너리 만들기&lt;/h1&gt;
&lt;p&gt;dict는 다음과 같이 키와 값을 연결하거나, 리스트, 튜플, 딕셔너리로 딕셔너리를 만들 때 사용합니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;딕셔너리 = dict(키1=값1, 키2=값2)&lt;/li&gt;
&lt;li&gt;딕셔너리 = dict(zip([‘키1’, ‘키2’], [값1, 값2]))&lt;/li&gt;
&lt;li&gt;딕셔너리 = dict([(‘키1’, 값1), (‘키2’, 값2)])&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;딕셔너리 = dict({‘키1’: 값1, ‘키2’: 값2})&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;먼저 다음과 같이 dict에서 키=값 형식으로 딕셔너리를 만들 수 있습니다. 이때는 키에 ’ ‘(작은따옴표)나 ” “(큰따옴표)를 사용하지 않아야 합니다. 키는 딕셔너리를 만들고 나면 문자열로 바뀝니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;lux1 = dict(health=490, mana=334, melee=550, armor=18.72)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;키=값 형식으로 딕셔너리를 만듦&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;두 번째 방법은 dict에서 zip 함수를 이용하는 방법입니다. 다음과 같이 키가 들어있는 리스트와 값이 들어있는 리스트를 차례대로 zip에 넣은 뒤 다시 dict에 넣어주면 됩니다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;lux2 = dict(zip([‘health’, ‘mana’, ‘melee’, ‘armor’], [490, 334, 550, 18.72])) # zip 함수로&lt;/li&gt;
&lt;li&gt;lux2 # 키 리스트와 값 리스트를 묶음&lt;/li&gt;
&lt;li&gt;{‘health’: 490, ‘mana’: 334, ‘melee’: 550, ‘armor’: 18.72}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;물론 키와 값을 리스트가 아닌 튜플에 저장해서 zip에 넣어도 됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;세 번째 방법은 리스트 안에 (키, 값) 형식의 튜플을 나열하는 방법입니다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;lux3 = dict([(‘health’, 490), (‘mana’, 334), (‘melee’, 550), (‘armor’, 18.72)])&lt;/li&gt;
&lt;li&gt;lux3 # (키, 값) 형식의 튜플로 딕셔너리를 만듦&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;{‘health’: 490, ‘mana’: 334, ‘melee’: 550, ‘armor’: 18.72}&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;네 번째 방법은 dict 안에서 중괄호로 딕셔너리를 생성하는 방법입니다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;lux4 = dict({‘health’: 490, ‘mana’: 334, ‘melee’: 550, ‘armor’: 18.72}) # dict 안에서&lt;/li&gt;
&lt;li&gt;lux4 # 중괄호로 딕셔너리를 만듦
-{‘health’: 490, ‘mana’: 334, ‘melee’: 550, ‘armor’: 18.72}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이처럼 딕셔너리는 키를 통해서 값의 의미를 파악하기 쉽습니다. 특히 딕셔너리는 예제의 게임 캐릭터 능력치처럼 특정 주제에 대해 연관된 값들을 모아둘 때 주로 사용합니다.&lt;/p&gt;
&lt;h1 id=&quot;딕셔너리의-키에-접근하고-값-할당하기&quot;&gt;&lt;a href=&quot;#%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EC%9D%98-%ED%82%A4%EC%97%90-%EC%A0%91%EA%B7%BC%ED%95%98%EA%B3%A0-%EA%B0%92-%ED%95%A0%EB%8B%B9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;딕셔너리의 키에 접근하고 값 할당하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;딕셔너리의 키에 접근하고 값 할당하기&lt;/h1&gt;
&lt;p&gt;딕셔너리의 키에 접근할 때는 딕셔너리 뒤에 &lt;a href=&quot;%EB%8C%80%EA%B4%84%ED%98%B8&quot;&gt; &lt;/a&gt;를 사용하며 [ ] 안에 키를 지정해주면 됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;딕셔너리[키]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;lux = {‘health’: 490, ‘mana’: 334, ‘melee’: 550, ‘armor’: 18.72}&lt;/li&gt;
&lt;li&gt;lux[‘health’]
490&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lux[‘armor’]
18.72&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;딕셔너리에 키를 지정하지 않으면?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;딕셔너리에 키를 지정하지 않은 상태는 해당 딕셔너리 전체를 뜻합니다. 따라서 다음과 같이 딕셔너리 lux를 출력하면 { }를 포함하여 딕셔너리 전체가 출력됩니다.&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;lux = {&amp;#39;health&amp;#39;: 490, &amp;#39;mana&amp;#39;: 334, &amp;#39;melee&amp;#39;: 550, &amp;#39;armor&amp;#39;: 18.72}&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;lux - 딕셔너리에 키를 지정하지 않으면 딕셔너리 전체를 뜻함&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;{&amp;#39;health&amp;#39;: 490, &amp;#39;mana&amp;#39;: 334, &amp;#39;melee&amp;#39;: 550, &amp;#39;armor&amp;#39;: 18.72}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;딕셔너리의-키에-값-할당하기&quot;&gt;&lt;a href=&quot;#%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EC%9D%98-%ED%82%A4%EC%97%90-%EA%B0%92-%ED%95%A0%EB%8B%B9%ED%95%98%EA%B8%B0&quot; aria-label=&quot;딕셔너리의 키에 값 할당하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;딕셔너리의 키에 값 할당하기&lt;/h1&gt;
&lt;p&gt;이제 딕셔너리의 키에 값을 할당해보겠습니다. 딕셔너리는 [ ]로 키에 접근한 뒤 값을 할당합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;딕셔너리[키] = 값&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;lux = {&amp;#39;health&amp;#39;: 490, &amp;#39;mana&amp;#39;: 334, &amp;#39;melee&amp;#39;: 550, &amp;#39;armor&amp;#39;: 18.72}&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lux[‘health’] = 2037 # 키 ‘health’의 값을 2037로 변경&lt;/li&gt;
&lt;li&gt;lux[‘mana’] = 1184 # 키 ‘mana’의 값을 1184로 변경&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;lux&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;{‘health’: 2037, ‘mana’: 1184, ‘melee’: 550, ‘armor’: 18.72}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;딕셔너리에서 키의 값을 출력할 때와 마찬가지로 [ ]에 키를 지정한 뒤 값을 할당하면 됩니다. 특히 딕셔너리는 없는 키에 값을 할당하면 해당 키가 추가되고 값이 할당됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;lux[‘mana_regen’] = 3.28 # 키 ‘mana_regen’을 추가하고 값 3.28 할당&lt;/li&gt;
&lt;li&gt;lux
{‘health’: 2037, ‘mana’: 1184, ‘melee’: 550, ‘armor’: 18.72, ‘mana_regen’: 3.28}&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;딕셔너리에-키가-있는지-확인하기&quot;&gt;&lt;a href=&quot;#%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EC%97%90-%ED%82%A4%EA%B0%80-%EC%9E%88%EB%8A%94%EC%A7%80-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0&quot; aria-label=&quot;딕셔너리에 키가 있는지 확인하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;딕셔너리에 키가 있는지 확인하기&lt;/h1&gt;
&lt;p&gt;딕셔너리에서 키가 있는지 확인하고 싶다면 in 연산자를 사용하면 됩니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;키 in 딕셔너리&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;lux = {‘health’: 490, ‘mana’: 334, ‘melee’: 550, ‘armor’: 18.72}&lt;/li&gt;
&lt;li&gt;‘health’ in lux
True&lt;/li&gt;
&lt;li&gt;‘attack_speed’ in lux
False&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이처럼 딕셔너리에 특정 키가 있으면 True, 없으면 False가 나옵니다. 딕셔너리 lux에 키 ‘health’가 있으므로 True, ‘attack_speed’가 없으므로 False가 나왔습니다.&lt;/p&gt;
&lt;p&gt;반대로 in 앞에 not을 붙이면 특정 키가 없는지 확인합니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;키 not in 딕셔너리&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;‘attack_speed’ not in lux
True&lt;/li&gt;
&lt;li&gt;‘health’ not in lux
False&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;이렇게 not in은 특정 키가 없으면 True, 있으면 False가 나옵니다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;해시&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;딕셔너리는 해시(Hash) 기법을 이용해서 데이터를 저장합니다. 보통 딕셔너리와 같은 키-값 형태의 자료형을 해시, 해시 맵, 해시테이블 등으로 부르기도 합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;딕셔너리의-키-개수-구하기&quot;&gt;&lt;a href=&quot;#%EB%94%95%EC%85%94%EB%84%88%EB%A6%AC%EC%9D%98-%ED%82%A4-%EA%B0%9C%EC%88%98-%EA%B5%AC%ED%95%98%EA%B8%B0&quot; aria-label=&quot;딕셔너리의 키 개수 구하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;딕셔너리의 키 개수 구하기&lt;/h1&gt;
&lt;p&gt;딕셔너리를 사용하다 보면 딕셔너리의 키 개수(길이)를 구할 필요가 있습니다. 딕셔너리의 키와 값을 직접 타이핑할 때는 키의 개수를 알기가 쉽습니다. 하지만 실무에서는 함수 등을 사용해서 딕셔너리를 생성하거나 키를 추가하기 때문에 키의 개수가 눈에 보이지 않습니다. 따라서 다음과 같이 키의 개수는 &lt;strong&gt;len&lt;/strong&gt; 함수를 사용하여 구합니다(키와 값은 1:1 관계이므로 키의 개수는 곧 값의 개수입니다).&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;len(딕셔너리)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;lux = {‘health’: 490, ‘mana’: 334, ‘melee’: 550, ‘armor’: 18.72}&lt;/li&gt;
&lt;li&gt;len(lux)
4&lt;/li&gt;
&lt;li&gt;len({‘health’: 490, ‘mana’: 334, ‘melee’: 550, ‘armor’: 18.72})
4&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;len(lux)와 같이 len에 딕셔너리 변수를 넣어서 키의 개수를 구해도 되고, len에 딕셔너리를 그대로 넣어도 됩니다.&lt;/p&gt;
&lt;p&gt;지금까지 딕셔너리의 사용 방법에 대해 알아보았습니다. 딕셔너리를 생성할 때는 { }(중괄호)를 사용하고, 키와 값을 1:1 관계로 저장한다는 점이 중요합니다. 특히 딕셔너리는 특정 주제에 대해 연관된 값을 저장할 때 사용한다는 점이다.&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Python Apprenticeship Study Part.2]]></title><description><![CDATA[sequence obj -list/set/dictionary/tuple]]></description><link>https://ctsictai.github.io//posts/python-part2/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/python-part2/</guid><pubDate>Thu, 17 Oct 2019 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;list&quot;&gt;&lt;a href=&quot;#list&quot; aria-label=&quot;list permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;LIST&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;다양한 데이터 타이들을 순서에 따라 저장할 수 잇는 데이터 타입이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;대괄호[]안에 데이터들을 넣어 주면 된다.&lt;/li&gt;
&lt;li&gt;[]만 변수로 선언하면 빈 list만 생성된다.&lt;/li&gt;
&lt;li&gt;★ 리스트 타입의 개수를 구하기 위해서는 len함수를 이용하면 된다.&lt;/li&gt;
&lt;li&gt;리스트 인덱스의 시작이 1이 아니라 0이다 -&gt; [0] / [1]&lt;/li&gt;
&lt;li&gt;리스트 역 인덱스의 시작은 -1이다 -&gt; [-1] / [-2]&lt;/li&gt;
&lt;li&gt;문자열 type로 적용 가능 + 숫자, boolean 값 등 모든 type의 값을 저장할 수 있으며 서로 다른 type의 값들을 저장하는것도 가능합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;adding-and-changing-elements-to-list&quot;&gt;&lt;a href=&quot;#adding-and-changing-elements-to-list&quot; aria-label=&quot;adding and changing elements to list permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Adding and changing elements to list&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;append Added Element!!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;순차적으로 저장함 마지막 인덱스에 요소값 저장&lt;/li&gt;
&lt;li&gt;List name.append(element)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;”+”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;추가 요소가 1개 이상일 때&lt;/li&gt;
&lt;li&gt;List&lt;em&gt;name = list&lt;/em&gt;name + [element, element2]&lt;/li&gt;
&lt;li&gt;new&lt;em&gt;list = list&lt;/em&gt;name +list_name2&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;insert&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;원하는 위치에 추가하는 메서드&lt;/li&gt;
&lt;li&gt;List_name.insert(indexing number, element)&lt;/li&gt;
&lt;li&gt;Indexing number란 저장할 원하는 위치를 지정해야 한다는 것!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;element updating&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;List_name[idx] = element&lt;/li&gt;
&lt;li&gt;Idx = 바꿀 위치 인덱싱&lt;/li&gt;
&lt;li&gt;Element = 바꿀 요소값&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;튜플tuple&quot;&gt;&lt;a href=&quot;#%ED%8A%9C%ED%94%8Ctuple&quot; aria-label=&quot;튜플tuple permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;튜플(tuple)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;순서에 따라 저장하는데이터 타입&lt;/li&gt;
&lt;li&gt;괄호 ()안에 데이터들을 넣어 주면 된다.&lt;/li&gt;
&lt;li&gt;리스트와 튜플의 차이점&lt;/li&gt;
&lt;li&gt;리스트 타입의 내용의 변경이 가능(mutable)&lt;/li&gt;
&lt;li&gt;튜플의 경우 내용의 변경이 불가(immutable)&lt;/li&gt;
&lt;li&gt;속도 면에서 튜플이 좀 더 빠르다&lt;/li&gt;
&lt;li&gt;괄호를 사용하지 않아도 튜플을 만들 수 있습니다.&lt;/li&gt;
&lt;li&gt;인덱싱은 리스트와 같다&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;언제 tuple 사용함?&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;일반적으로 2개에서 5개 사이의 요소들을 저장할 때, 특정 데이터를 즉각적으로 표현하고 싶을 때 - 2차원 수평면에 위치를 가리키는 벡터를 표현할 때 좋음&lt;/p&gt;
&lt;h1 id=&quot;dictionary&quot;&gt;&lt;a href=&quot;#dictionary&quot; aria-label=&quot;dictionary permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Dictionary&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;Dict type = {} – 빈 딕셔너리 선언&lt;/li&gt;
&lt;li&gt;Dict type = {‘aa’ : 2} =&gt; { key : value } 로 요소 추가&lt;/li&gt;
&lt;li&gt;순서가 없는 key와 value 쌍으로 된 집합이다(순서가 필요 없음 unique한 key로 구별이 가능함)&lt;/li&gt;
&lt;li&gt;Key와 value {}로 묶어주면 된다.&lt;/li&gt;
&lt;li&gt;Update(키=값) 이름 그대로 딕셔너리에서 키의 값을 수정 및 추가&lt;/li&gt;
&lt;li&gt;Pop(키) or pop(키, 기본값)은 특정 키-값 쌍을 삭제한 뒤 값을 반환&lt;/li&gt;
&lt;li&gt;Key가 딕셔너리 안에 있는지 판단하는 경우 in 연산자 활용&lt;/li&gt;
&lt;li&gt;Dict은 안에 리스트 생성 가능/ key ; value 값 수정 및 추가 및 삭제 가능&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;create-element-in-dictionary--updating-element&quot;&gt;&lt;a href=&quot;#create-element-in-dictionary--updating-element&quot; aria-label=&quot;create element in dictionary  updating element permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Create element in dictionary &amp;#x26; updating element&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;dictionary_name[new_key] = new_value&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;read-element-in-dictionary&quot;&gt;&lt;a href=&quot;#read-element-in-dictionary&quot; aria-label=&quot;read element in dictionary permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Read element in Dictionary&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;dict_name[‘key_name’] = value 반환!&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Key는 string이나 number가능 but 중복은 안됨 unique해야함!!&lt;/li&gt;
&lt;li&gt;만약에 이미 있는 key값으로 요소를 집어 넣으면 updating이 된다.!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;dict1 = { 1 : &amp;quot;one&amp;quot;, 1 : &amp;quot;two&amp;quot; }&lt;/code&gt;&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;print(dict1)&lt;/code&gt;&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;{ 1: &amp;quot;two&amp;quot; }&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;delete-element-in-dictionary&quot;&gt;&lt;a href=&quot;#delete-element-in-dictionary&quot; aria-label=&quot;delete element in dictionary permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Delete element in dictionary&lt;/h2&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;del dict_name[&amp;quot;key_name&amp;quot;]&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&quot;set&quot;&gt;&lt;a href=&quot;#set&quot; aria-label=&quot;set permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;SET&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;중복을 허용하지 않는 순서가 없는 자료형이다. (2가지 유니크한 특징이 있다)&lt;/li&gt;
&lt;li&gt;순서가 없다는 것은 인덱싱을 통해 value를 뽑아 낼 수 없다는 얘기&lt;/li&gt;
&lt;li&gt;중복이 허용이 안된다는 것은 요소들이 모두 unique한 값을 가진 다는 얘기&lt;/li&gt;
&lt;li&gt;중복이 안된다? 활용 가능성이 매우 높지 – 중복 제거 필터로써&lt;/li&gt;
&lt;li&gt;Set 자료형에 인덱싱으로 값에 접근하려면 set를 list나 tuple로 변환 후 인덱싱해야 한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;set-생성&quot;&gt;&lt;a href=&quot;#set-%EC%83%9D%EC%84%B1&quot; aria-label=&quot;set 생성 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Set 생성&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;S =set()&lt;/code&gt; – 빈 set 자료형 생성&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Sw = set(‘hello’)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;h e l o 자료 요소를 가진 set 자료형 생성 (l은 중복값이 있어서 하나만 요소값으로)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;set의-가장-많은-활용-법--교집합-합집합-차집합&quot;&gt;&lt;a href=&quot;#set%EC%9D%98-%EA%B0%80%EC%9E%A5-%EB%A7%8E%EC%9D%80-%ED%99%9C%EC%9A%A9-%EB%B2%95--%EA%B5%90%EC%A7%91%ED%95%A9-%ED%95%A9%EC%A7%91%ED%95%A9-%EC%B0%A8%EC%A7%91%ED%95%A9&quot; aria-label=&quot;set의 가장 많은 활용 법  교집합 합집합 차집합 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;set()의 가장 많은 활용 법 – 교집합, 합집합, 차집합&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;교집합 ( &amp;#x26; or intersection())&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Set1 = set(1,2,3,4,5)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Set2 = set(3,4,5,6,7)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Set1 &amp;#x26; set2 =&gt; {3, 4, 5}&lt;br&gt;
Set1.intersection(set2) =&gt;{3,4,5}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;합집합 ( | or union)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Set1 = set(1,2,3,4,5)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Set2 = set(3,4,5,6,7)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Set1 | set2 =&gt; {1,2,3,4,5,6,7}&lt;br&gt;
Set1.union(set2) = &gt; {1,2,3,4,5,6,7}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;차집합 ( - or difference )  &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code class=&quot;language-text&quot;&gt;Set1 = set(1,2,3,4,5)&lt;/code&gt; - &lt;code class=&quot;language-text&quot;&gt;Set2 = set(3,4,5,6,7)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;차집합은 순서가 매우 중요!!!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;&amp;gt;Set1 - set2 =&amp;gt; {1,2}
&amp;gt;Set1.difference(set2) = &amp;gt; {1,2}
&amp;gt;Set2 – set1 =&amp;gt; {6, 7}
&amp;gt;Set2.difference(set1) =&amp;gt; {6,7}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&quot;set에-제공되는-기본-메서드&quot;&gt;&lt;a href=&quot;#set%EC%97%90-%EC%A0%9C%EA%B3%B5%EB%90%98%EB%8A%94-%EA%B8%B0%EB%B3%B8-%EB%A9%94%EC%84%9C%EB%93%9C&quot; aria-label=&quot;set에 제공되는 기본 메서드 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Set에 제공되는 기본 메서드&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;add (값 1개 추가)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;s1 = set([1, 2, 3])&lt;br&gt;
s1.add(4)&lt;br&gt;
s1 {1, 2, 3, 4}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;update ( 값 여러 개 추가)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;s1 = set([1, 2, 3])&lt;br&gt;
s1.update([4, 5, 6])&lt;br&gt;
s1
{1, 2, 3, 4, 5, 6}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;remove (특정값 제거)&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;s1 = set([1, 2, 3])&lt;br&gt;
s1.remove(2)&lt;br&gt;
s1
{1, 3}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;</content:encoded></item><item><title><![CDATA[Python Apprenticeship Study Part.1]]></title><description><![CDATA[변수 선언/연산자/들여쓰기/if 조건문]]></description><link>https://ctsictai.github.io//posts/python-part1/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/python-part1/</guid><pubDate>Wed, 16 Oct 2019 23:30:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;변수-할당&quot;&gt;&lt;a href=&quot;#%EB%B3%80%EC%88%98-%ED%95%A0%EB%8B%B9&quot; aria-label=&quot;변수 할당 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;변수 할당&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;name = “wsd”&lt;/li&gt;
&lt;li&gt;변수 이름 = 변수 값&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;javascript와 달리 var / let /const를 붙일 필요가 없다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;주요-연산자&quot;&gt;&lt;a href=&quot;#%EC%A3%BC%EC%9A%94-%EC%97%B0%EC%82%B0%EC%9E%90&quot; aria-label=&quot;주요 연산자 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;주요 연산자&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;”+”&lt;/strong&gt; 덧셈 &lt;em&gt;a + b&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;”-”&lt;/strong&gt; 뺄셈 &lt;em&gt;a - b&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;”*”&lt;/strong&gt; 곱셈 &lt;em&gt;a * b&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;”/”&lt;/strong&gt; 나눗셈 &lt;em&gt;a / b&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;”//”&lt;/strong&gt; 버림 나눗셈 &lt;em&gt;a // b&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;”%”&lt;/strong&gt; 나머지 &lt;em&gt;a % b&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;”**” 거듭제곱 _a ** b_&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;”+=”&lt;/strong&gt; 덧셈 후 할당 &lt;em&gt;a += b&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;”-=”&lt;/strong&gt; 뺄셈 후 할당 &lt;em&gt;a -= b&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;”*=”&lt;/strong&gt; 곱셈 후 할당 &lt;em&gt;a *= b&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;/=&lt;/strong&gt; 나눗셈 후 할당 &lt;em&gt;a /= b&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;사칙연산-규칙&quot;&gt;&lt;a href=&quot;#%EC%82%AC%EC%B9%99%EC%97%B0%EC%82%B0-%EA%B7%9C%EC%B9%99&quot; aria-label=&quot;사칙연산 규칙 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;사칙연산 규칙&lt;/h2&gt;
&lt;p&gt;일반적인 수학적 사칙연산의 규칙을 따른다.&lt;/p&gt;
&lt;h1 id=&quot;literal-string-interpolation&quot;&gt;&lt;a href=&quot;#literal-string-interpolation&quot; aria-label=&quot;literal string interpolation permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Literal string interpolation&lt;/h1&gt;
&lt;p&gt;사용하려면 다음의 문법을 지켜야 합니다&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;먼저 따옴표 앞에 &lt;strong&gt;“f”&lt;/strong&gt; 를 붙여야 합니다. f를 붙이면 파이썬은 f 다음에 오는 strin g 값을 literal string interpolation 이라고 인지하고, string 안에있는 변수들을 실제 값으로 치환 합니다.&lt;/li&gt;
&lt;li&gt;치환 하고 싶은 변수 (혹은 변수가 아니어도 됩니다. 예를 들어 함수 호출이 될 수도 있습니다) 를 &lt;strong&gt;중괄호&lt;/strong&gt;{}를 사용해서 표시합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;print( f&quot;&quot;&quot;wecol {date} at {inventor} live in {location}&quot;&quot;&quot;)&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;print(f&quot;&quot;&quot;{} &quot;&quot;&quot;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;indention들여-쓰기&quot;&gt;&lt;a href=&quot;#indention%EB%93%A4%EC%97%AC-%EC%93%B0%EA%B8%B0&quot; aria-label=&quot;indention들여 쓰기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;indention(들여 쓰기)&lt;/h1&gt;
&lt;p&gt;하지만 파이썬에서는 들여쓰기는 요구사항 입니다. 들여쓰기를 통해 코드의 종속성을 나타냅니다.
예를 들어. JavaScript나 자바등의 다른 언어들은 함수에 종속된 코드를 나타내기 위해서 중괄호 ({ }) 를 사용합니다. 하지만 파이썬에서는 중괄호를 사용하지 않고 들여쓰기를 사용해서 종속된 코드를 나타냅니다.&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://pythonstudy.xyz/images/basics/identation.png&quot; alt=&quot;들여쓰기&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;if-statement-조건문&quot;&gt;&lt;a href=&quot;#if-statement-%EC%A1%B0%EA%B1%B4%EB%AC%B8&quot; aria-label=&quot;if statement 조건문 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;If statement (조건문)&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt; if name == “차은우”:&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt; print(f”Hello {name}“) &lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;==&lt;/strong&gt; 는 같다 Equal의 뜻이다.&lt;/p&gt;
&lt;h2 id=&quot;주의&quot;&gt;&lt;a href=&quot;#%EC%A3%BC%EC%9D%98&quot; aria-label=&quot;주의 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;주의&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;if 구문과 연결되어 있는 코드들은 if 구문 보다 더 안쪽으로 간격이 들어와 있어야 합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;홀짝-구문하는-if문&quot;&gt;&lt;a href=&quot;#%ED%99%80%EC%A7%9D-%EA%B5%AC%EB%AC%B8%ED%95%98%EB%8A%94-if%EB%AC%B8&quot; aria-label=&quot;홀짝 구문하는 if문 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;홀짝 구문하는 if문&lt;/h3&gt;
&lt;p&gt;나머지 연산자 %을 사용하면 된다.&lt;/p&gt;
&lt;p&gt;&lt;CODE&gt; if a % 2 == 0:&lt;/code&gt; 이면 짝수
&lt;CODE&gt; if a % 2 != 0:&lt;/code&gt; 이면 홀수&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;!=&lt;/strong&gt; 는 같지 않다 not equal의 뜻이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&gt;&lt;/strong&gt; 는 더 크다 greater than의 뜻이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;#x3C;&lt;/strong&gt; 는 더 작다 less than의 뜻이다.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&gt;=&lt;/strong&gt;는 같거나 크다 greater than or equal to&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&amp;#x3C;=&lt;/strong&gt;는 같거나 작다 less than or equal to&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;elif-and-else&quot;&gt;&lt;a href=&quot;#elif-and-else&quot; aria-label=&quot;elif and else permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Elif and Else&lt;/h1&gt;
&lt;h2 id=&quot;elif&quot;&gt;&lt;a href=&quot;#elif&quot; aria-label=&quot;elif permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;elif&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;elif 는 if 구문을 보조 하는 역할 입니다. elif 는 else if 를 줄인뜻입니다.&lt;/li&gt;
&lt;li&gt;elif 는 if 구문과 연결되어 사용되며 if 구문이 먼저 선행 되고 그 다음에 위치하게 됩니다.&lt;/li&gt;
&lt;li&gt;elif 는 만일 if 구문이 False 이면 실행되며 if 구문이 False 일 경우 다른 condition을 테스트 한 후 실행됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;if car == “현대”:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;print(“현대는 국산차”)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;elif car == “기아”:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;print(“기아는 국산차”)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;elif는 if문이 실행 된 뒤 다음을 진행 하는 코드이다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;else&quot;&gt;&lt;a href=&quot;#else&quot; aria-label=&quot;else permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;else&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;else는 if 구문 (그리고 elif 구문이 있다면 elif 구문) 의 condition이 False인 경우 default 로 실행됩니다.&lt;/li&gt;
&lt;li&gt;else 는 if 구문과 elif 구문이 먼저 선행되고 마지막에 위치하게 되며 if / elif 구문의 코드가 실행 되지 않으면 마지막으로 default로 실행됩니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/fqJOBUS.png&quot; alt=&quot;1&quot;&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[09.30~10.04 한 주 정리 part.6]]></title><description><![CDATA[HTML에서의 JS / DOM / 이벤트]]></description><link>https://ctsictai.github.io//posts/javascript-part6/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/javascript-part6/</guid><pubDate>Mon, 14 Oct 2019 23:55:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;html에서의-js-로드하기&quot;&gt;&lt;a href=&quot;#html%EC%97%90%EC%84%9C%EC%9D%98-js-%EB%A1%9C%EB%93%9C%ED%95%98%EA%B8%B0&quot; aria-label=&quot;html에서의 js 로드하기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;HTML에서의 JS 로드하기&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;inline 방식 – html 태그에 직접 javascript를 기술하는 방식이다. 장점은 태그에 관련된 스크립트가 분명하게 드러난다. 하지만 정보와 제어가 섞여 있기 때문에 정보로서의 가치가 떨어짐.&lt;/li&gt;
&lt;li&gt;Script 방식 - script 태그를 만들어서 여기에 자바스크립트 코드를 삽입하는 방식. 장점은 html태그와 js 코드를 분리할 수 있다.&lt;/li&gt;
&lt;li&gt;외부 파일로 분리
js를 별도의 파일로 분리할 수도 있다. 장점은 보다 엄격하게 정보와 제어를 분리할 수 있다. 하나의 js 파일을 여러 웹페이지에서 로드함으로서 js의 재활용성을 높일 수 있다. 캐쉬를 통해서 속도의 향상, 전송량의 경량화를 도모할 수 있다. 유지보수의 편의성(중복 제거)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;※ Scripts 파일은 태그보다 페이지 하단(body tag 안에서 맨뒤)에 위치시키는 것이 더 좋음&lt;/p&gt;
&lt;h1 id=&quot;dom-document-object-model&quot;&gt;&lt;a href=&quot;#dom-document-object-model&quot; aria-label=&quot;dom document object model permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;DOM (Document Object Model)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;DOM(돔)이란 웹페이지의 HTML을 계층화시켜 트리구조로 만든 객체(Object) 모델입니다.&lt;/li&gt;
&lt;li&gt;JavaScript는 이 model로 웹 페이지에 접근하고, 페이지를 수정할 수 있습니다.&lt;/li&gt;
&lt;li&gt;DOM은 HTML인 웹페이지와 스크립팅언어(JavaScript)를 서로 잇는 역할입니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;JS로 html문서를 제어하려면 젤 처음에 해야 하는 일이 제어의 대상에 해당되는 객체를 찾는 것이다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;객체 찾는 방법은 document 객체의 조회 관련 메소드 이용&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;document.getElementsByTagName – HTML tag 이름 ul/ li/ p/ div 으로 찾아냄 보통 tag가 중복되서 많이 쓰이므로 찾으려는 태그명에 대해 배열값으로 리턴한다.&lt;/li&gt;
&lt;li&gt;document.getElementsById – ID명으로 찾음 – ID는 유일한 값이므로 유일한 객체만 검색됨&lt;/li&gt;
&lt;li&gt;document.getElementsByClassName - class명으로 찾아냄 – 클래스도 같은 이름으로 여러 개가 쓰일 수 있으므로 tagName과 같게 배열값으로 리턴한다.&lt;/li&gt;
&lt;li&gt;document.querySelector – css의 선택자의 문법을 이용한 객체 조회 – 위의 3개를 다 쓸 수 있는 듯 but 1개만 검색됨&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;document.querySelectorall – css 선택자 모든 객체 조회 – 맨 위의 3개를 다 쓸 수 있는 강력한 도구&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;속성 - 엘리먼트의 속성을 알아내고 변경하는 API – MTV 모델에서 많이 쓰임&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Element.getAttribute(name) – 속성을 가져오는 것&lt;/li&gt;
&lt;li&gt;Element.setAttribute(name, value) – 속성을 변경, 추가 하는 것&lt;/li&gt;
&lt;li&gt;Element.hasAttribute(name); - 속성의 존재여부를 boolean값으로 확인&lt;/li&gt;
&lt;li&gt;Element.removeAttribute(name) ; - 속성을 제거하는 것&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;node-객체&quot;&gt;&lt;a href=&quot;#node-%EA%B0%9D%EC%B2%B4&quot; aria-label=&quot;node 객체 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Node 객체&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;관계 - 엘리먼트는 서로 부모, 자식, 혹은 형제자매 관계로 연결되어 있다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;각각의 Node가 다른 Node와 연결된 정보를 보여주는 API를 통해서 문서를 프로그래밍적으로 탐색할 수 있다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Node.childNodes – 자식노드들을 유사배열에 담아서 리턴&lt;/li&gt;
&lt;li&gt;Node.firstChild – 첫번째 자식 노드&lt;/li&gt;
&lt;li&gt;Node.lastChild – 마지막 자식 노드&lt;/li&gt;
&lt;li&gt;Node.nextSibling – 다음 형제 노드&lt;/li&gt;
&lt;li&gt;Node.previousSibling – 이전형제 노드&lt;/li&gt;
&lt;li&gt;Node.contains() – 가지고 있는 자식 노드&lt;/li&gt;
&lt;li&gt;Node.hasChildNodes() – 특정 자식 노드를 가지고 있느냐 없느냐&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;노드의-종류&quot;&gt;&lt;a href=&quot;#%EB%85%B8%EB%93%9C%EC%9D%98-%EC%A2%85%EB%A5%98&quot; aria-label=&quot;노드의 종류 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;노드의 종류&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;Node 객체는 모든 구성요소를 대표하는 객체이기 때문에 각각의 구성요소가 어떤 카테고리에 속하는 것인지를 알려주는 식별자를 제공한다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Node.nodeType - 노드의 종류에 따라서 정해진 상수가 존재한다.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Node.nodeName – name은 태그명을 의미한다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;값 - Node 객체의 값을 제공하는 API&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;Node.nodeValue&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Node.textContent&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;자식관리 - Node 객체의 자식을 추가하는 방법에 대한 API&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;★ Node.appendChild()&lt;/li&gt;
&lt;li&gt;Node.removeChild()&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;노드-추가&quot;&gt;&lt;a href=&quot;#%EB%85%B8%EB%93%9C-%EC%B6%94%EA%B0%80&quot; aria-label=&quot;노드 추가 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;노드 추가&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;appendChild(child)- 노드의 마지막 자식으로 주어진 엘리먼트 추가&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;insertBefore(newElement, referenceElement) - appendChild와 동작방법은 같으나 두번째 인자로 엘리먼트를 전달 했을 때 이것 앞에 엘리먼트가 추가된다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;위치 지정해서 엘리먼트를 추가하는 방법
노드를 추가하기 위해서는 추가할 엘리먼트를 생성해야 하는데 이것은 document 객체의 기능이다. 아래 API는 노드를 생성하는 API이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;document.createElement(tagName) -엘리먼트 노드를 추가한다.&lt;/li&gt;
&lt;li&gt;document.createTextNode(data) - 텍스트 노드를 추가한다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;노드-제거&quot;&gt;&lt;a href=&quot;#%EB%85%B8%EB%93%9C-%EC%A0%9C%EA%B1%B0&quot; aria-label=&quot;노드 제거 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;노드 제거&lt;/h3&gt;
&lt;p&gt;메소드는 삭제 대상의 부모 노드 객체의 것을 실행해야 한다는 점에 유의하자.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;removeChild(child)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;노드-교체&quot;&gt;&lt;a href=&quot;#%EB%85%B8%EB%93%9C-%EA%B5%90%EC%B2%B4&quot; aria-label=&quot;노드 교체 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;노드 교체&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;replaceChild(newchild, oldchild)&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;문자열로-노드-제어-위의-방법보다-훨씬-쉬움&quot;&gt;&lt;a href=&quot;#%EB%AC%B8%EC%9E%90%EC%97%B4%EB%A1%9C-%EB%85%B8%EB%93%9C-%EC%A0%9C%EC%96%B4-%EC%9C%84%EC%9D%98-%EB%B0%A9%EB%B2%95%EB%B3%B4%EB%8B%A4-%ED%9B%A8%EC%94%AC-%EC%89%AC%EC%9B%80&quot; aria-label=&quot;문자열로 노드 제어 위의 방법보다 훨씬 쉬움 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;문자열로 노드 제어 (위의 방법보다 훨씬 쉬움)&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;innerHTML - 문자열로 자식 노드를 만들 수 있는 기능을 제공한다. 또한 자식 노드의 값을 읽어올 수도 있다. 선택한 엘리먼트는 검색되지 않는다 (부모노드는 검색 범위에서 제외)&lt;/li&gt;
&lt;li&gt;outerHTML - outerHTML은 선택한 엘리먼트를 포함해서 처리된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;이벤트&quot;&gt;&lt;a href=&quot;#%EC%9D%B4%EB%B2%A4%ED%8A%B8&quot; aria-label=&quot;이벤트 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;이벤트&lt;/h1&gt;
&lt;p&gt;★ addEventListener() 메서드 ★&lt;/p&gt;
&lt;p&gt;&lt;code&gt;target.addEventListener(type, listener[, options]);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;target:이벤트 발생시킬 타겟(이게 젤중요함 어디에 적용되느냐!!) (type:이벤트 종류, listener: 이벤트 작동할 로직 or 로직 있는함수
[,이벤트 특성])&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;EventTarget의 addEventListener() 메서드는 지정한 이벤트가 대상에 전달될 때마다 호출할 함수를 설정합니다. 일반적인 대상은 Element, Document, Window지만, XMLHttpRequest와 같이 이벤트를 지원하는 모든 객체를 대상으로 지정할 수 있습니다.&lt;/li&gt;
&lt;li&gt;addEventListener()는 EventTarget의 주어진 이벤트 유형에, EventListener를 구현한 함수 또는 객체를 이벤트 처리기 목록에 추가해 작동합니다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;키이벤트&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;사람이 키보드를 누르면 발생하는 이벤트 입니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;키보드를 눌렀을 때 발생하는 keydown&lt;/li&gt;
&lt;li&gt;키보드를 누르고 떼는 순간 발생하는 keyup&lt;/li&gt;
&lt;li&gt;키보드를 눌러 어떤 텍스트가 작성되는 순간 발생하는 keypress&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;등등 더 많은 이벤트가 존재한다 다른 이벤트를 보려면 밑의 링크를 클릭하시면 됩니다.&lt;/p&gt;
&lt;p&gt;[&lt;a href=&quot;https://developer.mozilla.org/ko/docs/Web/Events&quot; target=&quot;_blank&quot; rel=&quot;nofollow noopener noreferrer&quot;&gt;이벤트 종류 더 보기&lt;/a&gt;]&lt;/p&gt;</content:encoded></item><item><title><![CDATA[09.30~10.04 한 주 정리 part.5]]></title><description><![CDATA[For문 / date value / scope / switch]]></description><link>https://ctsictai.github.io//posts/javascript-part5/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/javascript-part5/</guid><pubDate>Fri, 11 Oct 2019 23:55:03 GMT</pubDate><content:encoded>&lt;h1 id=&quot;for문&quot;&gt;&lt;a href=&quot;#for%EB%AC%B8&quot; aria-label=&quot;for문 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;For문&lt;/h1&gt;
&lt;p&gt;원하는 만큼 반복하는 함수(일정한 형식의 많은 데이터를 다루기 위해 유용함)&lt;/p&gt;
&lt;p&gt;&lt;code&gt; for(let i =0; i&amp;#x3C;=5; i++)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;let i=0 &lt;/code&gt; 시작조건 - i변수 0부터 시작&lt;/li&gt;
&lt;li&gt;&lt;code&gt; i&amp;#x3C;=5 &lt;/code&gt; 종료조건 - 5보다 같거나 작을 떄&lt;/li&gt;
&lt;li&gt;&lt;code&gt; i++ &lt;/code&gt; 증감식 - 1씩 증가&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;i가 0, 1, 2, 3, 4, 5까지 for문 반복한다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;for (var i = 2; i &amp;#x3C; 10; i = i + 2)&lt;/code&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;i는 2부터 시작하여&lt;/li&gt;
&lt;li&gt;10보다 작을때까지&lt;/li&gt;
&lt;li&gt;2씩 증가시키면서 for문을 돌린다.&lt;/li&gt;
&lt;li&gt;i가 2,4,6,8 으로 2씩 증가하며 for문을 총 4번 반복합니다.&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;보통 배열 요소에 대한 for문 돌릴 땐 length 프로퍼티를 사용해 종료값을 정한다&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;for (var i = 0; i &amp;#x3C; 배열명.length; i++)&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;p&gt;※ 종료조건에 &amp;#x3C;을 쓰는 이유&lt;br&gt;
배열의 인덱싱 시작이 0부터 시작하기 때문에 배열의 길이보다 작을 때까지 반복해야 한다.&lt;/p&gt;
&lt;h1 id=&quot;date-value날짜와-시간&quot;&gt;&lt;a href=&quot;#date-value%EB%82%A0%EC%A7%9C%EC%99%80-%EC%8B%9C%EA%B0%84&quot; aria-label=&quot;date value날짜와 시간 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Date value(날짜와 시간)&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;날짜 객체 호출해서 날짜 시간을 얻는다.&lt;br&gt;
&lt;code&gt;let rightNow = new Date();&lt;/code&gt; - new Date&lt;/li&gt;
&lt;li&gt;반환되는 값이 2019-02-18T00:45:06.562Z – 그대로는 이용안하고 가공한번더 해야 됨&lt;br&gt;
&lt;code&gt;let year = rightNow.getFullYear();&lt;/code&gt; -년도만&lt;br&gt;
&lt;code&gt;let month = rightNow.getMonth()+1;&lt;/code&gt; -월만 (원래 값보다 1개월 작은값이 반환되서 +1함)&lt;br&gt;
&lt;code&gt;let date = rightNow.getDate();&lt;/code&gt; - 일만&lt;br&gt;
&lt;code&gt;let day = rightNow.getDay();&lt;/code&gt; - 요일만(0부터 월요일 ~6은 일요일)- 숫자값으로 뽑아줌&lt;br&gt;
&lt;code&gt;let currentHour = rightNow.getHours();&lt;/code&gt; -시간만&lt;br&gt;
&lt;code&gt;let currentMin = rightNow.getMinutes();&lt;/code&gt; -분만&lt;br&gt;
&lt;code&gt;Let time = rightNow.getTime();&lt;/code&gt; - 밀리초 표현 반환 가능&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;특정날짜 Date&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let date1 = new Date(&amp;#39;December 17, 2019 03:24:00&amp;#39;);&lt;/code&gt;&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;let date2 = new Date(&amp;#39;2019-12-17T03:24:00&amp;#39;);&lt;/code&gt;&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;let date3 = new Date(2019, 5, 1);&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;날짜 계산도 가능함 but 차원은 동일하게 (년도 – 년도) (월 – 월) (일 -일) 이렇게&lt;/p&gt;
&lt;p&gt;&lt;code&gt;let year = now.getFullYear();&lt;/code&gt;&lt;br&gt;
&lt;code&gt; let birthdayYear = birthday.getFullYear();&lt;/code&gt;&lt;br&gt;
&lt;code&gt; let age = year - birthdayYear;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;scope&quot;&gt;&lt;a href=&quot;#scope&quot; aria-label=&quot;scope permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Scope&lt;/h1&gt;
&lt;p&gt;변수의 사용 범위를 뜻한다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;block이란 중괄호({}, curly brace)로 감싸진 것을 block – func, if, for 모두 포함 여기 안에서 선언된 변수를 지역(local) 변수라고 하며 해당 함수(block)내에서 만 쓸 수 있다.&lt;/li&gt;
&lt;li&gt;Global(전역) scope&lt;br&gt;
block밖인 global scope에서 만든 변수를 global variable(전역변수)라고 합니다.
코드 어디서든 접근 가능해서 변수값을 확인할 수 있습니다.&lt;/li&gt;
&lt;li&gt;Scope 오염&lt;br&gt;
Global 변수 남용하지 마라 나중에 찾기 힘들어지고 global 변수에 의해 값이 오염이 되어 원하는 결과가 나오지 않게 된다.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;타이트한 scope(tightly scoping)의 변수는 코드 품질을 올려줍니다!!&lt;/p&gt;
&lt;blockquote&gt;
&lt;div class=&quot;gatsby-highlight&quot; data-language=&quot;text&quot;&gt;&lt;pre class=&quot;language-text&quot;&gt;&lt;code class=&quot;language-text&quot;&gt;- 코드가 block으로 명확하게 구분되기 때문에 코드 가독성이 올라갑니다.
- 코드가 한줄한줄 쭉 나열된 것이 아니라 각각의 기능별로 block을 나누면 코드가 이해하기 쉬워집니다.
- 나중에 코드를 수정할 일이 있을 때, 코드를 오랜만에 보더라도 잘 나뉘어 있어서 유지보수가 쉬워집니다.
- 프로그램이 끝날때까지 변수가 살아있는 것이 아니라서(block이 끝나면 local 변수의 삶이 끝나서) 메모리 절약도 됩니다.&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;/blockquote&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;switch&quot;&gt;&lt;a href=&quot;#switch&quot; aria-label=&quot;switch permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Switch&lt;/h2&gt;
&lt;p&gt;많은 코드 블록영역중 조건(case)에 match 되는 block을 executed 한다&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;case ‘scope’: description = ‘변수영역’;&lt;/li&gt;
&lt;li&gt;case ‘block’: description = ’{}로 둘러쌓인 특정한 영역(함수, for문, if문 등)‘;&lt;/li&gt;
&lt;li&gt;case ‘global scope’: description = ‘이 자바스크립트 파일 전체 영역’;&lt;/li&gt;
&lt;li&gt;case ‘global variable’: description = ‘이 자바스크립트 파일 전체 영역에 쓰이는 변수’;&lt;/li&gt;
&lt;li&gt;case ‘block scope’: description = ‘특정한 영역 내에서만 쓰이는 변수’;&lt;/li&gt;
&lt;li&gt;case ‘local variable’: description = ‘지역(특정영역) 내에서만 쓰이는 함수’;&lt;/li&gt;
&lt;li&gt;case ‘global namespace’: description = ‘이 자바스크립트 파일 전체에 선언된 변수 이름’;&lt;/li&gt;
&lt;li&gt;case ‘scope pollution’: description = ‘내가 의도하지 않는 글로벌 변수가 리턴되는 것’;&lt;/li&gt;
&lt;li&gt;default : description = ‘초기값’&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[09.30~10.04 한 주 정리 part.4]]></title><description><![CDATA[배열 / class / 주석]]></description><link>https://ctsictai.github.io//posts/javascript-part4/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/javascript-part4/</guid><pubDate>Thu, 10 Oct 2019 23:45:03 GMT</pubDate><content:encoded>&lt;h2 id=&quot;array배열&quot;&gt;&lt;a href=&quot;#array%EB%B0%B0%EC%97%B4&quot; aria-label=&quot;array배열 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Array(배열)&lt;/h2&gt;
&lt;p&gt;비슷한 성질을 가진 데이터들의 집합&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;배열의 요소(Elements)&lt;br&gt;
&lt;code&gt;let name = [‘chris’, 2, test(name), [‘rs’, ‘esp’], function (price)]&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;Element type – everything! – str /num / array / etc on..&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;인덱싱 – 배열안에서 각 요소들은 주소값(?)을 가지고 있다. – 배열안의 요소를 쉽게 찾을 수 있도록 하는 기능이다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;function getElement() {
let arr = [3, [4, [“array”, 9], 2+3], [0]];}&lt;/code&gt;
&lt;code&gt;return arr[1][1][0];}&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;배열의 요소는 다양한 타입이 가능하다. 특히 배열안의 배열도 가능하다. 이렇게 [[[]]]- 배열 속에 배열이 있는 구조를 다차원 배열이라고 한다.
그러면 다차원 배열의 인덱싱은 어떻게 할까??? 가장 바깥의 배열부터 안에 있는 배열 순서대로 인덱싱을 진행하면&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;[1]-가장 바깥의 배열의 2번째 요소(이게 배열이다) - [4, [“array”, 9], 2+3],&lt;/li&gt;
&lt;li&gt;[1] - 1에서 인덱싱한 요소가 배열이고 이 배열에서 2번째 요소(이것도 배열) - [“array”, 9]&lt;/li&gt;
&lt;li&gt;[0] - 2에서 인덱싱한 요소가 배열이고 이 배열에서 1번째 요소 -“array”가 출력된다.&lt;/li&gt;
&lt;li&gt;배열 요소 추가하기&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;let cities = [];&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;array명[원하는 인덱싱] = 넣으려는 요소값&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;cities[0] = “서울”;&lt;/code&gt;
&lt;code&gt;cities[1] = “대전”;&lt;/code&gt;
&lt;code&gt;cities[2] = “대구”;&lt;/code&gt;
&lt;code&gt;cities[2] = “부산”;&lt;/code&gt; – 대구에서 부산으로 업뎃됨
&lt;code&gt;cities.push(“포항”);&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;요소 맨뒤에 위의 경우는 [3]에 “포항”을 집어 넣음&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;cities.unshift(“강릉”);&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;요소 맨앞에 위의 경우는 [0]에 “강릉”을 집어 넣음&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;Cities.pop();&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;맨 뒤에 있던 요소 “포항”이 날라감&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;※ Callback 함수 – 인자로 전달되는 함수 – 함수에서 다시 불러와지는(콜백) 함수&lt;/p&gt;
&lt;h4 id=&quot;arraymap&quot;&gt;&lt;a href=&quot;#arraymap&quot; aria-label=&quot;arraymap permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Array.map()&lt;/h4&gt;
&lt;p&gt;배열을 반복해주는데, callback 함수에서 return한 값으로 매 요소를 수정해준다.
Map 메서드 return값은 수정도니 값으로 다시 생성된 배열.
Array 타입의 데이터를 요소 갯수 만큼 반복합니다.
반복할 때마다 실행할 함수를 parameter로 전달합니다.
그러면 이 callback 함수에서 array의 요소를 인자(x)로 받습니다.
해당 요소를 수정하고 싶은대로 로직을 구현하고 return해주면,
해당 index의 요소가 return 된 값으로 치환됩니다.&lt;/p&gt;
&lt;h4 id=&quot;arrayforeach&quot;&gt;&lt;a href=&quot;#arrayforeach&quot; aria-label=&quot;arrayforeach permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Array.forEach()&lt;/h4&gt;
&lt;p&gt;For 대신 사용하는 반복문
forEach는 함수 자체가 return하는 것도 아무것도 없는게 큰 차이
forEach함수를 탈출 하고 싶을 때 return을 사용하면 됨 – 지정 해줘야 됨 - for문에 종료조건에 따른 리턴 되는게 없으면 계속 반복하는 것 처럼&lt;/p&gt;
&lt;h2 id=&quot;class&quot;&gt;&lt;a href=&quot;#class&quot; aria-label=&quot;class permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Class&lt;/h2&gt;
&lt;p&gt;Object를 정의하는 프레임 혹은 설계
원하는 구조의 객체의 프레임을 설계해 놓고, 비슷한 모양의 객체를 공장처럼 찍어낼 수 있다.
비슷한 모양의 객체를 계속적으로 만드는 건 낭비 이걸 class라는 설계도를 통해 공통적인 부분의 중복 코딩을 막을 수 있다. 또한 코드 가독성 및 유지, 보수, 변경에도 훨씬 유리하다&lt;/p&gt;
&lt;p&gt;★ CSS에서 말하는 Class와는 개념이 다르다!!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;JS Class 작성 예시&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;class Car {&lt;/code&gt; 클래스명은 대문자 시작 CamelCase 작성 규칙&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;constructor(name, price) {&lt;/code&gt;생성자 영역 – 인자 2개 받음 context 밖에서 인스턴스 생성할때마다 맨 먼저 호출되는 부분(클래스를 시작하기 위한 첫 기초단계라고 생각하자)&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;this.name = name;&lt;/code&gt; this는 class 영역(context) 내에서 적용할 인스턴스 name인스턴스는 = 인자 name값 ø context(class 개념에서) = scope (함수 개념에서)&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;this.price = price;&lt;/code&gt; 위와 동일하고 price인스턴스 인자값만 price로&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;this.department = &amp;quot;선릉지점&amp;quot;;&lt;/code&gt; department 인스턴스는 “선릉지점” 값&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;this.salesAmount = 0;&lt;/code&gt;salesAmount 인스턴스는 0값&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;}&lt;/code&gt;&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;applyDiscount(discount) {&lt;/code&gt;클래스 내에 생성되는 함수 = 메서드 à 객체가 프로터티 값으로 갖고 있다.&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;return this.price * discount;&lt;/code&gt; - this 인스턴스를 써야 class내에서는 통한다!&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;} addSales() { this.salesAmount++; } changeDepartment(departmentName) { this.department = departmentName; } }&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;if문&quot;&gt;&lt;a href=&quot;#if%EB%AC%B8&quot; aria-label=&quot;if문 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;if문&lt;/h2&gt;
&lt;p&gt;“만약에 ~하면 ~한다.”가 컴퓨터 언어로 변환&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;|| and &amp;#x26;&amp;#x26;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;if (answer === &amp;quot;선릉&amp;quot; || answer === &amp;quot;강남&amp;quot; || answer === &amp;quot;역삼&amp;quot;)&lt;/code&gt; - 선릉 or 강남 or 역삼인 경우&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;||는 or 논리 연산자이다.&lt;/li&gt;
&lt;li&gt;&amp;#x26;&amp;#x26; and 논리 연산자
&lt;code class=&quot;language-text&quot;&gt;if (hobby === &amp;quot;축구&amp;quot; &amp;amp;&amp;amp; morning === &amp;quot;네&amp;quot;)&lt;/code&gt; - hobby가 축구이고 morning이 네인 경우&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ex)
&lt;code class=&quot;language-text&quot;&gt;if (age &amp;gt; 65 || age &amp;lt; 21 &amp;amp;&amp;amp; res === &amp;quot;한국&amp;quot;)&lt;/code&gt;&lt;br&gt;
=&gt; 나이가 65세 초과이거나 나이가 21세 미만이고 한국거주하는 사람&lt;/p&gt;
&lt;p&gt;위의 코드는 가독성이 좋지 않으므로 밑에 처럼 () 처리하는게 좋다&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;if (age &amp;gt; 65 || (age &amp;lt; 21 &amp;amp;&amp;amp; res === &amp;quot;한국&amp;quot;))&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;만약에 이런 형식의 코드는 어떻게 해석이 될까?&lt;br&gt;
&lt;code class=&quot;language-text&quot;&gt;if ((age &amp;gt; 65 || age &amp;lt; 21) &amp;amp;&amp;amp; res === &amp;quot;한국&amp;quot;)&lt;/code&gt;&lt;br&gt;
=&gt; 나이가 65세 초과거나 21세미만이고 한국 거주하는 자&lt;/p&gt;
&lt;h2 id=&quot;주석---주석-연산자--&quot;&gt;&lt;a href=&quot;#%EC%A3%BC%EC%84%9D---%EC%A3%BC%EC%84%9D-%EC%97%B0%EC%82%B0%EC%9E%90--&quot; aria-label=&quot;주석   주석 연산자   permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;주석 - 주석 연산자(//, /* */)&lt;/h2&gt;</content:encoded></item><item><title><![CDATA[09.30~10.04 한 주 정리 part3]]></title><description><![CDATA[Number Type / Object 정리]]></description><link>https://ctsictai.github.io//posts/humane-typography-in-the-digital-age/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/humane-typography-in-the-digital-age/</guid><pubDate>Wed, 09 Oct 2019 22:40:32 GMT</pubDate><content:encoded>&lt;h2 id=&quot;number-type-파헤치기&quot;&gt;&lt;a href=&quot;#number-type-%ED%8C%8C%ED%97%A4%EC%B9%98%EA%B8%B0&quot; aria-label=&quot;number type 파헤치기 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Number type 파헤치기!!&lt;/h2&gt;
&lt;p&gt;가장 중요한 객체 Math 객체 – 수학 계산식을 모아 놓은 object라고 보면 된다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[] Round / floor / ceil / random 자주 쓰는 함수들&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.round(2.5);&lt;/code&gt; 3 반올림! – 평점계산시 정수값 반환&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.floor(4.2);&lt;/code&gt; 4 가장 가까운 정수값으로 내림!&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Math.ceil(4.1);&lt;/code&gt; 5 가장 가까운 정수값으로 올림!&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Math.random();&lt;/code&gt; 0~1까지의 임의의 실수 값 리턴! – 로또 / 이벤트 당첨자&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;단점 0~1이라는 한정된 구간이라서 문제 그래서 Math.random에 원하는 구간값을 곱해서 난수를 뽑아 낸다.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Ex) min ~ max 사이의 난수 값 추출&lt;/p&gt;
&lt;p&gt;&lt;code&gt;(Math.random() * (max - min) ) + min&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&quot;object객체&quot;&gt;&lt;a href=&quot;#object%EA%B0%9D%EC%B2%B4&quot; aria-label=&quot;object객체 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Object(객체)&lt;/h2&gt;
&lt;p&gt;좀 더 편안하게 코드 및 데이터를 관리할 수 있는 틀
다시 말하면 객체는 이름과 값으로 구성된 프로퍼티들의 집합이라고 할 수 있다.
Key-value로 되어 있으면 순서는 상관없음 key 값으로 다 찾을 수 있기 때문에&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://images.velog.io/post-images/hyksmine/30d9e230-e5f3-11e9-a8fa-f7c7f5a2598c/15548253760452a280e2abfdc8cec2b3b9244788f8350.png&quot; alt=&quot;javascript 객체 프로퍼티&quot;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;객체는 {}(중괄호)로 감싸져 있고,&lt;/li&gt;
&lt;li&gt;콜론으로 구분된 이름/값 쌍들이&lt;/li&gt;
&lt;li&gt;쉼표로 분리된 목록의 형태입니다.&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Property의 규칙&lt;/li&gt;
&lt;li&gt;property 이름은 중복될 수 없다.&lt;/li&gt;
&lt;li&gt;property이름과 property값 사이에 :(콜론)으로 구분한다.&lt;/li&gt;
&lt;li&gt;property를 추가할 때는 ,(쉼표)를 붙여준다.&lt;/li&gt;
&lt;li&gt;property 값에는 어느 type이나 가능하다(string, number, array, object, function..)&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 객체의 Key(프로퍼티명) – 프로퍼티 값에 대해 변수처럼 역할을 하는 것으로서 텍스트, 숫자, 함수, 객체, 특수문자도 가능 하다.&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; Key Searching – 객체명[‘key’] – key에 상응하는 value가 나옴 – 많이 쓰임!!! – 객체 안의 특정 값을 찾아내는데 매우 유용&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;value-수정--새로운-key-추가&quot;&gt;&lt;a href=&quot;#value-%EC%88%98%EC%A0%95--%EC%83%88%EB%A1%9C%EC%9A%B4-key-%EC%B6%94%EA%B0%80&quot; aria-label=&quot;value 수정  새로운 key 추가 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Value 수정 / 새로운 key 추가&lt;/h4&gt;
&lt;p&gt;객체에 이미 키가 존재하는데, 다시 한 번 할당하면 값이 교체(수정)됩니다.
이전에 없던 키로 접근하면, 새로운 프로퍼티가 추가 됩니다.&lt;/p&gt;
&lt;p&gt;※ 키 생성시 값을 부여하지 않으면 undefined로 뜬다. 주의하자!&lt;/p&gt;
&lt;h3 id=&quot;method메서드&quot;&gt;&lt;a href=&quot;#method%EB%A9%94%EC%84%9C%EB%93%9C&quot; aria-label=&quot;method메서드 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Method(메서드)&lt;/h3&gt;
&lt;p&gt;객체에 저장된 값이 함수일 때&lt;/p&gt;
&lt;h4 id=&quot;객체의-property값을-접근&quot;&gt;&lt;a href=&quot;#%EA%B0%9D%EC%B2%B4%EC%9D%98-property%EA%B0%92%EC%9D%84-%EC%A0%91%EA%B7%BC&quot; aria-label=&quot;객체의 property값을 접근 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;객체의 property값을 접근&lt;/h4&gt;
&lt;p&gt;프로퍼티의 값은 추가/수정/type 변환 가능 새로운 프로퍼티 추가 가능&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;프로퍼티 추가 – 객체명.프로퍼티명.siblingproperty = 추가할 프로퍼티 값&lt;/li&gt;
&lt;li&gt;수정 – 객체명.프로퍼티명 = 수정할 프로퍼티 값 – 이 때 type 다르게 하면 됨&lt;/li&gt;
&lt;li&gt;추가 – 객체명.프로퍼티명 = 추가로 입력할 프로퍼티 값&lt;/li&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 다중 객체 배열의 객체
&lt;code&gt;let objData = { name: 50, address: { email: “gaebal@gmail.com”, home: “위워크 선릉2호점” }, books: { year: [2019, 2018, 2006], info: [{ name: “JS Guide”, price: 9000 }, { name: “HTML Guide”, price: 19000, author: “Kim, gae bal” }] } };&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;여기서 “JS Guide”를 찾아내고 싶다면 어떻게 해야 할까?&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Let bookName = objData.books.info[0].name&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let bookName = objData(객체명).books(프로퍼티명).info(프로퍼티명)&lt;a href=&quot;info%20%EB%B0%B0%EC%97%B4%EC%95%88%EC%97%90%20%EC%B2%AB%20%EB%B2%88%EC%A7%B8%20%EC%9A%94%EC%86%8C%EC%9D%B4%EB%AF%80%EB%A1%9C&quot;&gt;0&lt;/a&gt;.name(프로퍼티명) = name에 대한 프로퍼티 값 “JS Guide”가 나옴&lt;/p&gt;</content:encoded></item><item><title><![CDATA[09.30~10.04 한 주 정리 part2]]></title><link>https://ctsictai.github.io//posts/a-brief-history-of-typography/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/a-brief-history-of-typography/</guid><pubDate>Tue, 08 Oct 2019 22:50:32 GMT</pubDate><content:encoded>&lt;h2 id=&quot;1-string-type에-대해-파헤쳐-보자&quot;&gt;&lt;a href=&quot;#1-string-type%EC%97%90-%EB%8C%80%ED%95%B4-%ED%8C%8C%ED%97%A4%EC%B3%90-%EB%B3%B4%EC%9E%90&quot; aria-label=&quot;1 string type에 대해 파헤쳐 보자 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. String type에 대해 파헤쳐 보자&lt;/h2&gt;
&lt;p&gt;string type은 ” ” / ’ ’ / &lt;code class=&quot;language-text&quot;&gt;&lt;/code&gt; 사이에 있는 것을 말한다.&lt;/p&gt;
&lt;p&gt;string type은 대소문자를 구별한다. n is not equal N&lt;/p&gt;
&lt;p&gt;string type은 str에 제공되는 메서드를 쓸 수 있다.&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;(1) Length 메서드&lt;/p&gt;
&lt;p&gt;Str.length = str의 길이를 알 수 있다 – 굉장히 많이 씀!!&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;(2) indexOf 메서드&lt;/p&gt;
&lt;p&gt;str.indexOf(“찾고자 하는 문자”) – 찾고자 하는 문자의 인덱싱 값을 반환 해준다. – 많이 씀!!
문자가 복수 문자일 경우 첫 문자열 기준으로 반환한다. 만약에 인자값에 입력한 값이 없으면 -1을 반환한다.&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;※ 문자의 인덱싱 값(위치)를 알아서 무엇에 좋을까?&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;차단할 단어 모음이 존재하면, 사용자가 댓글 쓰고 댓글달기를 누를 때 차단할 단어 모음중 하나라도 매치되면 댓글을 못달게 할 수 있다.&lt;/li&gt;
&lt;li&gt;오타를 코딩으로 수정 가능함.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;(3) Slice 메서드
str.slice(시작할 인덱싱 혹은 특정 str, 종료 인덱싱 혹은 특정 str) – 텍스트를 잘라주는 함수&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;str = “JavaScript는 프로래밍 언어이다.&amp;quot;;&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;str.slice(0, 4);&lt;/code&gt; - java =&gt; [4]의 위치는 ‘S’인데 S앞까지 잘라준다!! 중요!!!
&lt;code class=&quot;language-text&quot;&gt;Str.slice(5, 13);&lt;/code&gt; - “cript는 프” [5] 부터 시작 [13]인 ‘로’ 앞까지
앞서서 &lt;code class=&quot;language-text&quot;&gt;let char = str.indexOf(“Script”);&lt;/code&gt; - 위치 인덱싱 값 반환 – 첫 문자 ‘S’ 기준으로 인덱싱값 반환&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;str.slice(char);&lt;/code&gt;=&gt; Script는 프로래밍 언어이다 - 출력 =&gt; 2번째 인자 안주면 무조건 끝까지 !!&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;(4) StartsWith(“시작하는 문자열”)&lt;/p&gt;
&lt;p&gt;– 해당 문자열로 str이 시작하는지 아닌지 true/false&lt;/p&gt;
&lt;p&gt;(5) endsWith(“끝나는 문자열”)&lt;/p&gt;
&lt;p&gt;– 해당 문자열로 str이 끝나는지 아닌지 true/false&lt;/p&gt;
&lt;p&gt;(6) includes(“찾으려는 문자열”)&lt;/p&gt;
&lt;p&gt;– 해당 문자열에 찾으려는 문자열이 있으면 true 없으면 false 반환&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h2 id=&quot;1-2-텍스트-문자열str의-연결&quot;&gt;&lt;a href=&quot;#1-2-%ED%85%8D%EC%8A%A4%ED%8A%B8-%EB%AC%B8%EC%9E%90%EC%97%B4str%EC%9D%98-%EC%97%B0%EA%B2%B0&quot; aria-label=&quot;1 2 텍스트 문자열str의 연결 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1-2. 텍스트 문자열(str)의 연결**&lt;/h2&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;구버전&lt;/th&gt;
&lt;th&gt;ES6&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;“안녕하세요! ” + username(변수) + “님”&lt;/td&gt;
&lt;td&gt;const hi = &lt;code class=&quot;language-text&quot;&gt;안녕하세요. 저는 ${name} 입니다.&lt;/code&gt;;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;- +를 붙여야 한다. Str type이라면 ‘’나 “” 필수&lt;/td&gt;
&lt;td&gt;+ 필요없고 ${name -변수} 변수값을 문자열 값에 넣을 수 있다. 그리고 &lt;code class=&quot;language-text&quot;&gt;&lt;/code&gt;(1옆에 있는 기호)로 문자열 지정이 가능하고 변수값을 넣을 수 있게 되었다.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;구버전&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Let detail = ‘자세히’\n +’보아야’\n + ‘이이이’;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Let detail = “자세히&lt;/p&gt;
&lt;p&gt;보아야&lt;/p&gt;
&lt;p&gt;이이이”;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;ES6&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let message = &amp;quot;감사합니다., &amp;quot;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let userName = &amp;quot;김개발&amp;quot;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let banger = &amp;quot;님!&amp;quot;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let customMess = message + userName + banger;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let message = &amp;quot;감사합니다., &amp;quot;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let userName = &amp;quot;김개발&amp;quot;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let banger = &amp;quot;님!&amp;quot;;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let customMess =&lt;/code&gt; &lt;span class=&quot;katex&quot;&gt;&lt;span class=&quot;katex-mathml&quot;&gt;&lt;math xmlns=&quot;http://www.w3.org/1998/Math/MathML&quot;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;g&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&quot;application/x-tex&quot;&gt;{message}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&quot;katex-html&quot; aria-hidden=&quot;true&quot;&gt;&lt;span class=&quot;base&quot;&gt;&lt;span class=&quot;strut&quot; style=&quot;height:0.625em;vertical-align:-0.19444em;&quot;&gt;&lt;/span&gt;&lt;span class=&quot;mord&quot;&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot; style=&quot;margin-right:0.03588em;&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;mord mathdefault&quot;&gt;e&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;{userName} ${banger};`&lt;/p&gt;
&lt;h3 id=&quot;str과-number-type의-만남--js의-특징&quot;&gt;&lt;a href=&quot;#str%EA%B3%BC-number-type%EC%9D%98-%EB%A7%8C%EB%82%A8--js%EC%9D%98-%ED%8A%B9%EC%A7%95&quot; aria-label=&quot;str과 number type의 만남  js의 특징 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;str과 number type의 만남 – js의 특징&lt;/h3&gt;
&lt;p&gt;String + Number 을 시도할 때 항상 주의해야 합니다.
String과 Number형을 더하면 항상 String 형으로 변환됩니다.&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let text = &amp;quot;2 더하기 2는 &amp;quot; + (2 + 2)&lt;/code&gt; – |2 더하기 2는 4| 출력&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let text = &amp;quot;2 더하기 2는 &amp;quot; + 2 + 2;&lt;/code&gt; - |2 더하기 2는 22| 출력&lt;/p&gt;
&lt;h2 id=&quot;1-3-string-☞-number-type-변환&quot;&gt;&lt;a href=&quot;#1-3-string-%E2%98%9E-number-type-%EB%B3%80%ED%99%98&quot; aria-label=&quot;1 3 string ☞ number type 변환 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1-3. String ☞ Number type 변환​&lt;/h2&gt;
&lt;p&gt;JS에서는 type error가 잘 안나는 편이라 덜 신경쓰이지만 원래 다른 언어에서는 칼 같이 type에 따른 error가 많이 뜬다. 범용적으로 str은 str끼리 num은 num끼리 묶어야 코드 가독성이 좋다.&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;+기호_는 str, num type 신경안쓰고 모두 되는 연산자라 많이 헷갈린다.
꼭 문자형과 숫자형을 구분하는 것이 좋다.&lt;/li&gt;
&lt;li&gt;기호_는 num type만 가능하므로 str type으로 -연산하면 NaN(Not a Number)가 뜬다&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;string을-number-type으로-변환하는-메서드&quot;&gt;&lt;a href=&quot;#string%EC%9D%84-number-type%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%98%EB%8A%94-%EB%A9%94%EC%84%9C%EB%93%9C&quot; aria-label=&quot;string을 number type으로 변환하는 메서드 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;String을 Number type으로 변환하는 메서드&lt;/h3&gt;
&lt;p&gt;Number! parseInt / parseFloat
&lt;code class=&quot;language-text&quot;&gt;Let birthinput = “1999”&lt;/code&gt; -str
&lt;code class=&quot;language-text&quot;&gt;Let birth = Number(birhinput);&lt;/code&gt; - num​&lt;/p&gt;
&lt;h3 id=&quot;number을-string-type으로-변환하는-메서드&quot;&gt;&lt;a href=&quot;#number%EC%9D%84-string-type%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%98%EB%8A%94-%EB%A9%94%EC%84%9C%EB%93%9C&quot; aria-label=&quot;number을 string type으로 변환하는 메서드 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Number을 String type으로 변환하는 메서드&lt;/h3&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;Let n = 12;&lt;/code&gt;
&lt;code class=&quot;language-text&quot;&gt;Let nToS = n.toString();&lt;/code&gt;&lt;/p&gt;</content:encoded></item><item><title><![CDATA[Git을 이용한 gatsby blog 작성]]></title><link>https://ctsictai.github.io//posts/the-origins-of-social-stationery-lettering</link><guid isPermaLink="false">https://ctsictai.github.io//posts/the-origins-of-social-stationery-lettering</guid><pubDate>Tue, 08 Oct 2019 22:30:32 GMT</pubDate><content:encoded>&lt;h1 id=&quot;git의-구조&quot;&gt;&lt;a href=&quot;#git%EC%9D%98-%EA%B5%AC%EC%A1%B0&quot; aria-label=&quot;git의 구조 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git의 구조&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;https://jistol.github.io/assets/img/git/git-basic/git-basic-3.png&quot; alt=&quot;Git-Structure&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;git-add-&quot;&gt;&lt;a href=&quot;#git-add-&quot; aria-label=&quot;git add  permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;Git add .&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;변경된 파일을 모두 tracking해서 working space에서 stage(index)로 upload&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;git-status&quot;&gt;&lt;a href=&quot;#git-status&quot; aria-label=&quot;git status permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git status&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;현재의 git과의 상태를 체크하는 명령어 - step by step 마다 쳐서 확인한다. (add/commit 상태 확인)&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;no add status&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;modified: movie/views.py&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;add status&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;new file: requirements.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;git-commit--m-message&quot;&gt;&lt;a href=&quot;#git-commit--m-message&quot; aria-label=&quot;git commit  m message permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git commit -m “message”&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;간결하고 알아볼 수 있는 message를 남긴다. commit을 하면 index에서 local repo로 간다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;git-remote-add-origin-github-repo-url&quot;&gt;&lt;a href=&quot;#git-remote-add-origin-github-repo-url&quot; aria-label=&quot;git remote add origin github repo url permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git remote add origin github repo url&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;local repo와 remote repo를 연결하기 위해 github에서 만든 new repository 주소를 붙여준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;git-remote--v&quot;&gt;&lt;a href=&quot;#git-remote--v&quot; aria-label=&quot;git remote  v permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git remote -v&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;local repo와 연결된 remote repo 상태를 보여주는 명령어&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;git-branch-branch-name&quot;&gt;&lt;a href=&quot;#git-branch-branch-name&quot; aria-label=&quot;git branch branch name permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git branch “branch name”&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;create branch&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;git-branch&quot;&gt;&lt;a href=&quot;#git-branch&quot; aria-label=&quot;git branch permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git branch&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;해당 remote repo에 생성된 branch 현황을 보여준다.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;git-push-origin-master-혹은-branch-name&quot;&gt;&lt;a href=&quot;#git-push-origin-master-%ED%98%B9%EC%9D%80-branch-name&quot; aria-label=&quot;git push origin master 혹은 branch name permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;git push origin master 혹은 branch name&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;remote repo(github에 있는 repo)에 최종적으로 file upload&lt;/li&gt;
&lt;li&gt;이 때 master는 master branch에 push 하는 것이고 branch name은 만든 branchdp push 한다.&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item><item><title><![CDATA[09.30 ~ 10.04 한 주 정리 part.1]]></title><description><![CDATA[1. 변수
변수를 선언하는 명령어 - var / let / const - 최신버전에서는 var 사용은 지양한다.
- Let – 변수값 수정 가능
- Const – 변수값 수정 불가능
- [ ] 변수 선언 문법.]]></description><link>https://ctsictai.github.io//posts/perfecting-the-art-of-perfection/</link><guid isPermaLink="false">https://ctsictai.github.io//posts/perfecting-the-art-of-perfection/</guid><pubDate>Tue, 08 Oct 2019 17:41:37 GMT</pubDate><content:encoded>&lt;h1 id=&quot;0930--1004-한-주-정리-part1&quot;&gt;&lt;a href=&quot;#0930--1004-%ED%95%9C-%EC%A3%BC-%EC%A0%95%EB%A6%AC-part1&quot; aria-label=&quot;0930  1004 한 주 정리 part1 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;09.30 ~ 10.04 한 주 정리 part.1&lt;/h1&gt;
&lt;h2 id=&quot;1-변수&quot;&gt;&lt;a href=&quot;#1-%EB%B3%80%EC%88%98&quot; aria-label=&quot;1 변수 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;1. 변수&lt;/h2&gt;
&lt;p&gt;변수를 선언하는 명령어 - var / let / const - 최신버전에서는 var 사용은 지양한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Let – 변수값 수정 가능&lt;/li&gt;
&lt;li&gt;Const – 변수값 수정 불가능&lt;/li&gt;
&lt;li&gt;[] 변수 선언 문법&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://blogfiles.pstatic.net/MjAxOTEwMDRfMTIz/MDAxNTcwMTk4OTQ1NzQx.a4yWDmRikvIoOXDD6w84MQEZsHreb5R5xINSum38KJYg.dscq-Xo5r3CKotSm2oiZJHxT4IACet5L4_o_mciQVoog.PNG.civicofjuve/image.png?type=w1&quot;&gt;&lt;/p&gt;
&lt;p&gt;◎ 변수이름 짓기 규칙&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;대소문자 구문 - 변수이름, 함수이름, 연산자 모두 대소문자를 구분합니다. 따라서 myName과 MyName은 다른 변수입니다.&lt;/li&gt;
&lt;li&gt;변수 이름을 정할 때, 첫 번째 문자는 반드시 글자나 밑줄(_), 달러기호($)중 하나입니다.&lt;/li&gt;
&lt;li&gt;두 번째 문자부터는 글자, 밑줄, 달러, 숫자 중에서 자유롭게 쓸 수 있습니다.&lt;/li&gt;
&lt;li&gt;변수이름, 함수이름 등 camelCase(카멜케이스) 방식으로 쓸 것.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;※ 카멜케이스(camelCase)란?&lt;/p&gt;
&lt;p&gt;낙타 등처럼 울퉁불퉁하다는 소리입니다. 단어가 새로 시작할 때부터 대문자로 쓰면 됩니다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;변수 선언 ex)&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;let name = “김개발”;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;변수 값 수정&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Name = “김코딩”;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; List item&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(주의할 점!) 변수 값 수정 시에는 let을 붙일 필요가 없다 why? 이미 선언된 변수명이기 때문에&lt;/p&gt;
&lt;p&gt;변수명만 선언하고 변수값은 나중에 줘도 됨!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;let man ;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;man = “남”;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;2-함수function&quot;&gt;&lt;a href=&quot;#2-%ED%95%A8%EC%88%98function&quot; aria-label=&quot;2 함수function permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;2. 함수(function)&lt;/h2&gt;
&lt;ul&gt;
&lt;li class=&quot;task-list-item&quot;&gt;&lt;input type=&quot;checkbox&quot; disabled&gt; 텍스트 추가&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&quot;https://blogfiles.pstatic.net/MjAxOTEwMDRfMjQg/MDAxNTcwMTk5MjY0OTQ0.-aIwwtQ2LF8WdknKCnADHT8DE94qZDiXp1V-bNdChLsg.-n75Xf-fl31jUw1FPvf_3YIdKIAys3xRC4Nn6jK63pcg.PNG.civicofjuve/image.png?type=w1&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://blogfiles.pstatic.net/MjAxOTEwMDRfMTk0/MDAxNTcwMTk5MjY5OTE3.XvtmLWFKhgRfsBwixP71SPirBqMvXIX4HmjoPR3m3Jog.aDKIvV46VDz6wi_TSEww4Mgl9qQN2iyDPQhR5I6Inpwg.PNG.civicofjuve/image.png?type=w1&quot;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;function 키워드로 시작하여&lt;/li&gt;
&lt;li&gt;함수 이름을 지어주고&lt;/li&gt;
&lt;li&gt;함수를 알리는 괄호((): parentheses)를 열고 닫고&lt;/li&gt;
&lt;li&gt;함수의 시작을 알리는 중괄호({: curly bracket)을 열어줍니다.&lt;/li&gt;
&lt;li&gt;실행할 코드를 작성합니다. 함수의 body라고 부르기도 합니다. 이 부분에 들여쓰기가 되어있습니다. 함수 내부에 있는 코드라는 것을 알기 좋게 하려고 들여쓰기 하였습니다.&lt;/li&gt;
&lt;li&gt;return(반환) 할 것이 있다면 작성합니다.&lt;/li&gt;
&lt;li&gt;중괄호(}: curly bracket)로 닫아줍니다.&lt;/li&gt;
&lt;li&gt;함수 호출(실제 js에서 실행되는 것)&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;새로운-함수-정의법---arrow-function&quot;&gt;&lt;a href=&quot;#%EC%83%88%EB%A1%9C%EC%9A%B4-%ED%95%A8%EC%88%98-%EC%A0%95%EC%9D%98%EB%B2%95---arrow-function&quot; aria-label=&quot;새로운 함수 정의법   arrow function permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;새로운 함수 정의법 - Arrow Function&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;ES6에서 새로 생긴 방법&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;const getName = (name) =&gt; {}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Const getName(함수명) = (name)인자 – 인자가 하나면 ( ) 생략가능 나머지는 안됨 =&gt; {}(로직) – return만 있는 경우 {return} 모두 생략 가능&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;getName(); – 호출방식은 기존과 동일하다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;*구버전 vs ES6 함수 선언 비교
| 구버전 | ES6 |
|—|— |
| let getEmail = function(username){return &lt;code class=&quot;language-text&quot;&gt;${username}@gmail.com&lt;/code&gt;; | const getEmail = username =&gt; &lt;code class=&quot;language-text&quot;&gt;${username}@gmail.com&lt;/code&gt;; |&lt;/p&gt;
&lt;h3 id=&quot;함수의-인자argument-대하여&quot;&gt;&lt;a href=&quot;#%ED%95%A8%EC%88%98%EC%9D%98-%EC%9D%B8%EC%9E%90argument-%EB%8C%80%ED%95%98%EC%97%AC&quot; aria-label=&quot;함수의 인자argument 대하여 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;함수의 인자(argument) 대하여&lt;/h3&gt;
&lt;p&gt;어떤 함수를 호출했을 때 전달받는 Value&lt;/p&gt;
&lt;p&gt;function multiply(arg1, arg2){ - multiply라는 함수는 인자를 2개 받는다.&lt;/p&gt;
&lt;p&gt;var myNumber = arg1 * arg2; - 받은 인자 2개를 사용하였다.&lt;/p&gt;
&lt;p&gt;if (myNumber &gt; 100) { 받은 인자 2개를 사용한 것에 조건문 추가&lt;/p&gt;
&lt;p&gt;return “크다!”; - 출력되는 결과&lt;/p&gt;
&lt;p&gt;} else{&lt;/p&gt;
&lt;p&gt;return “작다!”; - 출력되는 결과 – 함수의 실행결과를 출력해주는 함수 안해주면&lt;/p&gt;
&lt;p&gt;undefined가 출력이 된다.&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;p&gt;}&lt;/p&gt;
&lt;h2 id=&quot;3-수학식-표현-방법&quot;&gt;&lt;a href=&quot;#3-%EC%88%98%ED%95%99%EC%8B%9D-%ED%91%9C%ED%98%84-%EB%B0%A9%EB%B2%95&quot; aria-label=&quot;3 수학식 표현 방법 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;3. 수학식 표현 방법&lt;/h2&gt;
&lt;p&gt;★ Num++ =&gt; num = num + 1 – 계산을 해서 그 결과를 리턴 까지 하는 명령어&lt;/p&gt;
&lt;p&gt;★ Num— =&gt; num = num - 1&lt;/p&gt;
&lt;p&gt;※ 중요한 코딩 오류 중 하나 num++의 js 성질&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let num = 1;&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let newNum = num++;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;newNum은 num의 1이 할당되고 num++이게 실행되서 num은 2가 됨&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;newNum에도 2가 할당되고 싶으면&lt;/p&gt;
&lt;p&gt;&lt;code class=&quot;language-text&quot;&gt;let newNum = ++num;&lt;/code&gt; - ++을 앞에다가 써야 됨&lt;/p&gt;
&lt;h2 id=&quot;4-데이터-타입&quot;&gt;&lt;a href=&quot;#4-%EB%8D%B0%EC%9D%B4%ED%84%B0-%ED%83%80%EC%9E%85&quot; aria-label=&quot;4 데이터 타입 permalink&quot; class=&quot;anchor&quot;&gt;&lt;svg aria-hidden=&quot;true&quot; focusable=&quot;false&quot; height=&quot;16&quot; version=&quot;1.1&quot; viewBox=&quot;0 0 16 16&quot; width=&quot;16&quot;&gt;&lt;path fill-rule=&quot;evenodd&quot; d=&quot;M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z&quot;&gt;&lt;/path&gt;&lt;/svg&gt;&lt;/a&gt;4. 데이터 타입&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Undefined - 정의 되지 않는 변수&lt;/li&gt;
&lt;li&gt;null - 없는 값&lt;/li&gt;
&lt;li&gt;boolean - True/False | 조건문에서 조건에 대한 결과 값으로 많이 쓰이는 타입&lt;/li&gt;
&lt;li&gt;숫자 - number&lt;/li&gt;
&lt;li&gt;문자열 - string으로 ” ” 나 ’ ’ 혹은 &lt;code class=&quot;language-text&quot;&gt;&lt;/code&gt; 둘러 쌓인 값&lt;/li&gt;
&lt;li&gt;객체 - function을 제외한 모든 객체&lt;/li&gt;
&lt;/ul&gt;</content:encoded></item></channel></rss>