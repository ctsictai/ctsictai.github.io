{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/the-birth-of-movable-type/","webpackCompilationHash":"02f0f180c63503534c73","result":{"data":{"markdownRemark":{"id":"1d1fbf4a-abef-5a6d-90ed-97cf03e87d26","html":"<h1 id=\"for문\"><a href=\"#for%EB%AC%B8\" aria-label=\"for문 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>For문</h1>\n<p>원하는 만큼 반복하는 함수(일정한 형식의 많은 데이터를 다루기 위해 유용함)</p>\n<p><code> for(let i =0; i&#x3C;=5; i++)</code></p>\n<ul>\n<li><code>let i=0 </code> 시작조건 - i변수 0부터 시작</li>\n<li><code> i&#x3C;=5 </code> 종료조건 - 5보다 같거나 작을 떄</li>\n<li><code> i++ </code> 증감식 - 1씩 증가</li>\n</ul>\n<blockquote>\n<p>i가 0, 1, 2, 3, 4, 5까지 for문 반복한다</p>\n</blockquote>\n<p><code>for (var i = 2; i &#x3C; 10; i = i + 2)</code></p>\n<ol>\n<li>i는 2부터 시작하여</li>\n<li>10보다 작을때까지</li>\n<li>2씩 증가시키면서 for문을 돌린다.</li>\n<li>i가 2,4,6,8 으로 2씩 증가하며 for문을 총 4번 반복합니다.</li>\n</ol>\n<blockquote>\n<p>보통 배열 요소에 대한 for문 돌릴 땐 length 프로퍼티를 사용해 종료값을 정한다</p>\n</blockquote>\n<blockquote>\n<blockquote>\n<p><code>for (var i = 0; i &#x3C; 배열명.length; i++)</code></p>\n</blockquote>\n</blockquote>\n<p>※ 종료조건에 &#x3C;을 쓰는 이유<br>\n배열의 인덱싱 시작이 0부터 시작하기 때문에 배열의 길이보다 작을 때까지 반복해야 한다.</p>\n<h1 id=\"date-value날짜와-시간\"><a href=\"#date-value%EB%82%A0%EC%A7%9C%EC%99%80-%EC%8B%9C%EA%B0%84\" aria-label=\"date value날짜와 시간 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Date value(날짜와 시간)</h1>\n<ul>\n<li>날짜 객체 호출해서 날짜 시간을 얻는다.<br>\n<code>let rightNow = new Date();</code> - new Date</li>\n<li>반환되는 값이 2019-02-18T00:45:06.562Z – 그대로는 이용안하고 가공한번더 해야 됨<br>\n<code>let year = rightNow.getFullYear();</code> -년도만<br>\n<code>let month = rightNow.getMonth()+1;</code> -월만 (원래 값보다 1개월 작은값이 반환되서 +1함)<br>\n<code>let date = rightNow.getDate();</code> - 일만<br>\n<code>let day = rightNow.getDay();</code> - 요일만(0부터 월요일 ~6은 일요일)- 숫자값으로 뽑아줌<br>\n<code>let currentHour = rightNow.getHours();</code> -시간만<br>\n<code>let currentMin = rightNow.getMinutes();</code> -분만<br>\n<code>Let time = rightNow.getTime();</code> - 밀리초 표현 반환 가능</li>\n<li>\n<p>특정날짜 Date</p>\n<p><code class=\"language-text\">let date1 = new Date(&#39;December 17, 2019 03:24:00&#39;);</code><br>\n<code class=\"language-text\">let date2 = new Date(&#39;2019-12-17T03:24:00&#39;);</code><br>\n<code class=\"language-text\">let date3 = new Date(2019, 5, 1);</code></p>\n</li>\n<li>\n<p>날짜 계산도 가능함 but 차원은 동일하게 (년도 – 년도) (월 – 월) (일 -일) 이렇게</p>\n<p><code>let year = now.getFullYear();</code><br>\n<code> let birthdayYear = birthday.getFullYear();</code><br>\n<code> let age = year - birthdayYear;</code></p>\n</li>\n</ul>\n<h1 id=\"scope\"><a href=\"#scope\" aria-label=\"scope permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Scope</h1>\n<p>변수의 사용 범위를 뜻한다</p>\n<ul>\n<li>block이란 중괄호({}, curly brace)로 감싸진 것을 block – func, if, for 모두 포함 여기 안에서 선언된 변수를 지역(local) 변수라고 하며 해당 함수(block)내에서 만 쓸 수 있다.</li>\n<li>Global(전역) scope<br>\nblock밖인 global scope에서 만든 변수를 global variable(전역변수)라고 합니다.\n코드 어디서든 접근 가능해서 변수값을 확인할 수 있습니다.</li>\n<li>Scope 오염<br>\nGlobal 변수 남용하지 마라 나중에 찾기 힘들어지고 global 변수에 의해 값이 오염이 되어 원하는 결과가 나오지 않게 된다.</li>\n</ul>\n<blockquote>\n<p>타이트한 scope(tightly scoping)의 변수는 코드 품질을 올려줍니다!!</p>\n<blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 코드가 block으로 명확하게 구분되기 때문에 코드 가독성이 올라갑니다.\n- 코드가 한줄한줄 쭉 나열된 것이 아니라 각각의 기능별로 block을 나누면 코드가 이해하기 쉬워집니다.\n- 나중에 코드를 수정할 일이 있을 때, 코드를 오랜만에 보더라도 잘 나뉘어 있어서 유지보수가 쉬워집니다.\n- 프로그램이 끝날때까지 변수가 살아있는 것이 아니라서(block이 끝나면 local 변수의 삶이 끝나서) 메모리 절약도 됩니다.</code></pre></div>\n</blockquote>\n</blockquote>\n<h2 id=\"switch\"><a href=\"#switch\" aria-label=\"switch permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Switch</h2>\n<p>많은 코드 블록영역중 조건(case)에 match 되는 block을 executed 한다</p>\n<ul>\n<li>case ‘scope’: description = ‘변수영역’;</li>\n<li>case ‘block’: description = ’{}로 둘러쌓인 특정한 영역(함수, for문, if문 등)‘;</li>\n<li>case ‘global scope’: description = ‘이 자바스크립트 파일 전체 영역’;</li>\n<li>case ‘global variable’: description = ‘이 자바스크립트 파일 전체 영역에 쓰이는 변수’;</li>\n<li>case ‘block scope’: description = ‘특정한 영역 내에서만 쓰이는 변수’;</li>\n<li>case ‘local variable’: description = ‘지역(특정영역) 내에서만 쓰이는 함수’;</li>\n<li>case ‘global namespace’: description = ‘이 자바스크립트 파일 전체에 선언된 변수 이름’;</li>\n<li>case ‘scope pollution’: description = ‘내가 의도하지 않는 글로벌 변수가 리턴되는 것’;</li>\n<li>default : description = ‘초기값’</li>\n</ul>","fields":{"slug":"/posts/the-birth-of-movable-type/","tagSlugs":["/tag/java-script/"]},"frontmatter":{"date":"2019-10-11T23:55:03.284Z","description":"배열 / class / 주석","tags":["JavaScript"],"title":"09.30~10.04 한 주 정리 part.5","socialImage":"/media/gutenberg.jpg"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/the-birth-of-movable-type/"}}}