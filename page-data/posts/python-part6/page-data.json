{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/python-part6/","webpackCompilationHash":"269ecfb88debffb04eea","result":{"data":{"markdownRemark":{"id":"8e9aa8f9-7263-5fe0-ba00-75b4056501d5","html":"<h1 id=\"클래스\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4\" aria-label=\"클래스 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스</h1>\n<h2 id=\"개요\"><a href=\"#%EA%B0%9C%EC%9A%94\" aria-label=\"개요 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개요</h2>\n<ul>\n<li>클래스는 객체의 구조와 행동을 정의합니다.</li>\n<li>객체의 클래스는 초기화를 통해 제어합니다.</li>\n<li>클래스는 복잡한 문제를 다루기 쉽도록 만듭니다.</li>\n</ul>\n<h3 id=\"객체와-인스턴스-차이\"><a href=\"#%EA%B0%9D%EC%B2%B4%EC%99%80-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%B0%A8%EC%9D%B4\" aria-label=\"객체와 인스턴스 차이 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>객체와 인스턴스 차이</h3>\n<p>클래스로 만든 객체를 인스턴스라고도 한다.<br>\n인스턴스라는 말은 특정 객체가 어떤 클래스의 객체인지를 관계 위주로 설명할 때 사용한다.</p>\n<h2 id=\"클래스-변수속성\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EB%B3%80%EC%88%98%EC%86%8D%EC%84%B1\" aria-label=\"클래스 변수속성 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 변수(속성)</h2>\n<p>클래스 정의에서 메서드 밖에 존재하는 변수를 클래스 변수(class variable)라 하는데, 이는 해당 <strong>클래스를 사용하는 모두에게 공용</strong>으로 사용되는 변수이다. 클래스 변수는 클래스 내외부에서 <strong>“클래스명.변수명”</strong> 으로 엑세스 할 수 있다.</p>\n<h2 id=\"인스턴스-변수속성\"><a href=\"#%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EB%B3%80%EC%88%98%EC%86%8D%EC%84%B1\" aria-label=\"인스턴스 변수속성 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>인스턴스 변수(속성)</h2>\n<p>하나의 클래스로부터 여러 객체 인스턴스를 생성해서 사용할 수 있다. 클래스 변수가 하나의 클래스에 하나만 존재하는 반면, 인스턴스 변수는 각 객체 인스턴스마다 별도로 존재한다.</p>\n<p>클래스 정의에서 메서드 안에서 사용되면서 <strong>“self.변수명”</strong>처럼 사용되는 변수를 인스턴스 변수(instance variable)라 하는데, 이는 각 객체별로 서로 다른 값을 갖는 변수이다.</p>\n<p>인스턴스 변수는 클래스 내부에서는 self.width 과 같이 “self.” 을 사용하여 엑세스하고, 클래스 밖에서는 <strong>“객체변수.인스턴스변수”</strong>와 같이 엑세스 한다.</p>\n<blockquote>\n<p>만약 특정 변수명이나 메서드를 private으로 만들어야 한다면 두개의 밑줄(__)을 이름 앞에 붙이면 된다.</p>\n</blockquote>\n<h3 id=\"파이썬의-attribute-찾는-과정\"><a href=\"#%ED%8C%8C%EC%9D%B4%EC%8D%AC%EC%9D%98-attribute-%EC%B0%BE%EB%8A%94-%EA%B3%BC%EC%A0%95\" aria-label=\"파이썬의 attribute 찾는 과정 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>파이썬의 attribute 찾는 과정</h3>\n<ol>\n<li>파이썬에서 한 객체의 attribute를 읽을 경우에는 먼저 그 객체에서 attribute를 찾아보고,</li>\n<li>없으면 그 객체의 소속 클래스에서 찾고,</li>\n<li>다시 없으며 상위 Base 클래스에서 찾고,</li>\n<li>\n<p>그래도 없으면 에러를 발생시킨다.</p>\n<ul>\n<li><strong>클래스 변수를 엑세스할 때는 클래스명을 사용하는 것이 좋다.</strong></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"메서드method\"><a href=\"#%EB%A9%94%EC%84%9C%EB%93%9Cmethod\" aria-label=\"메서드method permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메서드(Method)</h2>\n<p>클래스 내에 생성된 함수들을 말한다.</p>\n<p>Class Col:</p>\n<p> def col_mtd(*kwargs):\n수행할 문장 …</p>\n<p>a = Col()<br>\na.setdata(4,2) 인스턴스를 실행하면</p>\n<p><img src=\"https://wikidocs.net/images/page/12392/setdata.png\" alt=\"메서드와 매개변수\"></p>\n<p>인스턴스 메서드(instance method), 클래스 메서드(class method), 정적 메서드(static method)가 있다.</p>\n<p>가장 흔히 쓰이는 인스턴스 메서드는 인스턴스 변수에 엑세스할 수 있도록 메서드의 첫번째 파라미터에 항상 객체 자신을 의미하는 “self”라는 파라미터를 갖는다.</p>\n<p>인스턴스 메서드는 여러 파라미터를 가질 수 있지만, 첫번째 파라미터는 항상 self 를 갖는다.</p>\n<h3 id=\"initializer-초기자\"><a href=\"#initializer-%EC%B4%88%EA%B8%B0%EC%9E%90\" aria-label=\"initializer 초기자 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Initializer (초기자)</h3>\n<p>클래스로부터 새 객체를 생성할 때마다 실행되는 특별한 메서드로 <strong>init</strong>() 이라는 메서드가 있는데, 이를 흔히 클래스 Initializer 라 부른다</p>\n<p>Initializer는 클래스로부터 객체를 만들 때, 인스턴스 변수를 초기화하거나 객체의 초기상태를 만들기 위한 문장들을 실행하는 곳이다</p>\n<p>입력 파라미터들을 각각 <em>self.param1</em>와 <em>self.param2</em>라는 인스턴스변수에 할당하여 객체 내에서 계속 사용할 수 있도록 준비한다.</p>\n<p>self는 어떠한 실체를 가르키는 단어입니다.</p>\n<p>ex) Car class에서 “self” 는 Car class의 객체인 hyundai나 bmw를 가르키는 것이다.</p>\n<p>self는 class의 실체(instance)인 객체(object)를 가르킵니다</p>\n<blockquote>\n<p>그리고 클래스를 실체화 할때 파이썬이 해당 객체(self)를 자동으로 <strong>init</strong> 함수에 넘겨줍니다.</p>\n</blockquote>\n<ul>\n<li><strong>init</strong> 메소드는 클래스가 실체화 될때 자동으로 호출이 된다.</li>\n<li><strong>init</strong> 메소드의 self 파라미터는 클래스가 실체화된 객체를 넘겨주어야 하며, 파이썬이 자동으로 넘겨준다.</li>\n<li><strong>init</strong> 메소드의 self 파라미터는 항상 정의되어야 있어야 하며 맨 처음 파라미터로 정의 되어야 한다 (그래야 파이썬이 알아서 넘겨줄 수 있으므로)</li>\n</ul>\n<blockquote>\n<p>☞ Class Method - @classmethod</p>\n</blockquote>\n<p>클래스에서 <strong>init</strong> 말고도 다른 메소드를 원하는 대로 추가할 수 있습니다.</p>\n<p>메서드 안에서 클래스 인스턴스 만들 수도 있습니다.\nMethod와 attribute(속성)의 차이는 명사와 동사의 차이라고 생각하시면 됩니다.</p>\n<p>속성은 해당 객체의 이름 등의 정해진 성질인 반면에 메소드는 move, eat 등 객체가 행할 수 있는 어떠한 action같은 느낌이라고 생각할 수 있습니다.</p>\n<blockquote>\n<p>☞ static Method - @staticmethod</p>\n</blockquote>\n<p>정적메소드라 함은 클래스에서 직접 접근할 수 있는 메소드입니다.</p>\n<p>staticmethod는 특별히 추가되는 인자가 없습니다 (self)\n부모클래스의 클래스속성 값을 가져오고 class instance 속성은 가져오지 않습니다.</p>\n<p>그래서 보통 정적 메서드는 인스턴스 속성, 인스턴스 메서드가 필요 없을 때 사용합니다.</p>\n<p>정적 메서드는 인스턴스의 상태를 변화시키지 않는 메서드를 만들 때 사용합니다.</p>\n<h2 id=\"상속이란\"><a href=\"#%EC%83%81%EC%86%8D%EC%9D%B4%EB%9E%80\" aria-label=\"상속이란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상속이란?</h2>\n<p>클래스에서 상속이란, 물려주는 클래스(Parent Class, Super class)의 내용(속성과 메소드)을 물려받는 클래스(Child class, sub class)가 가지게 되는 것입니다.</p>\n<h3 id=\"메서드-오버라이딩\"><a href=\"#%EB%A9%94%EC%84%9C%EB%93%9C-%EC%98%A4%EB%B2%84%EB%9D%BC%EC%9D%B4%EB%94%A9\" aria-label=\"메서드 오버라이딩 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>메서드 오버라이딩</h3>\n<ol>\n<li>일반적인 메소드 오버라이딩\n메소드 오버라이딩은 부모 클래스의 메소드를 자식 클래스에서 재정의 하는 것입니다.</li>\n<li>부모 메소드 호출하기\n부모클래스의 메소드도 수행하고, 자식클래스의 메소드의 내용도 함께 출력하기를 원할 수 있습니다.<br>\n그럴때는 super() 라는 키워드를 사용하면 자식클래스 내에서 코드에서도 부모클래스를 호출할 수 있습니다.</li>\n<li>다중상속\n파이썬은 C++과 같이 다중상속이 가능합니다. 두 개 이상의 부모 클래스로부터 상속이 가능하다는 것.</li>\n<li>. mro() 메소드<br>\nmro() - 클래스를 작성하면 상속 관계를 확인할 수 있는 메소드</li>\n</ol>\n<blockquote>\n<p>&#x3C;객체>.&#x3C;메소드> - 이를 dot notation 이라고 합니다.</p>\n</blockquote>\n<h3 id=\"클래스-상속-사용하기\"><a href=\"#%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%83%81%EC%86%8D-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"클래스 상속 사용하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클래스 상속 사용하기</h3>\n<p>여기서 기능을 물려주는 클래스를 기반 클래스(base class), 상속을 받아 새롭게 만드는 클래스를 파생 클래스(derived class)라고 합니다.</p>\n<p>보통 기반 클래스는 부모 클래스(parent class), 슈퍼 클래스(superclass)라고 부르고, 파생 클래스는 자식 클래스(child class), 서브 클래스(subclass)라고도 부릅니다.</p>\n<p><img src=\"https://dojang.io/pluginfile.php/13905/mod_page/content/2/036001.png\" alt=\"기반-파생 클래스\"></p>\n<p>클래스 상속은 다음과 같이 클래스를 만들 때 ( )(괄호)를 붙이고 안에 기반 클래스 이름을 넣습니다.</p>\n<p>class 기반클래스이름:  </p>\n<p> 실행할 코드</p>\n<p>class 파생클래스이름(기반클래스이름):</p>\n<p> 실행할 코드</p>\n<p>ex) 기반 클래스 - 파생클래스 예제</p>\n<p>class Person:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def greeting(self):\n    print(&#39;안녕하세요.&#39;)</code></pre></div>\n<p>class Student(Person):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def study(self):\n    print(&#39;공부하기&#39;)</code></pre></div>\n<ul>\n<li>james = Student()</li>\n<li>james.greeting() # 안녕하세요.: 기반 클래스 Person의 메서드 호출</li>\n<li>james.study() # 공부하기: 파생 클래스 Student에 추가한 study 메서드</li>\n</ul>\n<p>Student 클래스를 만들 때 class Student(Person):과 같이 ( )(괄호) 안에 기반 클래스인 Person 클래스를 넣었습니다. 이렇게 하면 Person 클래스의 기능을 물려받은 Student 클래스가 됩니다.</p>\n<p>Student 클래스에는 greeting 메서드가 없지만 Person 클래스를 상속받았으므로 greeting 메서드를 호출할 수 있습니다.</p>\n<p><img src=\"https://dojang.io/pluginfile.php/13905/mod_page/content/2/036003.png\" alt=\"클래스상속\"></p>\n<h3 id=\"상속-관계-확인하기\"><a href=\"#%EC%83%81%EC%86%8D-%EA%B4%80%EA%B3%84-%ED%99%95%EC%9D%B8%ED%95%98%EA%B8%B0\" aria-label=\"상속 관계 확인하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>상속 관계 확인하기</h3>\n<blockquote>\n<p>issubclass(파생클래스, 기반클래스)</p>\n</blockquote>\n<p>기반 클래스의 파생 클래스가 맞으면 True, 아니면 False를 반환합니다.</p>\n<h3 id=\"기반-클래스의-속성-사용하기\"><a href=\"#%EA%B8%B0%EB%B0%98-%ED%81%B4%EB%9E%98%EC%8A%A4%EC%9D%98-%EC%86%8D%EC%84%B1-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"기반 클래스의 속성 사용하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기반 클래스의 속성 사용하기</h3>\n<p>기반 클래스에 들어있는 인스턴스 속성을 사용해보겠습니다.</p>\n<p>다음과 같이 Person 클래스에 hello 속성이 있고, Person 클래스를 상속받아 Student 클래스를 만듭니다. 그다음에 Student로 인스턴스를 만들고 hello 속성에 접근해봅니다.</p>\n<p>class Person:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def __init__(self):\n    print(&#39;Person __init__&#39;)\n    self.hello = &#39;안녕하세요.&#39;</code></pre></div>\n<p>class Student(Person):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def __init__(self):\n    print(&#39;Student __init__&#39;)\n    self.school = &#39;파이썬 코딩 도장&#39;</code></pre></div>\n<ul>\n<li>james = Student()</li>\n<li>print(james.school)</li>\n<li>print(james.hello) # 기반 클래스의 속성을 출력하려고 하면 에러가 발생함</li>\n</ul>\n<h3 id=\"super로-기반-클래스-초기화-하기\"><a href=\"#super%EB%A1%9C-%EA%B8%B0%EB%B0%98-%ED%81%B4%EB%9E%98%EC%8A%A4-%EC%B4%88%EA%B8%B0%ED%99%94-%ED%95%98%EA%B8%B0\" aria-label=\"super로 기반 클래스 초기화 하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>super()로 기반 클래스 초기화 하기</h3>\n<p>이때는 super()를 사용해서 기반 클래스의 <strong>init</strong> 메서드를 호출해줍니다. 다음과 같이 super() 뒤에 .(점)을 붙여서 메서드를 호출하는 방식입니다.</p>\n<blockquote>\n<p>super().메서드()</p>\n</blockquote>\n<p>class Person:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def __init__(self):\n    print(&#39;Person __init__&#39;)\n    self.hello = &#39;안녕하세요.&#39;</code></pre></div>\n<p>class Student(Person):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def __init__(self):\n    print(&#39;Student __init__&#39;)\n    super().__init__()\n    # super()로 기반 클래스의 __init__ 메서드 호출\n    self.school = &#39;파이썬 코딩 도장&#39;</code></pre></div>\n<ul>\n<li>james = Student()</li>\n<li>print(james.school)</li>\n<li>print(james.hello)</li>\n</ul>\n<p>실행을 해보면 기반 클래스 Person의 속성인 hello가 잘 출력됩니다.</p>\n<p>super().<strong>init</strong>()와 같이 기반 클래스 Person의 <strong>init</strong> 메서드를 호출해주면 기반 클래스가 초기화되어서 속성이 만들어집니다. 실행 결과를 보면 ‘Student <strong>init</strong>‘과 ‘Person <strong>init</strong>‘이 모두 출력되었습니다.</p>\n<p>기반 클래스 Person의 속성 hello를 찾는 과정을 그림으로 나타내면 다음과 같은 모양이 됩니다.</p>\n<p><img src=\"https://dojang.io/pluginfile.php/13907/mod_page/content/3/036004.png\" alt=\"기반클래스 속성찾기 로직\"></p>\n<h3 id=\"기반-클래스를-초기화하지-않아도-되는-경우\"><a href=\"#%EA%B8%B0%EB%B0%98-%ED%81%B4%EB%9E%98%EC%8A%A4%EB%A5%BC-%EC%B4%88%EA%B8%B0%ED%99%94%ED%95%98%EC%A7%80-%EC%95%8A%EC%95%84%EB%8F%84-%EB%90%98%EB%8A%94-%EA%B2%BD%EC%9A%B0\" aria-label=\"기반 클래스를 초기화하지 않아도 되는 경우 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기반 클래스를 초기화하지 않아도 되는 경우</h3>\n<p>만약 파생 클래스에서 <strong>init</strong> 메서드를 생략한다면 기반 클래스의 <strong>init</strong>이 자동으로 호출되므로 super()는 사용하지 않아도 됩니다.</p>","fields":{"slug":"/posts/python-part6/","tagSlugs":["/tag/python/"]},"frontmatter":{"date":"2019-10-22T23:30:03.284Z","description":"Class","tags":["Python/"],"title":"Python Apprenticeship Study Part.6","socialImage":"/media/gutenberg.jpg"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/python-part6/"}}}