{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/datastructure/","result":{"data":{"markdownRemark":{"id":"5767ba38-e3d4-51ff-866e-ccc9e58e7f51","html":"<h1 id=\"자료구조와-알고리즘\"><a href=\"#%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0%EC%99%80-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" aria-label=\"자료구조와 알고리즘 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자료구조와 알고리즘</h1>\n<p>데이터를 저장하는 스트럭쳐\n자료구조를 잘 선택해야 코드의 복잡성을 줄일 수 있다.</p>\n<h1 id=\"배열\"><a href=\"#%EB%B0%B0%EC%97%B4\" aria-label=\"배열 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>배열</h1>\n<ul>\n<li>순서가 있는 데이터를 저장할 때 유리</li>\n<li>물리적 주소가 순서대로 저장되는 구조</li>\n<li>메모리를 할당하기 위해 어느정도 빈 물리적 공간을 확보해야 한다.</li>\n<li>시간복잡도 O(N) - 배열의 길이 만큼 찾는 시간이 늘어나는 구조이다.</li>\n</ul>\n<p><img src=\"https://t1.daumcdn.net/cfile/tistory/992BD84F5B230A4425\"></p>\n<h3 id=\"자료-액세스-시-주소를-얻는-방식-\"><a href=\"#%EC%9E%90%EB%A3%8C-%EC%95%A1%EC%84%B8%EC%8A%A4-%EC%8B%9C-%EC%A3%BC%EC%86%8C%EB%A5%BC-%EC%96%BB%EB%8A%94-%EB%B0%A9%EC%8B%9D-\" aria-label=\"자료 액세스 시 주소를 얻는 방식  permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>자료 액세스 시 주소를 얻는 방식 :</h3>\n<p>배열의 시작주소 + 자료형의크기×인덱스값의 주소를 액세스</p>\n<p>ex)</p>\n<ul>\n<li>sample[3]의 값을 액세스 하는 경우</li>\n<li>배열의시작주소(1000) + int의크기(4) × 인덱스값(3) = 1012</li>\n<li>1012의 주소에 있는 값 액세스 : 44</li>\n</ul>\n<h2 id=\"장점\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h2>\n<ol>\n<li>인덱스를 통해 모든 데이터에 직접 액세스하기 때문에 액세스 속도가 빠르다.</li>\n<li>포인터 등 부가적인 정보가 없어 기록 밀도가 1이다.(메타데이터가 없다. - ex) key)</li>\n<li>가장 간단하며 사용하기 쉽다.</li>\n</ol>\n<h2 id=\"단점\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h2>\n<ol>\n<li>삽입, 삭제가 어렵다(삽입, 삭제가 어렵기 때문에 삽입삭제가 없는 경우에만 사용한다.)</li>\n<li>중간에 데이터를 삽입하거나 삭제할 경우\n뒤의 데이터를 모두 한칸씩 당겨와야 하기 때문에 부하가 많이 걸린다.\n(만약 삭제하지 않고 그냥 둔다면 인덱스를 이용한 주소값 계산을 할 수 없기 때문에 자료를 연속된 공간에 두기 위해 이동이 필요함)</li>\n<li>\n<p>예를들어 위의 예제에서 sample[2]를 삭제하면 그 뒤의 값들을 한칸씩 당겨와야한다.</p>\n<p><img src=\"https://t1.daumcdn.net/cfile/tistory/997BDF375B230ED928\">\n<img src=\"https://t1.daumcdn.net/cfile/tistory/99B8E5375B230EE732\"></p>\n</li>\n<li>메모리에 종속적이다\n연속된 메모리에 저장 되므로 종속적일 수 밖에 없다.</li>\n<li>메모리 사이즈가 부족해진 경우에 큰 공수가 필요하다</li>\n</ol>\n<blockquote>\n<p>re-sizing기법 사용</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- 지금 있는 메모리를 copy한 후 더 큰 빈 메모리 공간을 확보하여 순서대로 자료를 저장하는 방법\n- 공수가 매우 많이 필요한 작업이다.\n- 이 것 때문에 배열구조를 만들기전에 미리 빈 메모리 공간을 예측하여 확보하는 것이 좋다</code></pre></div>\n<h1 id=\"튜플python\"><a href=\"#%ED%8A%9C%ED%94%8Cpython\" aria-label=\"튜플python permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>튜플(python)</h1>\n<ul>\n<li>배열에서와는 다르게 변경이 불가능한 자료구조이다.</li>\n<li>그래서 변경이 없는 좌표 데이터를 나타내기 좋은 자료구조</li>\n<li>배열과 같이 인덱싱 사용 가능하다.</li>\n<li>튜플의 시간복잡도는 배열과 같게 O(N)이다.</li>\n<li>튜플이 없다면 클래스로 선언해서 클래스 호출로 가능(javascript)</li>\n<li>2개 ~ 5개 값을 리턴할 때 사용하기 적절하다.(너무 많으면 오히려 좋지 않다)</li>\n<li>named_tuple - 인덱스에 key값을 줄 수 있음</li>\n<li>test code에 튜플 사용할 수 있으면 좋다</li>\n</ul>\n<h1 id=\"set\"><a href=\"#set\" aria-label=\"set permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>set</h1>\n<ul>\n<li>순서가 없다</li>\n<li>중복을 허용하지 않는다</li>\n<li>집합 자료를 표현하는데 적합하다</li>\n<li>시간복잡도 O (log N)</li>\n<li>set 중복을 어떤 로직으로 없앨까???</li>\n<li>값을 치환한다 왜 할까??</li>\n</ul>\n<blockquote>\n<p>clss (1,1) == clss(1,1) 는 맞을까?</p>\n</blockquote>\n<ul>\n<li>클래스는 부모 객체 object가 있어서 아무것도 정해놓지 않으면 부모 클래스인 object를 상속받아서 default 값으로 주소값으로 비교한다.</li>\n<li>그래서 clss (1,1) == clss(1,1) 는 다르다 - 주소값이 다르기 때문에 그래서 문맥상 같다라는 것을 표현하기 위해 클래스의 함수를 정의하여 로직상으로 같게 한다.</li>\n<li>set에서는 특정 값에 대해서 hash 값으로 변환하여 hash값에 맞는 메모리 주소에 할당하기 때문에 특정 값이 중복으로 들어온다면 똑같은 hash 값을 가져서 새로운 값으로 값이 치환된다.</li>\n</ul>","fields":{"slug":"/posts/datastructure/","tagSlugs":["/tag/python-data-structure/"]},"frontmatter":{"date":"2019-11-17T21:30:03.284Z","description":"Data Structure & Algorithm","tags":["Python/data structure"],"title":"Data Structure & Algorithm","socialImage":"/media/gutenberg.jpg"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/datastructure/"}}}