{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/python-part10/","webpackCompilationHash":"80c61addd1079871cf50","result":{"data":{"markdownRemark":{"id":"0cddac8c-c47d-50a8-9b19-62a2aded03f9","html":"<h1 id=\"list-comprehension\"><a href=\"#list-comprehension\" aria-label=\"list comprehension permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>List Comprehension</h1>\n<h2 id=\"기본-형식\"><a href=\"#%EA%B8%B0%EB%B3%B8-%ED%98%95%EC%8B%9D\" aria-label=\"기본 형식 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 형식</h2>\n<blockquote>\n<p><strong>new<em>list = [expression(i) for i in old</em>list if filter(i)]</strong></p>\n</blockquote>\n<ul>\n<li>exp - 표현식(만들려는 형태) 여기서 선언되는 변수가 for문 / if문에서 사용되야 의미가 있다.</li>\n<li>for문 - 표현식에 있는 변수명을 반복문을 돌림</li>\n<li>if문 - 안들어가도 됨 - 다만 표현식 반복문에 조건이 필요한경우</li>\n</ul>\n<p>소위 브라켓이라고 하는 빈 리스트값 매겨 놓고 리스트안에서 포문 즉 반복문이 돌아간다. 그런데 newlist를 oldlist를 근거로 만드려는데 똑같이 만들려면 의미가 없고 여기에 filtering을 하여 newlist를 만든다.</p>\n<p>이 때 filter에 따라 수많은 newlist가 생성 된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[x.lower() for x in [&quot;A&quot;,&quot;B&quot;,&quot;C&quot;]]\n[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]</code></pre></div>\n<p>코드 해석</p>\n<ul>\n<li>x.lower() - x 라는 영문자열을 소문자로 바꿔라</li>\n<li>for x in [‘A’, ‘B’, ‘C’] - x를 [] list 요소 숫자만큼 돌려라</li>\n<li>즉, 합치면 리스트 [‘A’, ‘B’, ‘C’]내의 요소x를 lower 소문자로 모두 바꿔라</li>\n</ul>\n<p>=================================================</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">string = &quot;Hello 12345 World&quot;\nnumbers = [x for x in string if x.isdigit()]\nprint(numbers)\n [&#39;1&#39;, &#39;2&#39;, &#39;3&#39;, &#39;4&#39;, &#39;5&#39;]</code></pre></div>\n<p>코드해석</p>\n<ul>\n<li>x는 표현식으로 의미는 없고</li>\n<li>for x in string - 여기서의 x가 표현식의 x와 같아야 한다. 안그러면 표현식 x는 undefined 된 에러변수가 된다.</li>\n<li>if x.isdigit() - 여기서 조건문이 들어가 isdigit 숫자만 출력한다.</li>\n</ul>\n<h2 id=\"list-comprehension-이걸-언제-쓸까\"><a href=\"#list-comprehension-%EC%9D%B4%EA%B1%B8-%EC%96%B8%EC%A0%9C-%EC%93%B8%EA%B9%8C\" aria-label=\"list comprehension 이걸 언제 쓸까 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>List comprehension 이걸 언제 쓸까??</h2>\n<ul>\n<li>다중 list나 다중 dict 등등 - 다중 배열(시퀀스 자료형) 구조일 경우 요소 접근에 대한 고민이 필요할 때(matrix 구조에 적용 가능)</li>\n<li>nested for문을 쓸 경우에 - 그게 보통 위의 경우가 많다.</li>\n</ul>\n<h3 id=\"ex1-3중-배열-요소-값-접근\"><a href=\"#ex1-3%EC%A4%91-%EB%B0%B0%EC%97%B4-%EC%9A%94%EC%86%8C-%EA%B0%92-%EC%A0%91%EA%B7%BC\" aria-label=\"ex1 3중 배열 요소 값 접근 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>EX1) 3중 배열 요소 값 접근</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">matrix = [[[1,2,3], [4,5,6], [7,8,9]], [[&#39;q&#39;,&#39;w&#39;,&#39;e&#39;], [&#39;r&#39;, &#39;t&#39;, &#39;y&#39;]]]\n\n# 괄호 1번 벗기기\ninner_matrix = [row for row in matrix]\nprint(&quot;inner_matrix :&quot;, inner_matrix)\n\n# 괄호 2번 벗기기\ninner_matrix_list = [row_element for row in matrix for row_element in row]\nprint(&quot;inner_matrix_list : &quot;, inner_matrix_list)\n\n# 괄호 3번 벗기기\ninner_matrix_list_element = [element for inner_matrix in matrix\n                                   for inner_matrix_list in inner_matrix\n                                   for element in inner_matrix_list]\n\nprint(&quot;inner_matrix_list_element : &quot;, inner_matrix_list_element)</code></pre></div>\n<p>matrix = [ [ [1,2,3], [4,5,6], [7,8,9]], [ [‘q’,‘w’,‘e’], [‘r’, ‘t’, ‘y’]]]<br>\nmatrix 내에 또 다른 매트릭스(inner<em>matrix)가 2개 있는 걸로 이해할 수 있다.<br>\n즉, inner</em>matrix<em>1 = [[1,2,3], [4,5,6], [7,8,9]]<br>\ninner</em>matrix_2 = [[‘q’,‘w’,‘e’], [‘r’,‘t’,‘y’]] 가 있는 형태이다.</p>\n<p>inner<em>matrix</em>1과 inner<em>matrix</em>2의 괄호를 또 한번 벗기면<br>\ninner<em>matrix</em>list<em>1 = [1,2,3], [4,5,6], [7,8,9]<br>\ninner</em>matrix<em>list</em>2 = [‘q’,‘w’,‘e’], [‘r’, ‘t’, ‘y’] 를 만나게 된다.</p>\n<p>inner<em>matrix</em>list<em>1과 inner</em>matrix<em>list</em>2의 괄호를 또 한번 벗기게 되면 드디어 리스트를 구성하는 원소(element)를 만날 수 있다.<br>\ninner<em>matrix</em>list<em>element</em>1 = 1,2,3,4,5,6,7,8,9<br>\ninner<em>matrix</em>list<em>element</em>2 = ‘q’, ‘w’, ‘e’, ‘r’, ‘t’, ‘y’</p>","fields":{"slug":"/posts/python-part10/","tagSlugs":["/tag/python-list-comprehension/"]},"frontmatter":{"date":"2019-11-02T23:50:03.284Z","description":"List Comprehension","tags":["Python/List Comprehension"],"title":"Python Apprenticeship Study Part.9","socialImage":"/media/gutenberg.jpg"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/python-part10/"}}}