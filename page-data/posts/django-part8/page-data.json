{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/django-part8/","result":{"data":{"markdownRemark":{"id":"4fb38878-3e78-5123-9266-2aa05efc1f23","html":"<h1 id=\"queryset이란\"><a href=\"#queryset%EC%9D%B4%EB%9E%80\" aria-label=\"queryset이란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>QuerySet이란?</h1>\n<ul>\n<li>SQL을 생성해주는 인터페이스이다.</li>\n<li>Django ORM에 의해 queryset을 통해 별도로 SQL문을 작성할 필요없이 DB로 부터 데이터를 가져오고 추가, 수정, 삭제가 가능하다</li>\n<li>LAZY한 특성을 가지고 있다. 미리 db에 접근해서 값을 불러오는 게 아니라 출력 등과 같이 필요한 순간에 sql로 매핑되어서 db에 접근하는 방식이다.</li>\n<li>queryset으로 반환되는것은 values를 제외하고는 object로 반환된다</li>\n<li>여기서 object란 db의 table의 row라고 보면 된다.</li>\n<li>row란 pk(보통 장고에서 자동부여한다) 1행에 있는 모든 데이터들이 다 반환 된다. 이게 object의 실체 dict type이 아니기 때문에 반환이 필요함</li>\n<li>‘key’(입력한 필드명으로) : value(comment.필드명- 실제 레코드값이 반환됨)</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">for item in items:\n\tcontext = { key1 : value1\n                key2 : value2\n  }</code></pre></div>\n<h1 id=\"crud\"><a href=\"#crud\" aria-label=\"crud permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CRUD</h1>\n<p>Create Read Update Delete의 약자로서 웹 서비스의 기본 기능이다. 가장 중요한 것은 create와 read이며 update는 create의 하위호환 delete는 왠만하면 안하는 것이 정석이다.</p>\n<h1 id=\"read데이터-조회\"><a href=\"#read%EB%8D%B0%EC%9D%B4%ED%84%B0-%EC%A1%B0%ED%9A%8C\" aria-label=\"read데이터 조회 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>READ(데이터 조회)</h1>\n<h2 id=\"modelsobjectsfilter\"><a href=\"#modelsobjectsfilter\" aria-label=\"modelsobjectsfilter permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>models.objects.Filter()</h2>\n<h2 id=\"and-조건\"><a href=\"#and-%EC%A1%B0%EA%B1%B4\" aria-label=\"and 조건 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>And 조건</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">queryset = 모델클래스명.objects.all()\nqueryset = queryset.filter(조건필드1=조건값1, 조건필드2=조건값2)\nqueryset = queryset.filter(조건필드3=조건값3)</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">for model_instance in queryset:\n    print(model_instance)</code></pre></div>\n<ul>\n<li>화면에 출력할 때 DB에 쿼리 (lazy)\n필터는 queryset object가 list 형태로 다수가 나오므로 for문으로 하나씩 하나씩 list의 요소를 print하는 방식이다.</li>\n</ul>\n<blockquote>\n<p>filter And 조건 예시</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">queryset1 = User.objects.filter(phone_number__icontains=&#39;1&#39;, age__endswith=&#39;3&#39;)\nqueryset2 = User.objects.filter(phone_number__icontains=&#39;1&#39;).filter(age__endswith=&#39;3&#39;)</code></pre></div>\n<ul>\n<li>icontains는 대문자 무시하고 포함하는 문자를 뜻한다.\n<img src=\"https://wedizprofile.s3.ap-northeast-2.amazonaws.com/filter.png\" alt=\"filter 조건\"></li>\n</ul>\n<h2 id=\"exclude제외-조건\"><a href=\"#exclude%EC%A0%9C%EC%99%B8-%EC%A1%B0%EA%B1%B4\" aria-label=\"exclude제외 조건 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>exclude(제외 조건)</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">User.objects.all().exclude(name__icontains=&#39;cts&#39;)\nUser.objects.filter(name__icontains=&#39;we&#39;).exclude(phone_number__endswith=&#39;3&#39;)</code></pre></div>\n<h2 id=\"or-조건\"><a href=\"#or-%EC%A1%B0%EA%B1%B4\" aria-label=\"or 조건 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Or 조건</h2>\n<ol>\n<li>쿼리셋 쿼리셋 두개 or 조건으로 할수도 있음</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">모델클래스명.objects.all().filter(first__startwith=”E”) | 모델클래스명.objects.all().filter(last__endwith=”t”)</code></pre></div>\n<ol start=\"2\">\n<li>Complex lookups with Q objects : or 조건을 사용하기 위해서는 Q 객체 import가 필요하다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from django.db.models import Q\n\n모델클래스명.objects.all().filter(Q(조건필드1=조건값1) | Q(조건필드2=조건값2)) # or 조건\n모델클래스명.objects.all().filter(Q(조건필드1=조건값1) &amp; Q(조건필드2=조건값2)) # and 조건</code></pre></div>\n<ul>\n<li>모델 클래스의 오브젝트 갯수확인<br>\n<code>User.objects.all().count()</code></li>\n</ul>\n<blockquote>\n<p>filter를 통한 검색 구현 예시</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">HTTP GET Method\nStat_champions.objects.filter(date__lt=date.today()).exists():\n               stat_list = [{\n                   &quot;id&quot;                : stat[&#39;id&#39;],\n                   &quot;rank&quot;              : stat[&#39;rank&#39;],\n                   &quot;winRate&quot;           : stat[&#39;win_rates&#39;],\n                   &quot;playCount&quot;         : stat[&#39;player_numbers&#39;],\n                   &quot;averageScore&quot;      : stat[&#39;kda&#39;],\n                   &quot;csScore&quot;           : stat[&#39;cs_average&#39;],\n                   &quot;goldScore&quot;         : stat[&#39;gold_average&#39;],\n                   &quot;date&quot;              : stat[&#39;date&#39;],\n                   &quot;championImgSrc&quot;    : [{\n                       &quot;champion_img_src&quot; : champions_id[&#39;champion_img_src&#39;]\n                       } for champions_id in Champions.objects.filter(id=stat[&#39;champions_id&#39;]).values()],\n                   &quot;championName&quot;      : [{\n                       &quot;champion_name&quot; : champions_id[&#39;champion_name&#39;]\n                       } for champions_id in Champions.objects.filter(id=stat[&quot;champions_id&quot;]).values()],\n                   } for stat in Stat_champions.objects.filter(date=Stat_champions.objects.order_by(&#39;date&#39;).last().date).values()\n                   ]</code></pre></div>\n<ul>\n<li>list comprehension을 이용하였다.</li>\n<li>\n<p>date**lt=date.today() - date 필드의 **lt(less than) date.today()(오늘 날짜 datetime object)라는 뜻</p>\n<ul>\n<li>date field의 날짜 &#x3C; 오늘날짜인 경우</li>\n</ul>\n</li>\n<li>id=stat[‘champions_id’] - id가 stat element의 champion_id와 일치하는 경우</li>\n<li>date=Stat<em>champions.objects.order</em>by(‘date’).last().date - 날짜가 stat<em>champions에서 date로 order</em>by 정렬하고 그 중에서 last는 가장 끝 row의 date인 경우를 뜻한다.</li>\n</ul>\n<h2 id=\"ordering\"><a href=\"#ordering\" aria-label=\"ordering permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ordering</h2>\n<p>queryset의 기본 정렬은 모델 클래스 내부의 Meta.ordering 설정을 따른다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class User(models.Model):\n  ....\n  class Meta:\n    ordering = [&#39;-id&#39;]\n    # id 필드 기준 내림차순 정렬, 미지정시 임의 정렬</code></pre></div>\n<p>모델 Meta.ordering 을 무시하고 직접 정렬조건 지정도 가능하다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">queryset = queryset.order_by(&#39;field1&#39;) # 지정 필드 오름차순 요청\nqueryset = queryset.order_by(&#39;-field1&#39;) # 지정 필드 내림차순 요청\nqueryset = queryset.order_by(&#39;field2&#39;, &#39;field3&#39;) # 1차기준, 2차기준</code></pre></div>\n<h2 id=\"slicing범위-조건\"><a href=\"#slicing%EB%B2%94%EC%9C%84-%EC%A1%B0%EA%B1%B4\" aria-label=\"slicing범위 조건 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>slicing(범위 조건)</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">queryset = queryset[:10] # 현재 queryset에서 처음10개만 가져오는 조건을 추가한 queryset\nqueryset = queryset[10:20] # 현재 queryset에서 처음10번째부터 20번째까지를 가져오는 조건을 추가한 queryset\n\n# 리스트 슬라이싱과 거의 유사하나, 역순 슬라이싱은 지원하지 않음\nqueryset = queryset[-10:] # AssertionError 예외 발생\n\n# 이때는 먼저 특정 필드 기준으로 내림차순 정렬을 먼저 수행한 뒤, 슬라이싱\nqueryset = queryset.order_by(&#39;-id&#39;)[:10]</code></pre></div>\n<h2 id=\"get\"><a href=\"#get\" aria-label=\"get permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>GET</h2>\n<p>지정 조건에 맞는 DB data를 fetch하는 개념\n해당 조건에 해당되는 데이터가 1개임을 기대</p>\n<ul>\n<li>0개 : 모델클래스명.DoesNotExist 예외 발생</li>\n<li>1개 : 정상처리</li>\n<li>2개 : 모델클래스명.MultipleObjectsReturned 예외 발생</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">model_instance = queryset.get(id=1)\nmodel_instance = queryset.get(name=&#39;winfor&#39;)</code></pre></div>\n<h3 id=\"first-last\"><a href=\"#first-last\" aria-label=\"first last permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>first(), last()</h3>\n<p>위에서도 살짝 나왔지만</p>\n<ul>\n<li>지정 조건 내에서 첫번째/마지막 데이터 Row를 Fetch한다.</li>\n<li>지정 조건에 맞는 데이터 Row가 없더라도, DoesNotExist 예외가 발생하지 않고, None을 반환하는 것이 특징이다.</li>\n</ul>\n<h1 id=\"create\"><a href=\"#create\" aria-label=\"create permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>CREATE</h1>\n<ul>\n<li>추가시에 필수필드 (필드 정의 시에, blank=True, null=True 혹은 디폴트값이 지정되지 않은 필드) 를 모두 지정해야한다. <strong>IntegrityError</strong> 발생</li>\n<li>python shell에서 해당 모델의 상세 필드옵션을 확인할 수 있다.</li>\n</ul>\n<blockquote>\n<p>create 예시</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class User(models.Model):\n   email            = models.CharField(max_length=255, unique=True)\n   user_name        = models.CharField(max_length=150, null=True, blank=True)\n   password         = models.CharField(max_length=300, null=True, blank=True)\n   social           = models.ForeignKey(SocialPlatform, on_delete=models.CASCADE, null=True, related_name=&#39;user_social&#39;, default=1)\n   social_login_id  = models.CharField(max_length=100, null=True)\n   profile_photo    = models.URLField(max_length=500, null=True, blank=True)\n   company          = models.CharField(max_length=100, null=True, blank=True)\n   company_position = models.CharField(max_length=50, null=True, blank=True)\n   university       = models.CharField(max_length=50, null=True, blank=True)\n   major            = models.CharField(max_length=50, null=True, blank=True)\n   main_address     = models.CharField(max_length=50, null=True, blank=True)\n   sub_address      = models.CharField(max_length=50, null=True, blank=True)\n   introduction     = models.CharField(max_length=1200, null=True, blank=True)\n\n   class Meta:\n       db_table = &#39;users&#39;</code></pre></div>\n<ol>\n<li>Model Instance의 save함수를 통해 저장</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def post(self, request):\n    data = json.loads(request.body)\n    login_user = User.object.get(id=data[&#39;id&#39;])\n\n    login_user.company          = data[&#39;company&#39;]\n    login_user.company_position = data[&#39;company_position&#39;]\n    login_user.university       = data[&#39;university&#39;]\n    login_user.major            = data[&#39;major&#39;]\n    login_user.main_address     = data[&#39;main_address&#39;]\n    login_user.sub_address      = data[&#39;sub_address&#39;]\n    login_user.introduction     = data[&#39;introduction&#39;]\n    login_user.save()</code></pre></div>\n<ol start=\"2\">\n<li>Model manager의 create 함수를 통해 저장</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def post(self, request):\n    data = json.loads(request.body)\n    login_user = User.object.get(id=data[&#39;id&#39;])\n    User.objects.create(\n      login_user.company          = data[&#39;company&#39;],\n      login_user.company_position = data[&#39;company_position&#39;],\n      login_user.university       = data[&#39;university&#39;],\n      login_user.major            = data[&#39;major&#39;],\n      login_user.main_address     = data[&#39;main_address&#39;],\n      login_user.sub_address      = data[&#39;sub_address&#39;],\n      login_user.introduction     = data[&#39;introduction&#39;]\n    )</code></pre></div>\n<h1 id=\"update수정\"><a href=\"#update%EC%88%98%EC%A0%95\" aria-label=\"update수정 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UPDATE(수정)</h1>\n<ol>\n<li>Model Instance 속성을 변경하고, save 함수를 통해 저장(create와 같으므로 위의 코드를 참고한다)</li>\n<li>update 함수에 업데이트할 속성값을 지정하여 일괄 수정</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">update_data = User.object.all()\nupdate_data.update(introduction=&#39;preview&#39;) # 일괄 update</code></pre></div>\n<h1 id=\"delete\"><a href=\"#delete\" aria-label=\"delete permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Delete</h1>\n<blockquote>\n<p>주의 사항 : 데이터를 지우는 것은 언제나 신중해야 한다. 그래서 보통 data를 delete하기 보다는 data를 GET이나 POST를 하지 못하도록 정지 관리를 하게 된다.</p>\n</blockquote>\n<ol>\n<li>Model Instance의 delete 함수를 호출하여 삭제\nuser<em>instance = User.object.get(id=23)\nuser</em>instance.delete()</li>\n<li>QuerySet의 delete 함수를 호출하여, 관련 데이터를 삭제</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">user = User.object.all()\nuser.delete() # 일괄 data delete</code></pre></div>","fields":{"slug":"/posts/django-part8/","tagSlugs":["/tag/python-django/"]},"frontmatter":{"date":"2019-12-03T23:30:03.284Z","description":"django QuerySet CRUD View logic","tags":["Python/Django"],"title":"Django View part2","socialImage":"/media/gutenberg.jpg"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/django-part8/"}}}