{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/algorithm/sorting/1","result":{"data":{"markdownRemark":{"id":"8748d2ea-5713-5578-8f49-bb97b7ebbbc2","html":"<h1 id=\"프로그래머스-정렬-1번-문제\"><a href=\"#%ED%94%84%EB%A1%9C%EA%B7%B8%EB%9E%98%EB%A8%B8%EC%8A%A4-%EC%A0%95%EB%A0%AC-1%EB%B2%88-%EB%AC%B8%EC%A0%9C\" aria-label=\"프로그래머스 정렬 1번 문제 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>프로그래머스 정렬 1번 문제</h1>\n<p>배열 array의 i번째 숫자부터 j번째 숫자까지 자르고 정렬했을 때, k번째에 있는 수를 구하려 합니다.</p>\n<p>예를 들어 array가 [1, 5, 2, 6, 3, 7, 4], i = 2, j = 5, k = 3이라면</p>\n<p>array의 2번째부터 5번째까지 자르면 [5, 2, 6, 3]입니다.<br>\n1에서 나온 배열을 정렬하면 [2, 3, 5, 6]입니다.<br>\n2에서 나온 배열의 3번째 숫자는 5입니다.<br>\n배열 array, [i, j, k]를 원소로 가진 2차원 배열 commands가 매개변수로 주어질 때, commands의 모든 원소에 대해 앞서 설명한 연산을 적용했을 때 나온 결과를 배열에 담아 return 하도록 solution 함수를 작성해주세요.</p>\n<h3 id=\"제한사항\"><a href=\"#%EC%A0%9C%ED%95%9C%EC%82%AC%ED%95%AD\" aria-label=\"제한사항 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>제한사항</h3>\n<p>array의 길이는 1 이상 100 이하입니다.\narray의 각 원소는 1 이상 100 이하입니다.\ncommands의 길이는 1 이상 50 이하입니다.\ncommands의 각 원소는 길이가 3입니다.</p>\n<h3 id=\"입출력-예\"><a href=\"#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88\" aria-label=\"입출력 예 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입출력 예</h3>\n<table>\n<thead>\n<tr>\n<th>array</th>\n<th>commands</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>[1, 5, 2, 6, 3, 7, 4]</td>\n<td>[[2, 5, 3], [4, 4, 1], [1, 7, 3]]</td>\n<td>[5, 6, 3]</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"입출력-예-설명\"><a href=\"#%EC%9E%85%EC%B6%9C%EB%A0%A5-%EC%98%88-%EC%84%A4%EB%AA%85\" aria-label=\"입출력 예 설명 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입출력 예 설명</h3>\n<ol>\n<li>[1, 5, 2, 6, 3, 7, 4]를 2번째부터 5번째까지 자른 후 정렬합니다. [2, 3, 5, 6]의 세 번째 숫자는 5입니다.</li>\n<li>[1, 5, 2, 6, 3, 7, 4]를 4번째부터 4번째까지 자른 후 정렬합니다. [6]의 첫 번째 숫자는 6입니다.</li>\n<li>[1, 5, 2, 6, 3, 7, 4]를 1번째부터 7번째까지 자릅니다. [1, 2, 3, 4, 5, 6, 7]의 세 번째 숫자는 3입니다.</li>\n</ol>\n<h2 id=\"기본-로직\"><a href=\"#%EA%B8%B0%EB%B3%B8-%EB%A1%9C%EC%A7%81\" aria-label=\"기본 로직 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>기본 로직</h2>\n<ol>\n<li>배열 array를 슬라이스([:]) 하고 정렬(sorted)을 한다</li>\n<li>정렬한 list에서 commands에 해당되는 인덱스의 값을 리턴한다.</li>\n<li>리턴한 값을 answer list에 추가한다(append)</li>\n<li>commands의 길이가 최대 50까지 이므로 반복문이 필요하다. (나는 while문으로 접근하였다.)</li>\n</ol>\n<h2 id=\"문제-풀이\"><a href=\"#%EB%AC%B8%EC%A0%9C-%ED%92%80%EC%9D%B4\" aria-label=\"문제 풀이 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제 풀이</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def solution(array, commands):\n    answer = []\n    i = 0\n    while i &lt;= len(commands)-1:\n        ele = sorted(array[commands[i][0]-1:commands[i][1]])\n        m = ele[commands[i][2]-1]\n        answer.append(m)\n        i += 1\n\n    return answer</code></pre></div>\n<ul>\n<li>while문으로 commands의 리스트 길이만큼 돌린다.</li>\n<li>배열 array를 슬라이스 하고 정렬까지 완료</li>\n<li>정렬한 list에서 command에 있는 인덱스값으로 요소값 리턴</li>\n<li>리턴한 요소값을 answer list에 요소 추가</li>\n</ul>\n<p>이렇게 풀었지만 더 간단히 푸는 방법이 있었다????</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def solution(array, commands):\n    return list(map(lambda x: sorted(array[x[0]-1:x[1]])[x[2]-1], commands))</code></pre></div>\n<ul>\n<li>list에서 map과 람다함수를 이용해서 한 줄로 깔끔하게 풀어낸 모습이다.</li>\n<li>람다함수의 x는 map의 인자중 map을 돌릴 리스트에 해당하는 commands가 된다.</li>\n<li>commands라는 list 요소를 lamda 함수 조건대로 변환해준다.</li>\n</ul>","fields":{"slug":"/posts/algorithm/sorting/1","tagSlugs":["/tag/python-sorting/"]},"frontmatter":{"date":"2019-12-31T23:30:03.284Z","description":"Sorting by Python","tags":["Python, Sorting"],"title":"Sorting Algorithm python","socialImage":"/media/gutenberg.jpg"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/algorithm/sorting/1"}}}