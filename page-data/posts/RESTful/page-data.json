{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/RESTful","result":{"data":{"markdownRemark":{"id":"68cecb3e-a737-5430-a6da-da3c4fa348ff","html":"<h1 id=\"rest란\"><a href=\"#rest%EB%9E%80\" aria-label=\"rest란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST란?</h1>\n<p>“Representational State Transfer”의 약자가 REST이다.<br>\n자원을 이름(자원의 표현)으로 구분하여 해당 자원의 상태(정보)를 주고 받는 모든 것을 의미한다. 즉, 자원(resource)의 표현(representation) 에 의한 상태 전달</p>\n<ul>\n<li>자원은 보통 데이터를 말하며</li>\n<li>표현은 자원을 전달하는 방식으로 JSON, XML로 표현된다.</li>\n</ul>\n<h1 id=\"rest의-구체적-의미\"><a href=\"#rest%EC%9D%98-%EA%B5%AC%EC%B2%B4%EC%A0%81-%EC%9D%98%EB%AF%B8\" aria-label=\"rest의 구체적 의미 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST의 구체적 의미</h1>\n<p>HTTP URI(Uniform Resource Identifier)를 통해 자원(Resource)을 명시하고, HTTP Method(POST, GET, PUT, DELETE)를 통해 해당 자원에 대한 CRUD Operation을 적용하는 것을 의미한다.</p>\n<ul>\n<li>웹 사이트의 이미지, 텍스트, DB 내용 등의 모든 자원에 고유한 ID인 HTTP URI를 부여한다.</li>\n</ul>\n<h1 id=\"rest의-장단점\"><a href=\"#rest%EC%9D%98-%EC%9E%A5%EB%8B%A8%EC%A0%90\" aria-label=\"rest의 장단점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST의 장단점</h1>\n<h2 id=\"장점\"><a href=\"#%EC%9E%A5%EC%A0%90\" aria-label=\"장점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>장점</h2>\n<ul>\n<li>HTTP 프로토콜의 인프라를 그대로 사용하므로 REST API 사용을 위한 별도의 인프라를 구출할 필요가 없다.</li>\n<li>HTTP 프로토콜의 표준을 최대한 활용하여 여러 추가적인 장점을 함께 가져갈 수 있게 해준다.</li>\n<li>HTTP 표준 프로토콜에 따르는 모든 플랫폼에서 사용이 가능하다.</li>\n<li>Hypermedia API의 기본을 충실히 지키면서 범용성을 보장한다.</li>\n<li>REST API 메시지가 의도하는 바를 명확하게 나타내므로 의도하는 바를 쉽게 파악할 수 있다.</li>\n<li>여러가지 서비스 디자인에서 생길 수 있는 문제를 최소화한다.</li>\n<li>서버와 클라이언트의 역할을 명확하게 분리한다.</li>\n</ul>\n<h2 id=\"단점\"><a href=\"#%EB%8B%A8%EC%A0%90\" aria-label=\"단점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>단점</h2>\n<ul>\n<li>표준이 존재하지 않는다.</li>\n<li>사용할 수 있는 메소드가 4가지 밖에 없다.</li>\n<li>HTTP Method 형태가 제한적이다.</li>\n<li>브라우저를 통해 테스트할 일이 많은 서비스라면 쉽게 고칠 수 있는 URL보다 Header 값이 왠지 더 어렵게 느껴진다.</li>\n<li>구형 브라우저가 아직 제대로 지원해주지 못하는 부분이 존재한다.</li>\n<li>PUT, DELETE를 사용하지 못하는 점</li>\n<li>pushState를 지원하지 않는 점</li>\n</ul>\n<h1 id=\"rest가-필요한-이유\"><a href=\"#rest%EA%B0%80-%ED%95%84%EC%9A%94%ED%95%9C-%EC%9D%B4%EC%9C%A0\" aria-label=\"rest가 필요한 이유 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST가 필요한 이유</h1>\n<ol>\n<li>애플리케이션 분리 및 통합</li>\n<li>다양한 클라이언트의 등장</li>\n<li>최근의 서버 프로그램은 다양한 브라우저와 안드로이폰, 아이폰과 같은 모바일 디바이스에서도 통신을 할 수 있어야 한다.<br>\n이러한 멀티 플랫폼에 대한 지원을 위해 서비스 자원에 대한 아키텍처를 세우고 이용하는 방법을 모색한 결과, REST에 관심을 가지게 되었다.</li>\n</ol>\n<h1 id=\"rest-구성-요소\"><a href=\"#rest-%EA%B5%AC%EC%84%B1-%EC%9A%94%EC%86%8C\" aria-label=\"rest 구성 요소 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST 구성 요소</h1>\n<ol>\n<li>\n<p>리소스</p>\n<ul>\n<li>모든 자원에 고유한 ID가 존재하고, 이 자원은 Server에 존재한다.</li>\n<li>자원을 구별하는 ID는 ‘/groups/:group_id’와 같은 HTTP URI 다.</li>\n<li>Client는 URI를 이용해서 자원을 지정하고 해당 자원의 상태(정보)에 대한 조작을 Server에 요청한다.</li>\n<li>EX) ”<a href=\"http://api.lib.com/books/1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://api.lib.com/books/1</a>” : 도서관 1번 책 정보</li>\n</ul>\n</li>\n<li>\n<p>메소드</p>\n<ul>\n<li>GET, POST, PUT, DELETE 와 같은 메서드를 제공한다.</li>\n</ul>\n</li>\n<li>\n<p>표현(메세지, representation)</p>\n<ul>\n<li>JSON, XML, TEXT, RSS 등 여러 형태의 Representation으로 나타내어 질 수 있다.</li>\n<li>주로 JSON, XML로 많이 표현한다</li>\n</ul>\n</li>\n</ol>\n<p>구체적으로 REST를 만들어서 예시를 들어보자</p>\n<ul>\n<li>“사용자”는 생성되는 리소스 ,</li>\n<li>“생성한다” 라는 행위는 메서드</li>\n<li>그리고 ‘이름이 Terry인 사용자’는 “메시지”가 된다</li>\n</ul>\n<p>이를 REST 형태로 표현해보면 HTTP POST, ”<a href=\"http://myweb/users/1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://myweb/users/1</a>”</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">{\n   &quot;users&quot;:{\n      &quot;name&quot;:&quot;terry&quot;\n   }\n}</code></pre></div>\n<p>JSON 형태로 표현된 리소스(데이터) user의 이름이다.</p>\n<h1 id=\"rest-특징\"><a href=\"#rest-%ED%8A%B9%EC%A7%95\" aria-label=\"rest 특징 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST 특징</h1>\n<ol>\n<li>\n<p>Server-Client(서버-클라이언트 구조)</p>\n<ul>\n<li>자원이 있는 쪽이 Server, 자원을 요청하는 쪽이 Client가 된다.</li>\n<li>REST Server: API를 제공하고 비즈니스 로직 처리 및 저장을 책임진다.</li>\n<li>Client: 사용자 인증이나 context(세션, 로그인 정보) 등을 직접 관리하고 책임진다.</li>\n<li>서로 간 의존성이 줄어든다.</li>\n</ul>\n</li>\n<li>\n<p>Stateless(무상태)</p>\n<ul>\n<li>HTTP 프로토콜은 Stateless Protocol이므로 REST 역시 무상태성을 갖는다.</li>\n<li>Client의 context를 Server에 저장하지 않는다.\n즉, 세션과 쿠키와 같은 context 정보를 신경쓰지 않아도 되므로 구현이 단순해진다.</li>\n<li>Server는 각각의 요청을 완전히 별개의 것으로 인식하고 처리한다.</li>\n<li>각 API 서버는 Client의 요청만을 단순 처리한다.\n즉, 이전 요청이 다음 요청의 처리에 연관되어서는 안된다.</li>\n<li>물론 이전 요청이 DB를 수정하여 DB에 의해 바뀌는 것은 허용한다.</li>\n<li>Server의 처리 방식에 일관성을 부여하고 부담이 줄어들며, 서비스의 자유도가 높아진다.</li>\n</ul>\n</li>\n<li>\n<p>Cacheable(캐시 처리 가능)</p>\n<ul>\n<li>웹 표준 HTTP 프로토콜을 그대로 사용하므로 웹에서 사용하는 기존의 인프라를 그대로 활용할 수 있다.\n즉, HTTP가 가진 가장 강력한 특징 중 하나인 캐싱 기능을 적용할 수 있다.</li>\n<li>HTTP 프로토콜 표준에서 사용하는 Last-Modified 태그나 E-Tag를 이용하면 캐싱 구현이 가능하다.</li>\n<li>대량의 요청을 효율적으로 처리하기 위해 캐시가 요구된다.</li>\n<li>캐시 사용을 통해 응답시간이 빨라지고 REST Server 트랜잭션이 발생하지 않기 때문에 전체 응답시간, 성능, 서버의 자원 이용률을 향상시킬 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>Layered System(계층화)</p>\n<ul>\n<li>Client는 REST API Server만 호출한다.</li>\n<li>REST Server는 다중 계층으로 구성될 수 있다.</li>\n<li>API Server는 순수 비즈니스 로직을 수행하고 그 앞단에 보안, 로드밸런싱, 암호화, 사용자 인증 등을 추가하여 구조상의 유연성을 줄 수 있다.<br>\n또한 로드밸런싱, 공유 캐시 등을 통해 확장성과 보안성을 향상시킬 수 있다.</li>\n</ul>\n</li>\n<li>PROXY, 게이트웨이 같은 네트워크 기반의 중간 매체를 사용할 수 있다.</li>\n<li>\n<p>Code-On-Demand(optional)</p>\n<ul>\n<li>Server로부터 스크립트를 받아서 Client에서 실행한다.</li>\n</ul>\n</li>\n<li>\n<p>Uniform Interface(인터페이스 일관성)</p>\n<ul>\n<li>URI로 지정한 Resource에 대한 조작을 통일되고 한정적인 인터페이스로 수행한다.</li>\n<li>HTTP 표준 프로토콜에 따르는 모든 플랫폼에서 사용이 가능하다.</li>\n<li>특정 언어나 기술에 종속되지 않는다.</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"restful-api란\"><a href=\"#restful-api%EB%9E%80\" aria-label=\"restful api란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>RESTful API란?</h1>\n<ul>\n<li>REST 기반으로 서비스 API를 구현한 것</li>\n<li>최근 OpenAPI(누구나 사용할 수 있도록 공개된 API: 구글 맵, 공공 데이터 등), 마이크로 서비스(하나의 큰 애플리케이션을 여러 개의 작은 애플리케이션으로 쪼개어 변경과 조합이 가능하도록 만든 아키텍처) 등을 제공하는 업체 대부분은 REST API를 제공한다.</li>\n</ul>\n<h1 id=\"rest-api의-특징\"><a href=\"#rest-api%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"rest api의 특징 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST API의 특징</h1>\n<ul>\n<li>사내 시스템들도 REST 기반으로 시스템을 분산해 확장성과 재사용성을 높여 유지보수 및 운용을 편리하게 할 수 있다.</li>\n<li>REST는 HTTP 표준을 기반으로 구현하므로, HTTP를 지원하는 프로그램 언어로 클라이언트, 서버를 구현할 수 있다.\n즉, REST API를 제작하면 델파이 클라이언트 뿐 아니라, 자바, C#, 웹 등을 이용해 클라이언트를 제작할 수 있다.</li>\n</ul>\n<h1 id=\"rest-api-설계-기본-규칙\"><a href=\"#rest-api-%EC%84%A4%EA%B3%84-%EA%B8%B0%EB%B3%B8-%EA%B7%9C%EC%B9%99\" aria-label=\"rest api 설계 기본 규칙 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>REST API 설계 기본 규칙</h1>\n<ol>\n<li>\n<p>슬래시 구분자(/ )는 계층 관계를 나타내는데 사용한다.</p>\n<ul>\n<li>Ex) <a href=\"http://restapi.example.com/houses/apartments\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://restapi.example.com/houses/apartments</a></li>\n</ul>\n</li>\n<li>\n<p>URI 마지막 문자로 슬래시(/ )를 포함하지 않는다.</p>\n<ul>\n<li>URI에 포함되는 모든 글자는 리소스의 유일한 식별자로 사용되어야 하며 URI가 다르다는 것은 리소스가 다르다는 것이고, 역으로 리소스가 다르면 URI도 달라져야 한다.</li>\n<li>REST API는 분명한 URI를 만들어 통신을 해야 하기 때문에 혼동을 주지 않도록 URI 경로의 마지막에는 슬래시(/)를 사용하지 않는다.</li>\n<li>Ex) <a href=\"http://restapi.example.com/houses/apartments/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://restapi.example.com/houses/apartments/</a> (X)</li>\n</ul>\n</li>\n<li>\n<p>하이픈(- )은 URI 가독성을 높이는데 사용</p>\n<ul>\n<li>불가피하게 긴 URI경로를 사용하게 된다면 하이픈을 사용해 가독성을 높인다.</li>\n</ul>\n</li>\n<li>밑줄(_ )은 URI에 사용하지 않는다.</li>\n<li>URI 경로에는 소문자가 적합하다.</li>\n<li>RFC 3986(URI 문법 형식)은 URI 스키마와 호스트를 제외하고는 대소문자를 구별하도록 규정하기 때문</li>\n<li>\n<p>파일확장자는 URI에 포함하지 않는다.</p>\n<ul>\n<li>REST API에서는 메시지 바디 내용의 포맷을 나타내기 위한 파일 확장자를 URI 안에 포함시키지 않는다.</li>\n<li>Accept header를 사용한다.</li>\n<li>Ex) <a href=\"http://restapi.example.com/members/soccer/345/photo.jpg\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://restapi.example.com/members/soccer/345/photo.jpg</a> (X)</li>\n<li>Ex) GET / members/soccer/345/photo HTTP/1.1 Host: restapi.example.com Accept: image/jpg (O)</li>\n</ul>\n</li>\n<li>\n<p>리소스 간에는 연관 관계가 있는 경우</p>\n<ul>\n<li>/리소스명/리소스 ID/관계가 있는 다른 리소스명</li>\n<li>Ex) GET : /users/{userid}/devices (일반적으로 소유 ‘has’의 관계를 표현할 때)</li>\n</ul>\n</li>\n</ol>\n<p><img src=\"https://gmlwjd9405.github.io/images/network/rest.png\"></p>","fields":{"slug":"/posts/RESTful","tagSlugs":["/tag/rest/"]},"frontmatter":{"date":"2020-01-16T23:30:03.284Z","description":"RESTful API","tags":["REST"],"title":"RESTful API","socialImage":"/media/gutenberg.jpg"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/RESTful"}}}