{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/python/django/decorator","result":{"data":{"markdownRemark":{"id":"2035bd03-860e-5df6-b0be-c45ebf766854","html":"<h1 id=\"데코레이터란\"><a href=\"#%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0%EB%9E%80\" aria-label=\"데코레이터란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데코레이터란?</h1>\n<p>함수(메서드)를 장식하는 개념으로 함수 앞뒤에 기능을 추가해서 손쉽게 함수를 활용할 수 있는 기법이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">class Calc:\n    @staticmethod    # 데코레이터\n    def add(a, b):\n        print(a + b)</code></pre></div>\n<h2 id=\"그러면-왜-쓸까\"><a href=\"#%EA%B7%B8%EB%9F%AC%EB%A9%B4-%EC%99%9C-%EC%93%B8%EA%B9%8C\" aria-label=\"그러면 왜 쓸까 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>그러면 왜 쓸까?</h2>\n<p>함수나 클래스의 메서드는 한 함수에 한 기능을 넣는 것이 좋다.<br>\n(Unit test를 생각한다면 더더욱 함수 하나에 한 기능을 넣어야 한다.)</p>\n<p>그런데 한 함수에 한 기능을 넣기에는 애매한 경우가 있다.<br>\n혹은 한가지 기능에 간단한 로직을 첨가하는 것이 좀 더 좋아지는 경우<br>\n한 기능을 여러 메서드나 함수에서 계속적으로 사용할 때 함수마다 기능을 넣는 것은 계속 같은 코드가 중복되는 문제가 발생한다.</p>\n<p>이럴 때 사용하는 것이 데코레이터이다.</p>\n<h2 id=\"데코레이터-형태-설명\"><a href=\"#%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0-%ED%98%95%ED%83%9C-%EC%84%A4%EB%AA%85\" aria-label=\"데코레이터 형태 설명 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데코레이터 형태 설명</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def trace(func):                             # 호출할 함수를 매개변수로 받음\n    def wrapper():                           # 호출할 함수를 감싸는 함수\n        print(func.__name__, &#39;함수 시작&#39;)    # __name__으로 함수 이름 출력\n        func()                               # 매개변수로 받은 함수를 호출\n        print(func.__name__, &#39;함수 끝&#39;)\n    return wrapper                           # wrapper 함수 반환\n    # 함수안에서 함수를 만들고 반환하는 클로저 개념\n\ndef hello():\n    print(&#39;hello&#39;)</code></pre></div>\n<blockquote>\n<p>결과</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">trace_hello = trace(hello)    # 데코레이터에 호출할 함수를 넣음\ntrace_hello()                 # 반환된 함수를 호출\n\nhello 함수 시작\nhello\nhello 함수 끝</code></pre></div>\n<h2 id=\"데코레이터의-일반-형태\"><a href=\"#%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0%EC%9D%98-%EC%9D%BC%EB%B0%98-%ED%98%95%ED%83%9C\" aria-label=\"데코레이터의 일반 형태 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>데코레이터의 일반 형태</h2>\n<p>데코레이터 앞에 @를 붙여준다. 그리고 데코레이터를 적용할 함수 앞 줄에 꼭 입력한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@데코레이터\ndef 함수이름():\n    코드</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def trace(func):                             # 호출할 함수를 매개변수로 받음\n    def wrapper():                           # 호출할 함수를 감싸는 함수\n        print(func.__name__, &#39;함수 시작&#39;)    # __name__으로 함수 이름 출력\n        func()                               # 매개변수로 받은 함수를 호출\n        print(func.__name__, &#39;함수 끝&#39;)\n    return wrapper                           # wrapper 함수 반환\n    # 함수안에서 함수를 만들고 반환하는 클로저 개념\n\n@trace               # @데코레이터\ndef hello():\n    print(&#39;hello&#39;)</code></pre></div>\n<h3 id=\"-데코레이터-여러개-지정하기\"><a href=\"#-%EB%8D%B0%EC%BD%94%EB%A0%88%EC%9D%B4%ED%84%B0-%EC%97%AC%EB%9F%AC%EA%B0%9C-%EC%A7%80%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\" 데코레이터 여러개 지정하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>※ 데코레이터 여러개 지정하기</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">@데코레이터1\n@데코레이터2\ndef 함수이름():\n    코드</code></pre></div>\n<p>데코레이터가 위에서부터 차례대로 실행된다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def decorator1(func):\n    def wrapper():\n        print(&#39;decorator1&#39;)\n        func()\n    return wrapper\n\ndef decorator2(func):\n    def wrapper():\n        print(&#39;decorator2&#39;)\n        func()\n    return wrapper\n\n# 데코레이터를 여러 개 지정\n@decorator1\n@decorator2\ndef hello():\n    print(&#39;hello&#39;)\n\nhello()\n\ndecorator1\ndecorator2\nhello</code></pre></div>","fields":{"slug":"/posts/python/django/decorator","tagSlugs":["/tag/python-decorator-login-required/"]},"frontmatter":{"date":"2020-01-07T23:30:03.284Z","description":"decorator example","tags":["Python, Decorator, Login_required"],"title":"Decorator","socialImage":"/media/gutenberg.jpg"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/python/django/decorator"}}}