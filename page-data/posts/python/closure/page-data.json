{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/python/closure","result":{"data":{"markdownRemark":{"id":"77fbcc95-d091-58ba-810f-5129ee0611d8","html":"<p>전에 봤던 데코레이터의 개념을 정확히 알기 위해서는 Closure를 알아야한다. Closure의 개념을 알기 위해서는 변수의 범위를 알아야한다.(SCOPE)\n전에 정리를 한번했었는데 간단히 정리하고 넘어가도록 한다.</p>\n<h1 id=\"변수의-사용-범위-알아보기\"><a href=\"#%EB%B3%80%EC%88%98%EC%9D%98-%EC%82%AC%EC%9A%A9-%EB%B2%94%EC%9C%84-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0\" aria-label=\"변수의 사용 범위 알아보기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>변수의 사용 범위 알아보기</h1>\n<p>Closure 개념을 알아보기 전에 변수의 사용범위에 대해 짚고 넘어간다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">x = 10       # 전역변수 func 함수 안에서도 유효하고 func 밖에서도 유효한 변수\ndef func():\n  a = 4      # 지역변수 - func 함수안에서만 유효한 변수\n  print(a)   # --&gt; local scope --&gt; 정상 출력\n\nprint(a)     # 에러남 --&gt; why? : 지역변수 a를 전역범위에서 사용했기 때문에\nprint(x)     # 10 정상 출력</code></pre></div>\n<h2 id=\"함수-안에서-전역변수-변경하기\"><a href=\"#%ED%95%A8%EC%88%98-%EC%95%88%EC%97%90%EC%84%9C-%EC%A0%84%EC%97%AD%EB%B3%80%EC%88%98-%EB%B3%80%EA%B2%BD%ED%95%98%EA%B8%B0\" aria-label=\"함수 안에서 전역변수 변경하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 안에서 전역변수 변경하기</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">x = 10       # 전역변수 func 함수 안에서도 유효하고 func 밖에서도 유효한 변수\ndef func():\n  global x   # 글로벌 변수 선언\n  x = 4      # 함수 내에서 뿐만 아니라 전역에서도 유효한 변수가됨\n\nfunc()       # func 함수 호출 global x --&gt; 4로 변경\nprint(x)\n4            # func에서 선언된 global x 값으로 결과값</code></pre></div>\n<h2 id=\"함수-안의-함수에서-지역변수-변경\"><a href=\"#%ED%95%A8%EC%88%98-%EC%95%88%EC%9D%98-%ED%95%A8%EC%88%98%EC%97%90%EC%84%9C-%EC%A7%80%EC%97%AD%EB%B3%80%EC%88%98-%EB%B3%80%EA%B2%BD\" aria-label=\"함수 안의 함수에서 지역변수 변경 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수 안의 함수에서 지역변수 변경</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def A():\n    x = 10        # A의 지역 변수 x\n    def B():\n        x = 20    # x에 20 할당 -&gt; 이건 B의 지역변수로 위의 x와 다르다\n\n    B()\n    print(x)      # A의 지역 변수 x 출력\n\nA()\n10               # A의 지역변수값 그대로 출력</code></pre></div>\n<p>x값을 일치 하기 위해서는 지역변수값을 변경 시켜야 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def A():\n    x = 10          # A의 지역 변수 x\n    def B():\n        nonlocal x  # 현재 함수의 바깥쪽에 있는 지역 변수 사용\n        x = 20      # A의 지역 변수 x에 20 할당\n\n    B()\n    print(x)        # A의 지역 변수 x 출력\n\nA()\n20                  # B에서 바뀐 값 20 이 출력</code></pre></div>\n<ul>\n<li>nonlocal이 지역변수를 찾는 순서\n가까운 함수부터 지역 변수를 찾고, 지역 변수가 없으면 계속 바깥쪽으로 나가서 찾습니다.(계층적)</li>\n</ul>\n<p>실무에서는 이렇게 여러 단계로 함수를 만들 일은 거의 없다고 한다. 그리고 함수마다 이름이 같은 변수를 사용하기 보다는 변수 이름을 다르게 짓는 것이 좋습니다.</p>\n<p>전역 변수는 코드가 복잡해졌을 때 변수의 값을 어디서 바꾸는지 알기가 힘듭니다. 따라서 전역 변수는 가급적이면 사용하지 않는 것을 권장합니다.</p>\n<h1 id=\"closure란\"><a href=\"#closure%EB%9E%80\" aria-label=\"closure란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Closure란?</h1>\n<p>어떤 함수 내부에서 정의된 함수는 클로저가 될 수 있으며, 클로저는 바깥 함수로부터 생성된 변수값을 변경 또는 저장할 수 있는 함수이다.</p>\n<ul>\n<li>언제 활용??<br>\n지역 변수와 코드를 묶어서 사용하고 싶을 때 활용합니다. 또한, 클로저에 속한 지역 변수는 바깥에서 직접 접근할 수 없으므로 데이터를 숨기고 싶을 때 활용합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def login_decorator(func):\n    def wrapper(self, request, *args, **kwargs):   # Closure 부분\n\n        if &quot;Authorization&quot; not in request.headers:\n            return JsonResponse({&quot;ERROR_CODE&quot;:&quot;INVALID_LOGIN&quot;}, status=401)\n\n        encode_token = request.headers[&quot;Authorization&quot;]  # request가 바깥 전역함수 login_decorator의 func에서 request 변수 중 headers에 있는 [&quot;Authorization&quot;]값\n        try:\n            data = jwt.decode(encode_token, SECRET[&#39;secret&#39;], algorithm=&#39;HS256&#39;)\n            user = User.objects.get(id = data[&quot;user_id&quot;])     request.user = user       # request.user에 새로운 값 부여\n        except jwt.DecodeError:\n            return JsonResponse({&quot;ERROR_CODE&quot; : &quot;INVALID_TOKEN&quot;}, status = 401)\n\n        except User.DoesNotExist:\n            return JsonResponse({&quot;ERROR_CODE&quot; : &quot;UNKNOWN_USER&quot;}, status = 401)\n\n        return func(self, request, *args, **kwargs) # 바뀐 변수값을 리턴\n    return wrapper     # 함수 자체를 리턴</code></pre></div>\n<h2 id=\"lamda로-클로져-만들기\"><a href=\"#lamda%EB%A1%9C-%ED%81%B4%EB%A1%9C%EC%A0%B8-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"lamda로 클로져 만들기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>lamda로 클로져 만들기</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">def calc():\n    a = 3\n    b = 5\n    return lambda x: a * x + b    # 람다 표현식을 반환(함수 따로 안만들고)\n\nc = calc()\nprint(c(1), c(2), c(3), c(4), c(5))</code></pre></div>","fields":{"slug":"/posts/python/closure","tagSlugs":["/tag/python-closure/"]},"frontmatter":{"date":"2020-01-09T23:30:03.284Z","description":"closure in python","tags":["Python, Closure"],"title":"Python Closure","socialImage":"/media/gutenberg.jpg"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/python/closure"}}}