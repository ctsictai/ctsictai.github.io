{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/AWS/EC2","result":{"data":{"markdownRemark":{"id":"160685d5-3ed9-5f05-b7d9-8f1ad65f9a9f","html":"<h1 id=\"ec2란\"><a href=\"#ec2%EB%9E%80\" aria-label=\"ec2란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>EC2란?</h1>\n<p>Elastic Compute Cloud의 약자이다.</p>\n<p>AWS 상에서 사용하는 Server. EC2 서버에 API를 배포하게 된다.</p>\n<p>EC2는 다양한 사양 옵션을 제공한다. t2.nano (CPU 1, 0.5 GB memory) 부터 x1.32xlarge (CPI 128, 1952 GB) 까지 다양하게 제공함으로 필요한 사양의 EC2 인스턴스(instnace)를 선택해서 사용하면 된다 (물론 사양이 좋을 수록 비싸다).</p>\n<p>고객들(보통 기업들)의 요구에 따라 다양한 CPU 사양요구를 충족 시키려고 선택할 인스턴스가 계속 늘어나고 있다.</p>\n<h1 id=\"ec2-인스턴스-생성\"><a href=\"#ec2-%EC%9D%B8%EC%8A%A4%ED%84%B4%EC%8A%A4-%EC%83%9D%EC%84%B1\" aria-label=\"ec2 인스턴스 생성 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>EC2 인스턴스 생성</h1>\n<ol>\n<li>Launch instance 선택하고 우분투 서버 선택\n<img src=\"https://wedizfundmakerimage.s3.ap-northeast-2.amazonaws.com/EC2+1.+setting+computing+select.png\"></li>\n<li>Instance type을 선택한다. t2<em>micro가 1년 동안 무료임으로 t2</em>micro를 선택한 후 “Next: Configure Instance Details”를 선택한다.</li>\n</ol>\n<p><img src=\"https://wedizfundmakerimage.s3.ap-northeast-2.amazonaws.com/EC2+2.+instance+selected.png\"></p>\n<ol start=\"3\">\n<li>“Auto-assign Public IP” 설정을 “Enable”로 한다.\n나머지는 default 값을 그대로 나두면 된다. 이제 “검토 및 시작”를 클릭하자.</li>\n</ol>\n<p><img src=\"https://wedizfundmakerimage.s3.ap-northeast-2.amazonaws.com/EC2+3.+instance+detail+setting.png\"></p>\n<ol start=\"4\">\n<li>보안그룹 단계에서 보안그룹을 새로 생성하거나 기존에 세팅해놓은 보안그룹을 선택한다. 여기서는 기존의 보안그룹 선택하는 것으로 하였다.</li>\n</ol>\n<p><img src=\"https://wedizfundmakerimage.s3.ap-northeast-2.amazonaws.com/EC2+4.+security+group.png\"></p>\n<ol start=\"5\">\n<li>인스턴스 만들기전 최종 세팅 상태를 마지막으로 확인후 “시작하기”를 클릭한다.</li>\n</ol>\n<p><img src=\"https://wedizfundmakerimage.s3.ap-northeast-2.amazonaws.com/EC2+5.+Instance+Final+review.png\"></p>\n<ol start=\"6\">\n<li>“시작하기”를 누른 뒤 키 페어를 다운로드 받는다. 이 때 이 다운로드 키는 *.pem 형식이며 그 위치를 꼭 기억하도록 하자 이게 없으면 EC2 접속이 안됨!\n<img src=\"https://wedizfundmakerimage.s3.ap-northeast-2.amazonaws.com/EC2+6.+select+existing+key+pair.png\"></li>\n<li>EC2 인스턴스 상태 창에서 ‘Public DNS’, ‘Public IP’ 확인한다.\n<img src=\"https://wedizfundmakerimage.s3.ap-northeast-2.amazonaws.com/EC2+7.+ec2+instance+status.png\"></li>\n<li>Public IP주소로 ssh 접속을 한다. - EC2 실행</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">chmod -R 400 *.pem # id/key값만 보기 위한 명령어(pem키가 있는 디렉토리에서 실행해야 한다)\nssh -i path/to/pem(pem키가 있는 경로) ubuntu@13.125.228.11(public Ip 주소)</code></pre></div>\n<h1 id=\"ec2-실행-뒤-세팅background-서버-구동\"><a href=\"#ec2-%EC%8B%A4%ED%96%89-%EB%92%A4-%EC%84%B8%ED%8C%85background-%EC%84%9C%EB%B2%84-%EA%B5%AC%EB%8F%99\" aria-label=\"ec2 실행 뒤 세팅background 서버 구동 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>EC2 실행 뒤 세팅(background 서버 구동)</h1>\n<ol>\n<li>python 3.7 설치\nminiconda 설치\nconda create -n 가상환경명 env 설치\n여기서 깃헙에 올린 프로젝트를 git clone 하고\npip install -r requirements.txt를 통해 pip 설치한다. (가상환경 처음 세팅하는 것과 비슷)</li>\n<li>\n<p>외부 서버와 연결하여 지속적인 서버 작업이 가능 이 때 그 작업을 백그라운드에서 하기 위해서\ngunicorn - back ground process 설정 기능 이거 lib 이용</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. nohup</code></pre></div>\n<p>background에서 계속 서버가 돌아간다 but 서버를 reboot를 할 경우에는 멈춤\nnohup gunicorn myfile:app -b 0.0.0.0:8000 2. daemon<br>\n데몬 프로세스로 실행하는 —daemon | —reload는 소스 변경시 재구동</p>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gunicorn 프로젝트명.wsgi:application --bind=0.0.0.0:8000 --daemon --reload</code></pre></div>\n<h2 id=\"ec2에-docker-container-실행\"><a href=\"#ec2%EC%97%90-docker-container-%EC%8B%A4%ED%96%89\" aria-label=\"ec2에 docker container 실행 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>EC2에 Docker container 실행</h2>\n<ol>\n<li>docker repository에서 pull 받기</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">(base) ubuntu@ip-172-31-6-119:~$ sudo docker pull ctsictai/wediz:0.1</code></pre></div>\n<ol start=\"2\">\n<li>container 실행</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">sudo docker run --name wewantedu(컨테이너 이름) -d -p 8000:8000 ctsictai/wediz:0.1</code></pre></div>\n<ul>\n<li>d : daemon - background 실행하는 명령어</li>\n<li>p : port - 포트매핑</li>\n<li>gunicorn porcessing 확인</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">gunicorn 프로젝트명.wsgi:application --bind=0.0.0.0:8000</code></pre></div>\n<p><img src=\"https://wedizfundmakerimage.s3.ap-northeast-2.amazonaws.com/gunicorn+wsgi%2Csettings.png\"></p>","fields":{"slug":"/posts/AWS/EC2","tagSlugs":["/tag/ec-2/"]},"frontmatter":{"date":"2020-01-31123:30:03.284Z","description":"AWS EC2 settings","tags":["EC2"],"title":"AWS EC2 Setting","socialImage":"/media/image-1.jpg"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/AWS/EC2"}}}