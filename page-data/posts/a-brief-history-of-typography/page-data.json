{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/a-brief-history-of-typography/","webpackCompilationHash":"ed531cce1bd9c166d2fc","result":{"data":{"markdownRemark":{"id":"f6c52228-a4cf-563e-8a2e-5eb4da489f99","html":"<h2 id=\"1-string-type에-대해-파헤쳐-보자\"><a href=\"#1-string-type%EC%97%90-%EB%8C%80%ED%95%B4-%ED%8C%8C%ED%97%A4%EC%B3%90-%EB%B3%B4%EC%9E%90\" aria-label=\"1 string type에 대해 파헤쳐 보자 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. String type에 대해 파헤쳐 보자</h2>\n<p>string type은 ” ” / ’ ’ / <code class=\"language-text\"></code> 사이에 있는 것을 말한다.</p>\n<p>string type은 대소문자를 구별한다. n is not equal N</p>\n<p>string type은 str에 제공되는 메서드를 쓸 수 있다.</p>\n<p>​</p>\n<p>(1) Length 메서드</p>\n<p>Str.length = str의 길이를 알 수 있다 – 굉장히 많이 씀!!</p>\n<p>​</p>\n<p>(2) indexOf 메서드</p>\n<p>str.indexOf(“찾고자 하는 문자”) – 찾고자 하는 문자의 인덱싱 값을 반환 해준다. – 많이 씀!!\n문자가 복수 문자일 경우 첫 문자열 기준으로 반환한다. 만약에 인자값에 입력한 값이 없으면 -1을 반환한다.</p>\n<p>​</p>\n<p>※ 문자의 인덱싱 값(위치)를 알아서 무엇에 좋을까?</p>\n<ol>\n<li>차단할 단어 모음이 존재하면, 사용자가 댓글 쓰고 댓글달기를 누를 때 차단할 단어 모음중 하나라도 매치되면 댓글을 못달게 할 수 있다.</li>\n<li>오타를 코딩으로 수정 가능함.</li>\n</ol>\n<p>​</p>\n<p>(3) Slice 메서드\nstr.slice(시작할 인덱싱 혹은 특정 str, 종료 인덱싱 혹은 특정 str) – 텍스트를 잘라주는 함수</p>\n<p><code class=\"language-text\">str = “JavaScript는 프로래밍 언어이다.&quot;;</code>\n<code class=\"language-text\">str.slice(0, 4);</code> - java => [4]의 위치는 ‘S’인데 S앞까지 잘라준다!! 중요!!!\n<code class=\"language-text\">Str.slice(5, 13);</code> - “cript는 프” [5] 부터 시작 [13]인 ‘로’ 앞까지\n앞서서 <code class=\"language-text\">let char = str.indexOf(“Script”);</code> - 위치 인덱싱 값 반환 – 첫 문자 ‘S’ 기준으로 인덱싱값 반환</p>\n<p><code class=\"language-text\">str.slice(char);</code>=> Script는 프로래밍 언어이다 - 출력 => 2번째 인자 안주면 무조건 끝까지 !!</p>\n<p>​</p>\n<p>(4) StartsWith(“시작하는 문자열”)</p>\n<p>– 해당 문자열로 str이 시작하는지 아닌지 true/false</p>\n<p>(5) endsWith(“끝나는 문자열”)</p>\n<p>– 해당 문자열로 str이 끝나는지 아닌지 true/false</p>\n<p>(6) includes(“찾으려는 문자열”)</p>\n<p>– 해당 문자열에 찾으려는 문자열이 있으면 true 없으면 false 반환</p>\n<p>​</p>\n<h2 id=\"1-2-텍스트-문자열str의-연결\"><a href=\"#1-2-%ED%85%8D%EC%8A%A4%ED%8A%B8-%EB%AC%B8%EC%9E%90%EC%97%B4str%EC%9D%98-%EC%97%B0%EA%B2%B0\" aria-label=\"1 2 텍스트 문자열str의 연결 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-2. 텍스트 문자열(str)의 연결**</h2>\n<table>\n<thead>\n<tr>\n<th>구버전</th>\n<th>ES6</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>“안녕하세요! ” + username(변수) + “님”</td>\n<td>const hi = <code class=\"language-text\">안녕하세요. 저는 ${name} 입니다.</code>;</td>\n</tr>\n<tr>\n<td>- +를 붙여야 한다. Str type이라면 ‘’나 “” 필수</td>\n<td>+ 필요없고 ${name -변수} 변수값을 문자열 값에 넣을 수 있다. 그리고 <code class=\"language-text\"></code>(1옆에 있는 기호)로 문자열 지정이 가능하고 변수값을 넣을 수 있게 되었다.</td>\n</tr>\n</tbody>\n</table>\n<p>​</p>\n<ul>\n<li>구버전</li>\n</ul>\n<p><code class=\"language-text\">Let detail = ‘자세히’\\n +’보아야’\\n + ‘이이이’;</code></p>\n<p>Let detail = “자세히</p>\n<p>보아야</p>\n<p>이이이”;</p>\n<ul>\n<li>ES6</li>\n</ul>\n<p><code class=\"language-text\">let message = &quot;감사합니다., &quot;;</code></p>\n<p><code class=\"language-text\">let userName = &quot;김개발&quot;;</code></p>\n<p><code class=\"language-text\">let banger = &quot;님!&quot;;</code></p>\n<p><code class=\"language-text\">let customMess = message + userName + banger;</code></p>\n<p><code class=\"language-text\">let message = &quot;감사합니다., &quot;;</code></p>\n<p><code class=\"language-text\">let userName = &quot;김개발&quot;;</code></p>\n<p><code class=\"language-text\">let banger = &quot;님!&quot;;</code></p>\n<p><code class=\"language-text\">let customMess =</code> <span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi><mi>e</mi><mi>s</mi><mi>s</mi><mi>a</mi><mi>g</mi><mi>e</mi></mrow><annotation encoding=\"application/x-tex\">{message}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.19444em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">m</span><span class=\"mord mathdefault\">e</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">s</span><span class=\"mord mathdefault\">a</span><span class=\"mord mathdefault\" style=\"margin-right:0.03588em;\">g</span><span class=\"mord mathdefault\">e</span></span></span></span></span>{userName} ${banger};`</p>\n<h3 id=\"str과-number-type의-만남--js의-특징\"><a href=\"#str%EA%B3%BC-number-type%EC%9D%98-%EB%A7%8C%EB%82%A8--js%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"str과 number type의 만남  js의 특징 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>str과 number type의 만남 – js의 특징</h3>\n<p>String + Number 을 시도할 때 항상 주의해야 합니다.\nString과 Number형을 더하면 항상 String 형으로 변환됩니다.</p>\n<p><code class=\"language-text\">let text = &quot;2 더하기 2는 &quot; + (2 + 2)</code> – |2 더하기 2는 4| 출력</p>\n<p><code class=\"language-text\">let text = &quot;2 더하기 2는 &quot; + 2 + 2;</code> - |2 더하기 2는 22| 출력</p>\n<h2 id=\"1-3-string-☞-number-type-변환\"><a href=\"#1-3-string-%E2%98%9E-number-type-%EB%B3%80%ED%99%98\" aria-label=\"1 3 string ☞ number type 변환 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1-3. String ☞ Number type 변환​</h2>\n<p>JS에서는 type error가 잘 안나는 편이라 덜 신경쓰이지만 원래 다른 언어에서는 칼 같이 type에 따른 error가 많이 뜬다. 범용적으로 str은 str끼리 num은 num끼리 묶어야 코드 가독성이 좋다.</p>\n<p>​</p>\n<ul>\n<li>+기호_는 str, num type 신경안쓰고 모두 되는 연산자라 많이 헷갈린다.\n꼭 문자형과 숫자형을 구분하는 것이 좋다.</li>\n<li>기호_는 num type만 가능하므로 str type으로 -연산하면 NaN(Not a Number)가 뜬다</li>\n</ul>\n<h3 id=\"string을-number-type으로-변환하는-메서드\"><a href=\"#string%EC%9D%84-number-type%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%98%EB%8A%94-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"string을 number type으로 변환하는 메서드 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>String을 Number type으로 변환하는 메서드</h3>\n<p>Number! parseInt / parseFloat\n<code class=\"language-text\">Let birthinput = “1999”</code> -str\n<code class=\"language-text\">Let birth = Number(birhinput);</code> - num​</p>\n<h3 id=\"number을-string-type으로-변환하는-메서드\"><a href=\"#number%EC%9D%84-string-type%EC%9C%BC%EB%A1%9C-%EB%B3%80%ED%99%98%ED%95%98%EB%8A%94-%EB%A9%94%EC%84%9C%EB%93%9C\" aria-label=\"number을 string type으로 변환하는 메서드 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Number을 String type으로 변환하는 메서드</h3>\n<p><code class=\"language-text\">Let n = 12;</code>\n<code class=\"language-text\">Let nToS = n.toString();</code></p>","fields":{"slug":"/posts/a-brief-history-of-typography/","tagSlugs":["/tag/java-script/"]},"frontmatter":{"date":"2019-10-08T22:50:32.169Z","description":"","tags":["JavaScript"],"title":"09.30~10.04 한 주 정리 part2","socialImage":"/media/image-0.jpg"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/a-brief-history-of-typography/"}}}