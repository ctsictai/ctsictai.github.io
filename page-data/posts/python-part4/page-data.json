{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/python-part4/","webpackCompilationHash":"e075711bf810f049cbc2","result":{"data":{"markdownRemark":{"id":"72fa98ea-afb0-5df4-8893-7a65153bac03","html":"<h1 id=\"if문-조건\"><a href=\"#if%EB%AC%B8-%EC%A1%B0%EA%B1%B4\" aria-label=\"if문 조건 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>If문 조건</h1>\n<p>if문에 정수, bool값, 문자열, 실수 다 들어감</p>\n<h2 id=\"조건문에서-false로-취급되는-것들\"><a href=\"#%EC%A1%B0%EA%B1%B4%EB%AC%B8%EC%97%90%EC%84%9C-false%EB%A1%9C-%EC%B7%A8%EA%B8%89%EB%90%98%EB%8A%94-%EA%B2%83%EB%93%A4\" aria-label=\"조건문에서 false로 취급되는 것들 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조건문에서 False로 취급되는 것들</h2>\n<ul>\n<li>None</li>\n<li>False</li>\n<li>0인 숫자들 : 0, 0.0, 0j</li>\n<li>비어 있는 문자열, 리스트, 튜플. 딕셔너리, 세트 : \"\", [], (), {}, set()</li>\n<li>클래스 인스턴스의 <code class=\"language-text\">__bool__()</code>, <code class=\"language-text\">__len__()</code>메서드가 0또는 False를 반환할 때</li>\n</ul>\n<p>위에서 나열한 것들을 제외한 모든 요소들은 True로 취급한다.</p>\n<h2 id=\"조건식을-여러개-지정하기\"><a href=\"#%EC%A1%B0%EA%B1%B4%EC%8B%9D%EC%9D%84-%EC%97%AC%EB%9F%AC%EA%B0%9C-%EC%A7%80%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"조건식을 여러개 지정하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>조건식을 여러개 지정하기</h2>\n<p>조건식이 여러 개일 때는 논리 연산자(==, &#x3C;, >, &#x3C; &#x3C;, ….)를 활용한다는 점도 기억하자.</p>\n<p>조건식에 조건을 여러 개 붙이려면 조건에 따라 and나 or를 붙인다.</p>\n<h1 id=\"nest-if문\"><a href=\"#nest-if%EB%AC%B8\" aria-label=\"nest if문 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Nest If문</h1>\n<p>파이썬의 특징인 indentation으로 구분 되는 if문으로써 if문 안에 if문이 실행되는 이중 if문이다.</p>\n<p>간격이 더 들어 갈수록 중첩이 더 된 것이다.</p>\n<p><strong>Nest if문에서 root에 있는 if문의 return이 최종 def의 return값이 된다.</strong></p>\n<h1 id=\"for문\"><a href=\"#for%EB%AC%B8\" aria-label=\"for문 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>for문</h1>\n<p>List의 요소를 한번에 한개씩 가지고 for 구문 안에 있는 코드를 실행하게 됩니다.</p>\n<p>for element in list:</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> do_something_with_element</code></pre></div>\n<p>For 문은 list 뿐만이 아니라 tuple, set 등 다른 자료구조와도 사용할 수 있습니다.</p>\n<h2 id=\"range함수와-함께-사용하는-for문\"><a href=\"#range%ED%95%A8%EC%88%98%EC%99%80-%ED%95%A8%EA%BB%98-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-for%EB%AC%B8\" aria-label=\"range함수와 함께 사용하는 for문 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>range함수와 함께 사용하는 for문</h2>\n<p>for 변수 in range(횟수):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> 반복할 코드</code></pre></div>\n<h3 id=\"시작하는-숫자와-끝나는-숫자-지정하기\"><a href=\"#%EC%8B%9C%EC%9E%91%ED%95%98%EB%8A%94-%EC%88%AB%EC%9E%90%EC%99%80-%EB%81%9D%EB%82%98%EB%8A%94-%EC%88%AB%EC%9E%90-%EC%A7%80%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"시작하는 숫자와 끝나는 숫자 지정하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시작하는 숫자와 끝나는 숫자 지정하기</h3>\n<p>range에 횟수만 지정하면 숫자가 0부터 시작하지만, 다음과 같이 시작하는 숫자와 끝나는 숫자를 지정해서 반복할 수도 있습니다.</p>\n<ul>\n<li>for 변수 in range(시작, 끝):</li>\n</ul>\n<h3 id=\"증가폭-사용하기\"><a href=\"#%EC%A6%9D%EA%B0%80%ED%8F%AD-%EC%82%AC%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"증가폭 사용하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>증가폭 사용하기</h3>\n<p>range는 증가폭을 지정해서 해당 값만큼 숫자를 증가시킬 수 있죠? 이번에는 0부터 9까지의 숫자 중에서 짝수만 출력해보겠습니다.</p>\n<ul>\n<li>for 변수 in range(시작, 끝, 증가폭):</li>\n</ul>\n<h3 id=\"숫자를-감소시키기\"><a href=\"#%EC%88%AB%EC%9E%90%EB%A5%BC-%EA%B0%90%EC%86%8C%EC%8B%9C%ED%82%A4%EA%B8%B0\" aria-label=\"숫자를 감소시키기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>숫자를 감소시키기</h3>\n<p>for와 range는 숫자가 증가하면서 반복했습니다. 그럼 숫자를 감소시킬 수는 없을까요?</p>\n<p>for i in range(10, 0): # range(10, 0)은 동작하지 않음</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">print(&#39;Hello, world!&#39;, i)</code></pre></div>\n<p>range(10, 0)과 같이 시작하는 숫자를 큰 숫자로 지정하고 끝나는 숫자를 작은 숫자로 지정하면 숫자가 감소할 것 같은데, 실행을 해보면 아무것도 출력되지 않습니다. 왜냐하면 range는 숫자가 증가하는 기본 값이 양수 1이기 때문입니다.</p>\n<p>증가폭을 음수로 지정해서 반복해봅니다.\n증가폭을 음수로 지정하는 방법 말고도 reversed를 사용하면 숫자의 순서를 반대로 뒤집을 수 있습니다.</p>\n<h3 id=\"입력한-횟수대로-반복하기\"><a href=\"#%EC%9E%85%EB%A0%A5%ED%95%9C-%ED%9A%9F%EC%88%98%EB%8C%80%EB%A1%9C-%EB%B0%98%EB%B3%B5%ED%95%98%EA%B8%B0\" aria-label=\"입력한 횟수대로 반복하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입력한 횟수대로 반복하기</h3>\n<p>이번에는 입력한 횟수대로 반복을 해보겠습니다. 다음 내용을 IDLE의 소스 코드 편집 창에 입력하세요.</p>\n<p>for<em>range</em>input.py</p>\n<p>count = int(input(‘반복할 횟수를 입력하세요: ‘))</p>\n<p>for i in range(count):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> print(&#39;Hello, world!&#39;, i)</code></pre></div>\n<p>소스 코드를 실행하면 ‘반복할 횟수를 입력하세요: ‘가 출력됩니다. 여기서 3을 입력하고 엔터 키를 누르세요.</p>\n<ul>\n<li>실행 결과</li>\n</ul>\n<p>반복할 횟수를 입력하세요: 3 (입력)<br>\nHello, world! 0<br>\nHello, world! 1<br>\nHello, world! 2<br>\n3을 입력했으므로 ‘Hello, world!’가 3번 출력됩니다</p>\n<h3 id=\"시퀀스-이용한-for문\"><a href=\"#%EC%8B%9C%ED%80%80%EC%8A%A4-%EC%9D%B4%EC%9A%A9%ED%95%9C-for%EB%AC%B8\" aria-label=\"시퀀스 이용한 for문 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>시퀀스 이용한 for문</h3>\n<p>먼저 input으로 입력 값을 받아서 count 변수에 저장합니다(이때 반드시 int를 사용하여 input에서 나온 문자열을 정수로 변환해줍니다).<br>\n그리고 반복문에서는 for i in range(count):와 같이 range에 count를 넣어주면 입력받은 숫자만큼 반복됩니다.</p>\n<p>다음과 같이 for에 range 대신 리스트를 넣으면 리스트의 요소를 꺼내면서 반복합니다.</p>\n<blockquote>\n<p>a = [10, 20, 30, 40, 50]</p>\n</blockquote>\n<blockquote>\n<p>for i in a:</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  print(i)</code></pre></div>\n<p>10\n20\n30\n40\n50<br>\n물론 튜플도 마찬가지로 튜플의 요소를 꺼내면서 반복합니다</p>\n<ul>\n<li>문자열도 시퀀스 객체라고 했죠?<br>\nfor에 문자열을 지정하면 문자를 하나씩 꺼내면서 반복합니다.</li>\n</ul>\n<blockquote>\n<p>for letter in ‘Python’:</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> print(letter, end=&#39; &#39;)</code></pre></div>\n<p>P y t h o n</p>\n<p>문자열 ‘Python’의 문자가 하나씩 분리되어 출력되었습니다. 여기서는 print에 end=’ ‘을 지정했으므로 줄바꿈이 되지 않고, 각 문자가 공백으로 띄워져서 출력됩니다.</p>\n<p>그럼 문자열 ‘Python’을 뒤집어서 문자를 출력할 수는 없을까요? 이때는 앞에서 배운 reversed를 활용하면 됩니다.</p>\n<ul>\n<li>\n<p>reversed(시퀀스객체)</p>\n<ul>\n<li>\n<p>for letter in reversed(‘Python’):</p>\n<p>print(letter, end=’ ‘)</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>n o h t y P</p>\n<p>문자열 ‘Python’에서 문자 n부터 P까지 출력되었습니다. reversed는 시퀀스 객체를 넣으면 시퀀스 객체를 뒤집어 줍니다(원본 객체 자체는 바뀌지 않으며 뒤집어서 꺼내줌).</p>\n<h1 id=\"iterator--break-for--while-가능\"><a href=\"#iterator--break-for--while-%EA%B0%80%EB%8A%A5\" aria-label=\"iterator  break for  while 가능 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Iterator -break (for / while 가능)</h1>\n<p>앞서 보았듯이 for 구문에서는 <em>리스트가 가지고 있는 요소의 수 만큼 for 구문에 속해있는 코드를 실행</em>합니다.\n이걸 <strong>iteration</strong> 이라고 합니다.<br>\n만일 리스트가 5개의 요소를 가지고 있으면 5 iterations 이라고 합니다.\n즉 5번 반복한다는 뜻이죠.<br>\n그래서 for loops를 한국어로 for 반복구문 이라고 하기도 합니다.</p>\n<p>그런데 가끔은 중간에 도중하차(?) 하고 싶을때가 있습니다. 굳이 끝까지 for 구문을 진행할 필요 없이 중간에서 멈추고 싶을때는 <strong>break</strong> 문을 사용하면 됩니다.</p>\n<blockquote>\n<p>break - (for /while 가능)\nFor 구문에서 break 문이 실행되면 다음 iteration으로 넘어가지 않고 for 구문에서 빠져 나오게 됩니다.</p>\n</blockquote>\n<blockquote>\n<p>Continue - (for / while 가능)</p>\n</blockquote>\n<p>만일 break처럼 for 구문에서 완전히 빠져 나오고 싶지는 않지만 다음 요소, 즉 다음 interation으로 넘어가고 싶을때는 continue 문을 사용하면 됩니다.</p>\n<p><img src=\"https://snscrawler.files.wordpress.com/2017/06/131.png\" alt=\"break-continue\"></p>","fields":{"slug":"/posts/python-part4/","tagSlugs":["/tag/python/"]},"frontmatter":{"date":"2019-10-20T23:30:03.284Z","description":"if문 part2/for문/iterator","tags":["Python"],"title":"Python Apprenticeship Study Part.4","socialImage":"/media/gutenberg.jpg"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/python-part4/"}}}