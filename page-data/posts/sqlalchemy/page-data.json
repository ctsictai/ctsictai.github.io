{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/sqlalchemy/","result":{"data":{"markdownRemark":{"id":"5db498db-5ea8-5dd4-abcf-9103e1d9591c","html":"<h1 id=\"sqlalchemy의-철학\"><a href=\"#sqlalchemy%EC%9D%98-%EC%B2%A0%ED%95%99\" aria-label=\"sqlalchemy의 철학 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>SqlAlchemy의 철학</h1>\n<p>SQL 데이터베이스는 크기와 성능이 중요해질수록 개체 컬렉션과 유사하게 동작합니다. 객체 컬렉션은 테이블과 행처럼 동작하지 않으므로 더 추상화가 중요합니다. SQLAlchemy는 이러한 두 가지 원칙을 모두 수용하려고합니다.</p>\n<p>SQLAlchemy는 데이터베이스를 테이블 집합이 아닌 관계형 대수 엔진으로 간주합니다. 행은 테이블뿐만 아니라 조인 및 다른 select 문에서도 선택할 수 있습니다. 이들 유닛 중 어느 것이 더 큰 구조로 구성 될 수있다. SQLAlchemy의 표현식 언어는이 개념을 핵심으로합니다.</p>\n<p>SQLAlchemy는 데이터 매퍼 패턴을 제공하는 선택적 구성 요소 인 ORM (Object-Relational Mapper)으로 가장 유명합니다. 여기서 클래스는 개방형 다중 방식으로 데이터베이스에 매핑 될 수 있으므로 개체 모델 및 데이터베이스 스키마를 처음부터 깨끗하게 분리 된 방식.</p>\n<p>이러한 문제에 대한 SQLAlchemy의 전반적인 접근법은 소위 칭찬 지향적 접근법에 기반한 다른 대부분의 SQL / ORM 도구와 완전히 다릅니다. 자동화 벽 뒤에 SQL 및 객체 관계형 세부 정보를 숨기는 대신 일련의 구성 가능하고 투명한 도구 내에서 모든 프로세스가 완전히 노출됩니다. 라이브러리는 중복 작업을 자동화하는 작업을 수행하는 반면 개발자는 데이터베이스 구성 방법 및 SQL 작성 방법을 제어합니다.</p>\n<p><a href=\"https://www.sqlalchemy.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SQLALCHEMY 공홈 참조</a></p>\n<h1 id=\"1-설치\"><a href=\"#1-%EC%84%A4%EC%B9%98\" aria-label=\"1 설치 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 설치</h1>\n<p><code> pip install sqlalchemy</code></p>\n<h1 id=\"2-db-연결\"><a href=\"#2-db-%EC%97%B0%EA%B2%B0\" aria-label=\"2 db 연결 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. DB 연결</h1>\n<p>DB에 연결을 하기 위한 추가 프로그램 설치가 필요하다</p>\n<h2 id=\"2-1-dbapi-설치\"><a href=\"#2-1-dbapi-%EC%84%A4%EC%B9%98\" aria-label=\"2 1 dbapi 설치 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-1. DBAPI 설치</h2>\n<p>DBAPI는 동일한 API를 사용하여 다양한 데이터베이스에서 작동하도록 권장하는 표준입니다.</p>\n<p>MySQL : PyMySQL, MySQL-Connector, CyMySQL, MySQL-Python (default)</p>\n<p><code> pip install pymysql</code></p>\n<h2 id=\"2-2-create-engine\"><a href=\"#2-2-create-engine\" aria-label=\"2 2 create engine permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-2. Create engine</h2>\n<blockquote>\n<h3 id=\"databasespy---settings-file\"><a href=\"#databasespy---settings-file\" aria-label=\"databasespy   settings file permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>databases.py - settings file</h3>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from sqlalchemy import create_engine\nengine = create_engine(&#39;mysql+pymysql://username:password@localhost/db명&#39;)</code></pre></div>\n<p>엔진을 통해 mysql db 서버와 연결하는 기초 공사를 하는 중이다.\n(아직 연결 안됨)</p>\n<h2 id=\"2-3-진짜-연결\"><a href=\"#2-3-%EC%A7%84%EC%A7%9C-%EC%97%B0%EA%B2%B0\" aria-label=\"2 3 진짜 연결 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2-3. 진짜 연결</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from sqlalchemy import create_engine\nengine = create_engine(&#39;mysql+pymysql://username:password@localhost/db명&#39;)\nengine.connect()\n\nprint(engine)</code></pre></div>\n<blockquote>\n<p><code class=\"language-text\">Engine(&#39;mysql+pymysql://username:password@localhost/db명&#39;)</code>\n이 화면이 뜨면 정상 연결이 되었다.</p>\n</blockquote>\n<h1 id=\"3-매핑-선언\"><a href=\"#3-%EB%A7%A4%ED%95%91-%EC%84%A0%EC%96%B8\" aria-label=\"3 매핑 선언 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 매핑 선언</h1>\n<p>ORM에서는 처음에 데이터베이스 테이블을 생성하고 사용할 수 있도록 설정한 뒤 다음 직접 정의한 클래스에 맵핑을 해야한다.(안 그러면 ORM 명령어가 DB단에 들어가지 않는다)</p>\n<p>sqlalchemy에서는 두가지가 동시에 이뤄지는데 Declarative 란걸 이용해 클래스를 생성하고 실제 디비 테이블에 연결을 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from sqlalchemy.ext.declarative import declarative_base\nBase = declarative_base()</code></pre></div>\n<h1 id=\"4-실제-모델-테이블-형성\"><a href=\"#4-%EC%8B%A4%EC%A0%9C-%EB%AA%A8%EB%8D%B8-%ED%85%8C%EC%9D%B4%EB%B8%94-%ED%98%95%EC%84%B1\" aria-label=\"4 실제 모델 테이블 형성 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 실제 모델 테이블 형성</h1>\n<blockquote>\n<h3 id=\"modelspy에서\"><a href=\"#modelspy%EC%97%90%EC%84%9C\" aria-label=\"modelspy에서 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>models.py에서</h3>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">from sqlalchemy import Column, Integer, String\n\nclass User(Base):\n    __tablename__ = &#39;users&#39;\n\n    id = Column(Integer, primary_key=True)\n    name = Column(String)\n    fullname = Column(String)\n    password = Column(String)\n\n    def __init__(self, name, fullname, password):\n        self.name = name\n        self.fullname = fullname\n        self.password = password\n\n    def __repr__(self):\n        return &quot;&lt;User(&#39;%s&#39;, &#39;%s&#39;, &#39;%s&#39;)&gt;&quot; % (self.name, self.fullname, self.password)</code></pre></div>\n<ul>\n<li>DB의 필드를 만들려면 직접 컬럼 클래스를 import 해야 한다.</li>\n<li>필드의 타입을 지정하려면 타입에 해당하는 클래스들을 import해야 한다.\n(ex) 숫자 타입 이라면 Integer | 문자타입이라면 String etc on..</li>\n<li>위 User 클래스는 <strong>tablename</strong>에서 정의한 테이블에 네임에 맵핑된다.</li>\n<li>primary key인 id와 name, fullname, password 컬럼을 가진다.</li>\n<li><strong>repr</strong>은 해당 클래스에 대해 string 값으로 대표되는 값을 표현해준다.</li>\n</ul>\n<blockquote>\n<p>Declarative system으로 만들어진 이 클래스는 table metadata를 가지게 되는데 이게 사용자정의 클래스와 테이블을 연결해주는 구실을 한다.</p>\n</blockquote>\n<h1 id=\"5-세션-이용\"><a href=\"#5-%EC%84%B8%EC%85%98-%EC%9D%B4%EC%9A%A9\" aria-label=\"5 세션 이용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 세션 이용</h1>\n<p>ORM은 데이터베이스를 session을 이용해 다룰 수 있는데 처음 앱을 작성할 때 create_engine()과 같은 레벨에서 Session 클래스를 factory 패턴으로 생성할 수 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Base.metadata.create_all(engine)\nSession = sessionmaker()\nSession.configure(bind=engine)\nsession = Session()</code></pre></div>\n<p>1행에서 engine을 통해 메타데이터에 접근함\n2행에서 다른 트랜잭션을 위한 것들은 sessionmaker()에서 호출될 때 정의하는 것(자세한 사항은 추후 업뎃)\n3행에서 세션에 엔진을 묶어 엔진 실행시 세션클래스에서 새 객체를 만들게 한다\n4행에서 Session 클래스 편하게 쓰기 위해 인스턴스화</p>","fields":{"slug":"/posts/sqlalchemy/","tagSlugs":["/tag/python-sqlalchemy/"]},"frontmatter":{"date":"2019-12-05T23:30:03.284Z","description":"Sqlalchemy","tags":["Python/Sqlalchemy"],"title":"SqlAlchemy","socialImage":"/media/gutenberg.jpg"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/sqlalchemy/"}}}