{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/python-part5/","result":{"data":{"markdownRemark":{"id":"3e057170-ff45-5576-ae3b-5cd7aefe380e","html":"<h1 id=\"while문\"><a href=\"#while%EB%AC%B8\" aria-label=\"while문 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>While문</h1>\n<p>while 구문은 특정 조건문이 True 일동안 코드블록을 반복 실행 합니다.</p>\n<h2 id=\"while-else\"><a href=\"#while-else\" aria-label=\"while else permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>While Else</h2>\n<p>파이썬의 while문은 else 문이 추가 될 수 있습니다.<br>\nif 문의 else 문과 유사합니다. If 문의 else 문은 if 문의 조건문이 False이면 실행됩니다.<br>\nWhile문의 else 문도 while의 조건문이 False 이면 실행됩니다.<br>\n즉 while문이 종료되면 else 문이 실행된다는 뜻입니다.</p>\n<p><img src=\"https://qph.fs.quoracdn.net/main-qimg-e45ba5aa18aeafb2de3789317bf8e662\" alt=\"while-else\"></p>\n<h1 id=\"함수function\"><a href=\"#%ED%95%A8%EC%88%98function\" aria-label=\"함수function permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>함수(Function)</h1>\n<ul>\n<li>함수의 개념</li>\n<li>Input을 받아서</li>\n<li>어떠한 계산 혹은 로직을 실행하고</li>\n<li>Output을 생성하는 것</li>\n</ul>\n<p>파이썬 함수에서 Input을 parameter라고 하고 Output을 Return이라 한다</p>\n<p>def 함수명(매개변수):</p>\n<p>&#x3C;수행할 문장1><br>\n&#x3C;수행할 문장2><br>\nreturn 리턴할 값(optional)</p>\n<h2 id=\"parameter-vs-argument\"><a href=\"#parameter-vs-argument\" aria-label=\"parameter vs argument permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Parameter vs Argument</h2>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Argument</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>함수에 입력으로 전달된 값을 받는 변수</td>\n<td>함수를 호출할 때 전달되는 입력 값</td>\n</tr>\n</tbody>\n</table>\n<p>def add(a, b): # <strong>a, b는 매개변수</strong></p>\n<p>return a+b</p>\n<p>print(add(3, 4)) # <strong>3, 4는 인수</strong></p>\n<h2 id=\"input과-output-형태에-따른-함수의-형태\"><a href=\"#input%EA%B3%BC-output-%ED%98%95%ED%83%9C%EC%97%90-%EB%94%B0%EB%A5%B8-%ED%95%A8%EC%88%98%EC%9D%98-%ED%98%95%ED%83%9C\" aria-label=\"input과 output 형태에 따른 함수의 형태 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Input과 output 형태에 따른 함수의 형태</h2>\n<ol>\n<li>일반적인 함수</li>\n<li>입력값 – 파라미터든 인자든 여기서는 파라미터 (a, b)가 있다</li>\n<li>출력값 – return result 가 존재함</li>\n</ol>\n<p>def add(a, b):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">result = a + b\nreturn result</code></pre></div>\n<ol start=\"2\">\n<li>입력값이 없는 함수</li>\n<li>입력값 – () 이게 지정이 안되어 있는 함수!</li>\n<li>출력값 – return ‘Hi’ 로 지정은 되어 있음</li>\n</ol>\n<p>def say():</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">    return &#39;Hi&#39;</code></pre></div>\n<p><em>함수 호출하여 출력값 보이게 하려면?</em><br>\nA = say() # 입력값을 안넣어야 – 앞에서 함수 정의 했던것과 동일하게<br>\nPrint(a) => Hi</p>\n<ol start=\"3\">\n<li>출력값이 없는 함수</li>\n<li>입력값 – a, b 파라미터</li>\n<li>출력값 – return 이 없음</li>\n</ol>\n<p>def add(a, b):</p>\n<p>print(“%d, %d의 합은 %d입니다.” % (a, b, a+b))</p>\n<h3 id=\"주의\"><a href=\"#%EC%A3%BC%EC%9D%98\" aria-label=\"주의 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><strong>주의</strong></h3>\n<ul>\n<li>print는 리턴값이 아니고 상태를 출력해서 보여주는 명령어에 불과함 리턴값이 아님! 위의 함수를 리턴값을 찾으면 None 출력</li>\n<li>리턴값이 없다는 얘기</li>\n<li>입, 출력값이 없는 함수</li>\n</ul>\n<p>def say():</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> print(&#39;Hi&#39;)</code></pre></div>\n<p>★ 함수를 사용할 단 한가지 방법 – 입출력값이 모두 없기 때문에</p>\n<p>say() – 이렇게 하는 수 밖에! —> 함수이름()</p>\n<p>Hi</p>\n<h2 id=\"입력값이-몇-개인지-정확히-모른다면\"><a href=\"#%EC%9E%85%EB%A0%A5%EA%B0%92%EC%9D%B4-%EB%AA%87-%EA%B0%9C%EC%9D%B8%EC%A7%80-%EC%A0%95%ED%99%95%ED%9E%88-%EB%AA%A8%EB%A5%B8%EB%8B%A4%EB%A9%B4\" aria-label=\"입력값이 몇 개인지 정확히 모른다면 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입력값이 몇 개인지 정확히 모른다면?</h2>\n<ol>\n<li>Non-keyworded variable length of arguments</li>\n</ol>\n<p>def add_many(<em>args): &#x3C;— *args – 입력값이 여러 개인 것을 알려주는 명령어 \\</em>이것만인데 args도 세트로 같이 쓴다.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> result = 0\n for i in args:\n result = result + i\n return result</code></pre></div>\n<ul>\n<li>\n<p>호출 시</p>\n<p>Add<em>many(1, 2, 3, 4) or Add</em>many(1, 2, 3, 4, 5 …..) or Add_many()</p>\n<ul>\n<li>모두 가능(list형태로 들어가서 순서가 매우 중요)</li>\n</ul>\n</li>\n<li>Keyworded variable length of arguments</li>\n<li>Argument 수를 0부터 N까지 유동적으로 넘겨줄 수 있습니다.</li>\n<li>Keyword가 미리 정해져 있지 않기때문에 원하는 keyword를 유동적으로 사용할 수 있습니다.</li>\n<li>Keyworded variable length of arguments는 dictionary 형태로 지정됩니다.</li>\n</ul>\n<p>def buy<em>A</em>car(**kwargs):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">print(f&quot;다음 사양의 자동차를 구입하십니다:&quot;)\n\nfor option in kwargs:\n    print(f&quot;{option} : {kwargs[option]}&quot;)</code></pre></div>\n<ul>\n<li>\n<p>호출 시</p>\n<p><code class=\"language-text\">buy_A_car(seat=&quot;가죽&quot;, blackbox=&quot;최신&quot;, tint=&quot;yes&quot;)</code> - dict type 형태로 들어감 순서가 중요하지 않음</p>\n</li>\n<li>mixing args and kwargs<br>\n둘 다 쓰면 parameter에 있어서 굉장히 유동적인 함수가 가능함</li>\n</ul>\n<p>def do_something(*args, **kwargs):</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> ## some code here...\n ....</code></pre></div>\n<ul>\n<li>\n<p>호출 시</p>\n<p>do<em>something(1, 2, 3, name=“정우성”, age=45)<br>\ndo</em>something(1, 2, 3, 4, 5, “hello”, {“주소” : “서울”, “국가” : “한국”})<br>\ndo<em>something(name=“정우성”, gender=“남”, height=“187”)<br>\ndo</em>something(1)<br>\ndo_something()</p>\n</li>\n</ul>\n<h1 id=\"modules--package\"><a href=\"#modules--package\" aria-label=\"modules  package permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Modules &#x26; package</h1>\n<p>변수나 함수 or 클래스 등을 모아 놓은 파일</p>\n<ul>\n<li>\n<p>하는 이유는 ?</p>\n<ul>\n<li>다른 파일에서 재사용이 가능</li>\n<li>코드를 나누어서 정리하고 유지보수가 좋게 하기 위해서</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"모듈패키지-불러오기\"><a href=\"#%EB%AA%A8%EB%93%88%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%B6%88%EB%9F%AC%EC%98%A4%EA%B8%B0\" aria-label=\"모듈패키지 불러오기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>모듈&#x26;패키지 불러오기</h1>\n<p>From 모듈 이름 import 함수/변수/ 클래스, …… as 닉네임</p>\n<ul>\n<li>닉네임 : 이 파일 안에서 모듈을 사용하기위한 임시이름</li>\n</ul>\n<h1 id=\"클로져closure\"><a href=\"#%ED%81%B4%EB%A1%9C%EC%A0%B8closure\" aria-label=\"클로져closure permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>클로져(closure)</h1>\n<ol>\n<li>중첩 함수가 부모 함수의 변수나 정보를 중첩 함수 내에서 사용한다</li>\n<li>부모 함수는 리턴값으로 중첩 함수를 리턴한다.</li>\n<li>부모 함수에서 리턴 했으므로 부모 함수의 변수는 직접적인 접근이 불가능 하지만 부모 함수가 리턴한 중첩 함수를 통해서 사용될수 있다.</li>\n</ol>\n<blockquote>\n<p>그렇다면 closure는 언제 사용하는 것일까요?</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"> 어떠한 정보를 기반으로 연산을 실행하고 싶지만 기반이 되는 정보는 접근을 제한하여 노출이 되거나 수정이 되지 못하게 하고 싶을때 사용합니다.</code></pre></div>\n<p>주로 factory 패턴을 구현할때 사용되는데요, factory는 공장이란 뜻이죠.\n즉 뭔가를 생성해내는 패턴입니다. 주로 함수나 오브젝트를 생성해내는데 사용됩니다.<br>\nFactory에서 뭔가를 생성해 내기 위해서는 설정값이 필요할것입니다.\n그 설정값을 노출하지 않아서 수정이 불가능하게 하면서 해당 설정값을 기반으로한 연산을 할 수 있는 함수를 만들때 closure를 사용할 수 있습니다.</p>\n<p>def generate<em>power(base</em>number):\ndef nth<em>power(power):\nreturn base</em>number ** power</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">return nth_power</code></pre></div>\n<blockquote>\n<p>호출 시</p>\n</blockquote>\n<p>calculate<em>power</em>of<em>two = generate</em>power(2) – 부모 함수의 base_number 지정</p>\n<p>calculate<em>power</em>of<em>two(7) - 부모함수의 base</em>number 2는 이미 지정 되어 있고</p>\n<p>power parameter만 설정하여 대입하여 2 ** 7이 되었음</p>\n<blockquote>\n<p>128</p>\n</blockquote>\n<h1 id=\"reduce-메서드-in-javascript\"><a href=\"#reduce-%EB%A9%94%EC%84%9C%EB%93%9C-in-javascript\" aria-label=\"reduce 메서드 in javascript permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reduce 메서드 in Javascript</h1>\n<p><code class=\"language-text\">reduce()</code> 메서드는 배열의 각 요소에 대해 주어진 리듀서(reducer) 함수를 실행하고, 하나의 결과값을 반환합니다.</p>\n<p>리듀서 함수는 네 개의 인자를 가집니다.</p>\n<ol>\n<li>누산기accumulator (acc)</li>\n<li>현재 값 (cur)</li>\n<li>현재 인덱스 (idx)</li>\n<li>원본 배열 (src)</li>\n</ol>\n<p>리듀서 함수의 반환 값은 누산기에 할당되고, 누산기는 순회 중 유지되므로 결국 최종 결과는 하나의 값이 됩니다.</p>\n<h2 id=\"구문\"><a href=\"#%EA%B5%AC%EB%AC%B8\" aria-label=\"구문 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>구문</h2>\n<blockquote>\n<p><code class=\"language-text\">arr.reduce(callback[, initialValue])</code></p>\n</blockquote>\n<h3 id=\"parameter\"><a href=\"#parameter\" aria-label=\"parameter permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>parameter</h3>\n<ul>\n<li>callback<br>\n배열의 각 요소에 대해 실행할 함수. 다음 네 가지 인수를 받습니다. - accumulator<br>\n누산기accmulator는 콜백의 반환값을 누적합니다. 콜백의 이전 반환값 또는, 콜백의 첫 번째 호출이면서 initialValue를 제공한 경우에는 initialValue의 값입니다. - currentValue<br>\n처리할 현재 요소. - currentIndex Optional<br>\n처리할 현재 요소의 인덱스. initialValue를 제공한 경우 0, 아니면 1부터 시작합니다. - array Optional<br>\nreduce()를 호출한 배열.</li>\n<li>initialValue Optional<br>\ncallback의 최초 호출에서 첫 번째 인수에 제공하는 값. 초기값을 제공하지 않으면 배열의 첫 번째 요소를 사용합니다. 빈 배열에서 초기값 없이 reduce()를 호출하면 오류가 발생합니다.</li>\n</ul>\n<blockquote>\n<p>콜백의 최초 호출 때 accumulator와 currentValue는 다음 두 가지 값 중 하나를 가질 수 있습니다.</p>\n<blockquote>\n<ul>\n<li>만약 reduce() 함수 호출에서 initialValue를 제공한 경우, accumulator는 initialValue와 같고 currentValue는 배열의 첫 번째 값과 같습니다.</li>\n<li>initialValue를 제공하지 않았다면, accumulator는 배열의 첫 번째 값과 같고 currentValue는 두 번째와 같습니다.</li>\n</ul>\n</blockquote>\n</blockquote>\n<p>배열이 비어있는데 initialValue도 제공하지 않으면 TypeError가 발생합니다.<br>\n그래서 보통 initialValue를 주는 것이 안전합니다.</p>\n<h3 id=\"reduce-작동방식\"><a href=\"#reduce-%EC%9E%91%EB%8F%99%EB%B0%A9%EC%8B%9D\" aria-label=\"reduce 작동방식 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>reduce 작동방식</h3>\n<blockquote>\n<p>[0, 1, 2, 3, 4].reduce(function(accumulator, currentValue, currentIndex, array) {return accumulator + currentValue;});</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">callback</th>\n<th align=\"center\">accumulator</th>\n<th align=\"center\">currentValue</th>\n<th align=\"center\">currentIndex</th>\n<th align=\"left\">array</th>\n<th align=\"center\">반환 값</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">1번째 호출</td>\n<td align=\"center\">0</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"left\">[0, 1, 2, 3, 4]</td>\n<td align=\"center\">1</td>\n</tr>\n<tr>\n<td align=\"left\">2번째 호출</td>\n<td align=\"center\">1</td>\n<td align=\"center\">2</td>\n<td align=\"center\">2</td>\n<td align=\"left\">[0, 1, 2, 3, 4]</td>\n<td align=\"center\">3</td>\n</tr>\n<tr>\n<td align=\"left\">3번째 호출</td>\n<td align=\"center\">3</td>\n<td align=\"center\">3</td>\n<td align=\"center\">3</td>\n<td align=\"left\">[0, 1, 2, 3, 4]</td>\n<td align=\"center\">6</td>\n</tr>\n<tr>\n<td align=\"left\">4번째 호출</td>\n<td align=\"center\">6</td>\n<td align=\"center\">4</td>\n<td align=\"center\">4</td>\n<td align=\"left\">[0, 1, 2, 3, 4]</td>\n<td align=\"center\">10</td>\n</tr>\n</tbody>\n</table>\n<p>reduce()가 반환하는 값으로는 마지막 콜백 호출의 반환값(10)을 사용합니다.</p>\n<p>완전한 함수 대신에 화살표 함수를 제공할 수도 있습니다. 아래 코드는 위의 코드와 같은 결과를 반환합니다.</p>\n<ul>\n<li>[0, 1, 2, 3, 4].reduce( (prev, curr) => prev + curr );</li>\n</ul>\n<blockquote>\n<p>reduce()의 두 번째 인수로 초기값을 제공하는 경우, 결과는 다음과 같습니다:</p>\n</blockquote>\n<p>[0, 1, 2, 3, 4].reduce(function(accumulator, currentValue, currentIndex, array)<br>\n{\nreturn accumulator + currentValue;\n}, 10);</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">callback</th>\n<th align=\"center\">accumulator</th>\n<th align=\"center\">currentValue</th>\n<th align=\"center\">currentIndex</th>\n<th align=\"left\">array</th>\n<th align=\"center\">반환 값</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">1번째 호출</td>\n<td align=\"center\">10</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"left\">[0, 1, 2, 3, 4]</td>\n<td align=\"center\">10</td>\n</tr>\n<tr>\n<td align=\"left\">2번째 호출</td>\n<td align=\"center\">10</td>\n<td align=\"center\">1</td>\n<td align=\"center\">1</td>\n<td align=\"left\">[0, 1, 2, 3, 4]</td>\n<td align=\"center\">11</td>\n</tr>\n<tr>\n<td align=\"left\">3번째 호출</td>\n<td align=\"center\">11</td>\n<td align=\"center\">2</td>\n<td align=\"center\">2</td>\n<td align=\"left\">[0, 1, 2, 3, 4]</td>\n<td align=\"center\">13</td>\n</tr>\n<tr>\n<td align=\"left\">4번째 호출</td>\n<td align=\"center\">13</td>\n<td align=\"center\">3</td>\n<td align=\"center\">3</td>\n<td align=\"left\">[0, 1, 2, 3, 4]</td>\n<td align=\"center\">16</td>\n</tr>\n<tr>\n<td align=\"left\">5번째 호출</td>\n<td align=\"center\">16</td>\n<td align=\"center\">4</td>\n<td align=\"center\">4</td>\n<td align=\"left\">[0, 1, 2, 3, 4]</td>\n<td align=\"center\">20</td>\n</tr>\n</tbody>\n</table>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">자세한 내용은 여기서 확인하세요</a></p>","fields":{"slug":"/posts/python-part5/","tagSlugs":["/tag/python-java-script/"]},"frontmatter":{"date":"2019-10-21T23:30:03.284Z","description":"While/Function/Module&Package/Closure/Reduce","tags":["Python/JavaScript"],"title":"Python Apprenticeship Study Part.5","socialImage":"/media/gutenberg.jpg"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/python-part5/"}}}